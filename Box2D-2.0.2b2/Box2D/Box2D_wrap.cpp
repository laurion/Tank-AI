/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_NO_BUILD_NONE
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 


/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* swig_protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject* swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args))
    {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }

  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_a_2_b2_maxProxies__b2Bound swig_types[0]
#define SWIGTYPE_p_a_e_shapeTypeCount__b2ContactRegister swig_types[1]
#define SWIGTYPE_p_b2AABB swig_types[2]
#define SWIGTYPE_p_b2BlockAllocator swig_types[3]
#define SWIGTYPE_p_b2Body swig_types[4]
#define SWIGTYPE_p_b2BodyDef swig_types[5]
#define SWIGTYPE_p_b2Bound swig_types[6]
#define SWIGTYPE_p_b2BoundaryListener swig_types[7]
#define SWIGTYPE_p_b2BroadPhase swig_types[8]
#define SWIGTYPE_p_b2BufferedPair swig_types[9]
#define SWIGTYPE_p_b2BuoyancyController swig_types[10]
#define SWIGTYPE_p_b2BuoyancyControllerDef swig_types[11]
#define SWIGTYPE_p_b2CircleDef swig_types[12]
#define SWIGTYPE_p_b2CircleShape swig_types[13]
#define SWIGTYPE_p_b2Color swig_types[14]
#define SWIGTYPE_p_b2ConstantAccelController swig_types[15]
#define SWIGTYPE_p_b2ConstantAccelControllerDef swig_types[16]
#define SWIGTYPE_p_b2ConstantForceController swig_types[17]
#define SWIGTYPE_p_b2ConstantForceControllerDef swig_types[18]
#define SWIGTYPE_p_b2Contact swig_types[19]
#define SWIGTYPE_p_b2ContactEdge swig_types[20]
#define SWIGTYPE_p_b2ContactFilter swig_types[21]
#define SWIGTYPE_p_b2ContactID swig_types[22]
#define SWIGTYPE_p_b2ContactID__Features swig_types[23]
#define SWIGTYPE_p_b2ContactListener swig_types[24]
#define SWIGTYPE_p_b2ContactManager swig_types[25]
#define SWIGTYPE_p_b2ContactPoint swig_types[26]
#define SWIGTYPE_p_b2ContactRegister swig_types[27]
#define SWIGTYPE_p_b2ContactResult swig_types[28]
#define SWIGTYPE_p_b2Controller swig_types[29]
#define SWIGTYPE_p_b2ControllerDef swig_types[30]
#define SWIGTYPE_p_b2ControllerEdge swig_types[31]
#define SWIGTYPE_p_b2DebugDraw swig_types[32]
#define SWIGTYPE_p_b2DestructionListener swig_types[33]
#define SWIGTYPE_p_b2DistanceJoint swig_types[34]
#define SWIGTYPE_p_b2DistanceJointDef swig_types[35]
#define SWIGTYPE_p_b2EdgeChainDef swig_types[36]
#define SWIGTYPE_p_b2EdgeShape swig_types[37]
#define SWIGTYPE_p_b2FilterData swig_types[38]
#define SWIGTYPE_p_b2GearJoint swig_types[39]
#define SWIGTYPE_p_b2GearJointDef swig_types[40]
#define SWIGTYPE_p_b2GravityController swig_types[41]
#define SWIGTYPE_p_b2GravityControllerDef swig_types[42]
#define SWIGTYPE_p_b2Jacobian swig_types[43]
#define SWIGTYPE_p_b2Joint swig_types[44]
#define SWIGTYPE_p_b2JointDef swig_types[45]
#define SWIGTYPE_p_b2JointEdge swig_types[46]
#define SWIGTYPE_p_b2LineJoint swig_types[47]
#define SWIGTYPE_p_b2LineJointDef swig_types[48]
#define SWIGTYPE_p_b2Manifold swig_types[49]
#define SWIGTYPE_p_b2ManifoldPoint swig_types[50]
#define SWIGTYPE_p_b2MassData swig_types[51]
#define SWIGTYPE_p_b2Mat22 swig_types[52]
#define SWIGTYPE_p_b2Mat33 swig_types[53]
#define SWIGTYPE_p_b2MouseJoint swig_types[54]
#define SWIGTYPE_p_b2MouseJointDef swig_types[55]
#define SWIGTYPE_p_b2NullContact swig_types[56]
#define SWIGTYPE_p_b2OBB swig_types[57]
#define SWIGTYPE_p_b2Pair swig_types[58]
#define SWIGTYPE_p_b2PairCallback swig_types[59]
#define SWIGTYPE_p_b2PairManager swig_types[60]
#define SWIGTYPE_p_b2PolygonDef swig_types[61]
#define SWIGTYPE_p_b2PolygonShape swig_types[62]
#define SWIGTYPE_p_b2PrismaticJoint swig_types[63]
#define SWIGTYPE_p_b2PrismaticJointDef swig_types[64]
#define SWIGTYPE_p_b2Proxy swig_types[65]
#define SWIGTYPE_p_b2PulleyJoint swig_types[66]
#define SWIGTYPE_p_b2PulleyJointDef swig_types[67]
#define SWIGTYPE_p_b2RevoluteJoint swig_types[68]
#define SWIGTYPE_p_b2RevoluteJointDef swig_types[69]
#define SWIGTYPE_p_b2Segment swig_types[70]
#define SWIGTYPE_p_b2Shape swig_types[71]
#define SWIGTYPE_p_b2ShapeDef swig_types[72]
#define SWIGTYPE_p_b2StackAllocator swig_types[73]
#define SWIGTYPE_p_b2StackEntry swig_types[74]
#define SWIGTYPE_p_b2Sweep swig_types[75]
#define SWIGTYPE_p_b2TensorDampingController swig_types[76]
#define SWIGTYPE_p_b2TensorDampingControllerDef swig_types[77]
#define SWIGTYPE_p_b2TimeStep swig_types[78]
#define SWIGTYPE_p_b2Vec2 swig_types[79]
#define SWIGTYPE_p_b2Vec3 swig_types[80]
#define SWIGTYPE_p_b2Version swig_types[81]
#define SWIGTYPE_p_b2World swig_types[82]
#define SWIGTYPE_p_b2XForm swig_types[83]
#define SWIGTYPE_p_char swig_types[84]
#define SWIGTYPE_p_f_p_b2Contact_p_b2BlockAllocator__void swig_types[85]
#define SWIGTYPE_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact swig_types[86]
#define SWIGTYPE_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact swig_types[87]
#define SWIGTYPE_p_f_p_void__float swig_types[88]
#define SWIGTYPE_p_float swig_types[89]
#define SWIGTYPE_p_int swig_types[90]
#define SWIGTYPE_p_p_b2CircleShape swig_types[91]
#define SWIGTYPE_p_p_b2EdgeShape swig_types[92]
#define SWIGTYPE_p_p_b2PolygonShape swig_types[93]
#define SWIGTYPE_p_p_b2Shape swig_types[94]
#define SWIGTYPE_p_p_void swig_types[95]
#define SWIGTYPE_p_short swig_types[96]
#define SWIGTYPE_p_signed_char swig_types[97]
#define SWIGTYPE_p_unsigned_char swig_types[98]
#define SWIGTYPE_p_unsigned_int swig_types[99]
#define SWIGTYPE_p_unsigned_short swig_types[100]
#define SWIGTYPE_p_void swig_types[101]
static swig_type_info *swig_types[103];
static swig_module_info swig_module = {swig_types, 102, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif
#ifndef METH_O
# error "This python version requires swig to be run with the '-nofastunpack' option"
#endif
#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _Box2D.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__Box2D

#else
#  define SWIG_init    init_Box2D

#endif
#define SWIG_name    "_Box2D"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


    #include "Box2D/Box2D.h"
    
    //Define these functions so that SWIG does not fail
    void b2BroadPhase::ValidatePairs() { }


        bool __b2PythonJointPointerEquals__(b2Joint* a, b2Joint* b) {
            return a==b;
        }
        bool __b2PythonBodyPointerEquals__(b2Body* a, b2Body* b) {
            return a==b;
        }
        bool __b2PythonShapePointerEquals__(b2Shape* a, b2Shape* b) {
            return a==b;
        }
        bool __b2PythonControllerPointerEquals__(b2Controller* a, b2Controller* b) {
            return a==b;
        }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN b2Vec2 *new_b2Vec2__SWIG_2(b2Vec2 &other){
            return new b2Vec2(other.x, other.y);
        }
SWIGINTERN float32 b2Vec2_cross__SWIG_0(b2Vec2 *self,b2Vec2 &other){
            return self->x * other.y - self->y * other.x;
        }
SWIGINTERN b2Vec2 b2Vec2_cross__SWIG_1(b2Vec2 *self,float32 s){
            return b2Vec2(s * self->y, -s * self->x);
        }
SWIGINTERN float32 b2Vec2___getitem__(b2Vec2 *self,int i){
            if (i==0) 
                return self->x;
            else if (i==1) 
                return self->y;
            PyErr_SetString(PyExc_IndexError, "Index must be in (0,1)");
            return 0.0f;
        }
SWIGINTERN void b2Vec2___setitem__(b2Vec2 *self,int i,float32 value){
            if (i==0) 
                self->x=value;
            else if (i==1) 
                self->y=value;
            else
                PyErr_SetString(PyExc_IndexError, "Index must be in (0,1)");
        }
SWIGINTERN bool b2Vec2___equ(b2Vec2 *self,b2Vec2 &other){
            return (self->x == other.x && self->y == other.y);
        }
SWIGINTERN float32 b2Vec2_dot(b2Vec2 *self,b2Vec2 &other){
            return self->x * other.x + self->y * other.y;
        }
SWIGINTERN b2Vec2 b2Vec2___truediv__(b2Vec2 *self,float32 a){ //python 3k
            return b2Vec2(self->x / a, self->y / a);
        }
SWIGINTERN b2Vec2 b2Vec2___div__(b2Vec2 *self,float32 a){
            return b2Vec2(self->x / a, self->y / a);
        }
SWIGINTERN b2Vec2 b2Vec2___mul__(b2Vec2 *self,float32 a){
            return b2Vec2(self->x * a, self->y * a);
        }
SWIGINTERN b2Vec2 b2Vec2___add__(b2Vec2 *self,b2Vec2 *other){
            return b2Vec2(self->x + other->x, self->y + other->y);
        }
SWIGINTERN b2Vec2 b2Vec2___sub__(b2Vec2 *self,b2Vec2 *other){
            return b2Vec2(self->x - other->x, self->y - other->y);
        }
SWIGINTERN b2Vec2 b2Vec2___rmul__(b2Vec2 *self,float32 a){
            return b2Vec2(self->x * a, self->y * a);
        }
SWIGINTERN b2Vec2 b2Vec2___rdiv__(b2Vec2 *self,float32 a){
            return b2Vec2(self->x / a, self->y / a);
        }
SWIGINTERN void b2Vec2___div_float(b2Vec2 *self,float32 a){
            self->x /= a;
            self->y /= a;
        }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN PyObject *b2JointDef_GetUserData(b2JointDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2JointDef_SetUserData(b2JointDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2JointDef_ClearUserData(b2JointDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN PyObject *b2Joint_GetUserData(b2Joint *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Joint_SetUserData(b2Joint *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Joint_ClearUserData(b2Joint *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }
SWIGINTERN long b2Joint___hash__(b2Joint *self){ return (long)self; }
SWIGINTERN b2MouseJoint *b2Joint_asMouseJoint(b2Joint *self){
            if (self->GetType()==e_mouseJoint)
                return (b2MouseJoint*)self;
            return NULL;
        }
SWIGINTERN b2GearJoint *b2Joint_asGearJoint(b2Joint *self){
            if (self->GetType()==e_gearJoint)
                return (b2GearJoint*)self;
            return NULL;
        }
SWIGINTERN b2DistanceJoint *b2Joint_asDistanceJoint(b2Joint *self){
            if (self->GetType()==e_distanceJoint)
                return (b2DistanceJoint*)self;
            return NULL;
        }
SWIGINTERN b2PrismaticJoint *b2Joint_asPrismaticJoint(b2Joint *self){
            if (self->GetType()==e_prismaticJoint)
                return (b2PrismaticJoint*)self;
            return NULL;
        }
SWIGINTERN b2PulleyJoint *b2Joint_asPulleyJoint(b2Joint *self){
            if (self->GetType()==e_pulleyJoint)
                return (b2PulleyJoint*)self;
            return NULL;
        }
SWIGINTERN b2RevoluteJoint *b2Joint_asRevoluteJoint(b2Joint *self){
            if (self->GetType()==e_revoluteJoint)
                return (b2RevoluteJoint*)self;
            return NULL;
        }
SWIGINTERN b2LineJoint *b2Joint_asLineJoint(b2Joint *self){
            if (self->GetType()==e_lineJoint)
                return (b2LineJoint*)self;
            return NULL;
        }

        //Add a b2Distance:
        // dist, x1, x2 = b2Distance(shape1, xf1, shape2, xf2)
        PyObject* b2Distance(const b2Shape* shape1, const b2XForm& xf1, const b2Shape* shape2, const b2XForm& xf2) {
            PyObject* ret=PyTuple_New(3);
            b2Vec2* x1=new b2Vec2;
            b2Vec2* x2=new b2Vec2;
            float dist=b2Distance(x1,x2,shape1,xf1,shape2,xf2);
            PyTuple_SetItem(ret, 0, SWIG_From_float(dist)); 
            PyTuple_SetItem(ret, 1, SWIG_NewPointerObj(SWIG_as_voidptr(x1), SWIGTYPE_p_b2Vec2, 0 ));
            PyTuple_SetItem(ret, 2, SWIG_NewPointerObj(SWIG_as_voidptr(x2), SWIGTYPE_p_b2Vec2, 0 ));
            return ret;
        }


        PyObject* _downcasted_shape(b2Shape* shape) {
            if (!shape) {
                Py_INCREF(Py_None);
                return Py_None; 
            }
            switch (shape->GetType())
            {
            case e_circleShape:
                return SWIG_NewPointerObj(shape, SWIGTYPE_p_b2CircleShape, 0);
            case e_polygonShape:
                return SWIG_NewPointerObj(shape, SWIGTYPE_p_b2PolygonShape, 0);
            case e_edgeShape:
                return SWIG_NewPointerObj(shape, SWIGTYPE_p_b2EdgeShape, 0); 
            case e_unknownShape:
            default:
                return SWIG_NewPointerObj(shape, SWIGTYPE_p_b2Shape, 0);
            }
        }
    

        // Add some functions that might be commonly used
        bool b2AABBOverlaps(const b2AABB& aabb, const b2Vec2& point) {
            //If point is in aabb (including a small buffer around it), return true.
            if (point.x < (aabb.upperBound.x + B2_FLT_EPSILON) &&
                point.x > (aabb.lowerBound.x - B2_FLT_EPSILON) &&
                point.y < (aabb.upperBound.y + B2_FLT_EPSILON) &&
                point.y > (aabb.lowerBound.y - B2_FLT_EPSILON))
                    return true;
            return false;
        }
        
        bool b2AABBOverlaps(const b2AABB& aabb, const b2AABB& aabb2) {
            //If aabb and aabb2 overlap, return true. (modified from b2BroadPhase::InRange)
            b2Vec2 d = b2Max(aabb.lowerBound - aabb2.upperBound, aabb2.lowerBound - aabb.upperBound);
            return b2Max(d.x, d.y) < 0.0f;
        }

        // Modified from the b2PolygonShape constructor
        // Should be as accurate as the original version
        b2Vec2 __b2ComputeCentroid(const b2Vec2* vs, int32 count) {
            b2Vec2 c; c.Set(0.0f, 0.0f);
            if (count < 3 || count >= b2_maxPolygonVertices) {
                PyErr_SetString(PyExc_ValueError, "Vertex count must be >= 3 and < b2_maxPolygonVertices");
                return c;
            }

            float32 area = 0.0f;

            // pRef is the reference point for forming triangles.
            // It's location doesn't change the result (except for rounding error).
            b2Vec2 pRef(0.0f, 0.0f);

            const float32 inv3 = 1.0f / 3.0f;

            for (int32 i = 0; i < count; ++i)
            {
                // Triangle vertices.
                b2Vec2 p1 = pRef;
                b2Vec2 p2 = vs[i];
                b2Vec2 p3 = i + 1 < count ? vs[i+1] : vs[0];

                b2Vec2 e1 = p2 - p1;
                b2Vec2 e2 = p3 - p1;

                float32 D = b2Cross(e1, e2);

                float32 triangleArea = 0.5f * D;
                area += triangleArea;

                // Area weighted centroid
                c += triangleArea * inv3 * (p1 + p2 + p3);
            }

            // Centroid
            if (area <= B2_FLT_EPSILON) {
                PyErr_SetString(PyExc_ValueError, "ComputeCentroid: area <= FLT_EPSILON");
                return c;
            }

            c *= 1.0f / area;
            return c;
        }

        bool __b2ComputeOBB(b2OBB* obb, const b2Vec2* vs, int32 count)
        {
            if (count < 3 || count >= b2_maxPolygonVertices) {
                PyErr_SetString(PyExc_ValueError, "Vertex count must be >= 3 and < b2_maxPolygonVertices");
                return false;
            }

            b2Vec2 p[b2_maxPolygonVertices + 1];
            for (int32 i = 0; i < count; ++i)
            {
                p[i] = vs[i];
            }
            p[count] = p[0];

            float32 minArea = B2_FLT_MAX;
            
            for (int32 i = 1; i <= count; ++i)
            {
                b2Vec2 root = p[i-1];
                b2Vec2 ux = p[i] - root;
                float32 length = ux.Normalize();
                if (length <= B2_FLT_EPSILON) {
                    PyErr_SetString(PyExc_ValueError, "ComputeOBB: length <= B2_FLT_EPSILON");
                    return false;
                }
                b2Vec2 uy(-ux.y, ux.x);
                b2Vec2 lower(B2_FLT_MAX, B2_FLT_MAX);
                b2Vec2 upper(-B2_FLT_MAX, -B2_FLT_MAX);

                for (int32 j = 0; j < count; ++j)
                {
                    b2Vec2 d = p[j] - root;
                    b2Vec2 r;
                    r.x = b2Dot(ux, d);
                    r.y = b2Dot(uy, d);
                    lower = b2Min(lower, r);
                    upper = b2Max(upper, r);
                }

                float32 area = (upper.x - lower.x) * (upper.y - lower.y);
                if (area < 0.95f * minArea)
                {
                    minArea = area;
                    obb->R.col1 = ux;
                    obb->R.col2 = uy;
                    b2Vec2 center = 0.5f * (lower + upper);
                    obb->center = root + b2Mul(obb->R, center);
                    obb->extents = 0.5f * (upper - lower);
                }
            }

            if (minArea >= B2_FLT_MAX) {
                PyErr_SetString(PyExc_ValueError, "ComputeOBB: minArea >= B2_FLT_MAX");
                return false;
            }
            return true;
        }

        bool b2CheckPolygonDef(b2PolygonDef* poly, bool additional_checks=true) {
            // Get the vertices transformed into the body frame.
            if (poly->vertexCount < 3 || poly->vertexCount >= b2_maxPolygonVertices) {
                PyErr_SetString(PyExc_ValueError, "Vertex count must be >= 3 and < b2_maxPolygonVertices");
                return false;
            }

            // Compute normals. Ensure the edges have non-zero length.
            b2Vec2 m_normals[b2_maxPolygonVertices];
            for (int32 i = 0; i < poly->vertexCount; ++i)
            {
                int32 i1 = i;
                int32 i2 = i + 1 < poly->vertexCount ? i + 1 : 0;
                b2Vec2 edge = poly->vertices[i2] - poly->vertices[i1];
                if (edge.LengthSquared() <= B2_FLT_EPSILON * B2_FLT_EPSILON) {
                    PyErr_SetString(PyExc_ValueError, "edge.LengthSquared < FLT_EPSILON**2");
                    return false;
                }
                
                m_normals[i] = b2Cross(edge, 1.0f);
                m_normals[i].Normalize();
            }

            // Compute the polygon centroid.
            b2Vec2 m_centroid = __b2ComputeCentroid(poly->vertices, poly->vertexCount);
            
            // Compute the oriented bounding box.
            b2OBB m_obb;
            __b2ComputeOBB(&m_obb, poly->vertices, poly->vertexCount);

            if (PyErr_Occurred()) 
                return false;

            // Create core polygon shape by shifting edges inward.
            // Also compute the min/max radius for CCD.
            for (int32 i = 0; i < poly->vertexCount; ++i)
            {
                int32 i1 = i - 1 >= 0 ? i - 1 : poly->vertexCount - 1;
                int32 i2 = i;

                b2Vec2 n1 = m_normals[i1];
                b2Vec2 n2 = m_normals[i2];
                b2Vec2 v = poly->vertices[i] - m_centroid;

                b2Vec2 d;
                d.x = b2Dot(n1, v) - b2_toiSlop;
                d.y = b2Dot(n2, v) - b2_toiSlop;

                // Shifting the edge inward by b2_toiSlop should
                // not cause the plane to pass the centroid.

                // Your shape has a radius/extent less than b2_toiSlop.
                if (d.x < 0.0f) {
                    PyErr_SetString(PyExc_ValueError, "Your shape has a radius/extent less than b2_toiSlop. (d.x < 0.0)");
                    return false;
                } else if (d.y < 0.0f) {
                    PyErr_SetString(PyExc_ValueError, "Your shape has a radius/extent less than b2_toiSlop. (d.y < 0.0)");
                    return false;
                }
                b2Mat22 A;
                A.col1.x = n1.x; A.col2.x = n1.y;
                A.col1.y = n2.x; A.col2.y = n2.y;
                //m_coreVertices[i] = A.Solve(d) + m_centroid;
            }

            if (!additional_checks)
                return true;

            // Ensure the polygon is convex.
            for (int32 i = 0; i < poly->vertexCount; ++i)
            {
                for (int32 j = 0; j < poly->vertexCount; ++j)
                {
                    // Do not check vertices on the current edge.
                    if (j == i || j == (i + 1) % poly->vertexCount)
                        continue;
                    
                    float32 s = b2Dot(m_normals[i], poly->vertices[j] - poly->vertices[i]);
                    if (s >= -b2_linearSlop) {
                        PyErr_SetString(PyExc_ValueError, "Your polygon is non-convex (it has an indentation), or it's too skinny");
                        return false;
                    }
                }
            }

            // Ensure the polygon is counter-clockwise.
            for (int32 i = 1; i < poly->vertexCount; ++i)
            {
                float32 cross = b2Cross(m_normals[i-1], m_normals[i]);

                // Keep asinf happy.
                cross = b2Clamp(cross, -1.0f, 1.0f);

                float32 angle = asinf(cross);
                if (angle <= b2_angularSlop) {
                    PyErr_SetString(PyExc_ValueError, "You have consecutive edges that are almost parallel on your polygon.");
                    return false;
                }
            }
            return true;
        }

        /* As of Box2D SVN r191, these functions are no longer in b2Math.h,
           so re-add them here for backwards compatibility */
        #define RAND_LIMIT      32767      
        // Random number in range [-1,1]
        float32 b2Random()      
        {      
                float32 r = (float32)(rand() & (RAND_LIMIT));      
                r /= RAND_LIMIT;      
                r = 2.0f * r - 1.0f;      
                return r;      
        }      
              
        /// Random floating point number in range [lo, hi]      
        float32 b2Random(float32 lo, float32 hi)      
        {      
                float32 r = (float32)(rand() & (RAND_LIMIT));      
                r /= RAND_LIMIT;      
                r = (hi - lo) * r + lo;      
                return r;      
        }

    

    PyObject* collideCircleParticle(b2CircleShape* circle, const b2Vec2& ppos) {
        //out bCollides, b2Vec2 penetration, b2Vec2 penetrationNormal
        //Ported to C from Blaze (D)
        PyObject* ret=PyTuple_New(3);
        PyTuple_SetItem(ret, 0, SWIG_From_bool(false));
        PyTuple_SetItem(ret, 1, SWIG_From_bool(false));
        PyTuple_SetItem(ret, 2, SWIG_From_bool(false));

        b2XForm xf1 = circle->GetBody()->GetXForm();

        b2Vec2 p1 = b2Mul(xf1, circle->GetLocalPosition());
        b2Vec2 p2 = ppos;

        b2Vec2 d = p2 - p1;
        float32 distSqr = b2Dot(d, d);
        float32 r1 = circle->GetRadius();
        float32 r2 = 0.0f;
        float32 radiusSum = r1 + r2;
        if (distSqr > radiusSum * radiusSum) {
            return ret; // false
        }

        b2Vec2* normal=new b2Vec2();
        float32 separation;
        if (distSqr < B2_FLT_EPSILON) {
            separation = -radiusSum;
            normal->Set(0.0f, 1.0f);
        } else {
            float32 dist = sqrt(distSqr);
            separation = dist - radiusSum;
            float32 a = 1.0f / dist;
            normal->x = a * d.x;
            normal->y = a * d.y;
        }

        b2Vec2* penetration=new b2Vec2();
        penetration->x = normal->x * separation;
        penetration->y = normal->y * separation;
        PyTuple_SetItem(ret, 0, SWIG_From_bool(true));
        PyTuple_SetItem(ret, 1, SWIG_NewPointerObj(SWIG_as_voidptr(penetration), SWIGTYPE_p_b2Vec2, 0) );
        PyTuple_SetItem(ret, 2, SWIG_NewPointerObj(SWIG_as_voidptr(normal), SWIGTYPE_p_b2Vec2, 0) );
        return ret;
    }

    PyObject* b2CollidePolyParticle(b2PolygonShape* polygon, const b2Vec2& ppos, float32 pradius) {
        //out bCollides, b2Vec2 penetration, b2Vec2 penetrationNormal
        //Ported to C from Blaze (D)
        PyObject* ret=PyTuple_New(3);
        PyTuple_SetItem(ret, 0, SWIG_From_bool(false));
        PyTuple_SetItem(ret, 1, SWIG_From_bool(false));
        PyTuple_SetItem(ret, 2, SWIG_From_bool(false));

        const b2XForm xf1 = polygon->GetBody()->GetXForm();
        b2XForm xf2;
        xf2.position = ppos;

        // Compute circle position in the frame of the polygon.
        b2Vec2 c = b2Mul(xf2, b2Vec2_zero);
        b2Vec2 cLocal = b2MulT(xf1, c);

        // Find the min separating edge.
        int normalIndex = 0;
        float32 separation = -B2_FLT_MAX;
        float32 radius = pradius;
        b2Vec2* penetration=new b2Vec2();

        int vertexCount = polygon->GetVertexCount();
        const b2Vec2* vertices = polygon->GetVertices();
        const b2Vec2* normals = polygon->GetNormals();

        for (int i = 0; i < vertexCount; ++i) {
            float32 s = b2Dot(normals[i], cLocal - vertices[i]);

            if (s > radius) {
                // Early out.
                return ret; // false
            }

            if (s > separation) {
                separation = s;
                normalIndex = i;
            }
        }

        // If the center is inside the polygon ...
        if (separation < B2_FLT_MAX) {
            b2Vec2 temp = b2Mul(xf1.R, normals[normalIndex]);
            b2Vec2* penetrationNormal=new b2Vec2(temp);
            separation = separation - radius;
            penetration->x = separation * penetrationNormal->x;
            penetration->y = separation * penetrationNormal->y;
            PyTuple_SetItem(ret, 0, SWIG_From_bool(true));
            PyTuple_SetItem(ret, 1, SWIG_NewPointerObj(SWIG_as_voidptr(penetration), SWIGTYPE_p_b2Vec2, 0) );
            PyTuple_SetItem(ret, 2, SWIG_NewPointerObj(SWIG_as_voidptr(penetrationNormal), SWIGTYPE_p_b2Vec2, 0) );
            return ret;
        }

        // Project the circle center onto the edge segment.
        int vertIndex1 = normalIndex;
        int vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;
        b2Vec2 e = vertices[vertIndex2] - vertices[vertIndex1];

        float32 length = e.Normalize();
        //assert(length > float.epsilon);

        // Project the center onto the edge.
        float32 u = b2Dot(cLocal - vertices[vertIndex1], e);
        b2Vec2 p;
        if (u <= 0.0f) {
            p = vertices[vertIndex1];
        } else if (u >= length) {
            p = vertices[vertIndex2];
        } else {
            p = vertices[vertIndex1] + u * e;
        }

        b2Vec2 d = cLocal - p;
        float32 dist = d.Normalize();
        if (dist > radius) {
            return ret; //false
        }

        b2Vec2 temp = b2Mul(xf1.R, d);
        b2Vec2* penetrationNormal=new b2Vec2(temp);
        separation = dist - radius;
        penetration->x = separation * penetrationNormal->x;
        penetration->y = separation * penetrationNormal->y;
        PyTuple_SetItem(ret, 0, SWIG_From_bool(true));
        PyTuple_SetItem(ret, 1, SWIG_NewPointerObj(SWIG_as_voidptr(penetration), SWIGTYPE_p_b2Vec2, 0) );
        PyTuple_SetItem(ret, 2, SWIG_NewPointerObj(SWIG_as_voidptr(penetrationNormal), SWIGTYPE_p_b2Vec2, 0) );
        return ret;
    }



SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN PyObject *b2ShapeDef_GetUserData(b2ShapeDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2ShapeDef_SetUserData(b2ShapeDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2ShapeDef_ClearUserData(b2ShapeDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN PyObject *b2Shape_GetUserData(b2Shape *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Shape_SetUserData(b2Shape *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Shape_ClearUserData(b2Shape *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }
SWIGINTERN long b2Shape___hash__(b2Shape *self){ return (long)self; }
SWIGINTERN PyObject *b2Shape_TestSegment__SWIG_1(b2Shape *self,b2XForm const &xf,b2Segment const &segment,float32 maxLambda){
            int hit;
            float32 lambda=0.0f;
            b2Vec2 normal(0.0f ,0.0f);

            hit=(int)self->TestSegment(xf, &lambda, &normal, segment, maxLambda);

            PyObject* normal_tuple=PyTuple_New(2);
            PyTuple_SetItem(normal_tuple, 0, SWIG_From_float(normal.x));
            PyTuple_SetItem(normal_tuple, 1, SWIG_From_float(normal.y));

            PyObject* ret=PyTuple_New(3);
            PyTuple_SetItem(ret, 0, SWIG_From_int(hit));
            PyTuple_SetItem(ret, 1, SWIG_From_float(lambda));
            PyTuple_SetItem(ret, 2, normal_tuple);
            return ret;
        }
SWIGINTERN b2CircleShape *b2Shape_asCircle(b2Shape *self){
            if (self->GetType()==e_circleShape)
                return (b2CircleShape*)self;
            return NULL;
        }
SWIGINTERN b2PolygonShape *b2Shape_asPolygon(b2Shape *self){
            if (self->GetType()==e_polygonShape)
                return (b2PolygonShape*)self;
            return NULL;
        }
SWIGINTERN b2EdgeShape *b2Shape_asEdge(b2Shape *self){
            if (self->GetType()==e_edgeShape)
                return (b2EdgeShape*)self;
            return NULL;
        }
SWIGINTERN b2Vec2 *b2PolygonDef_getVertex(b2PolygonDef *self,uint16 vnum){
            if (vnum >= b2_maxPolygonVertices || vnum >= self->vertexCount) return NULL;
            return &( self->vertices[vnum] );
        }
SWIGINTERN void b2PolygonDef_setVertex__SWIG_0(b2PolygonDef *self,uint16 vnum,b2Vec2 &value){
            if (vnum >= b2_maxPolygonVertices) return;
            self->vertices[vnum].Set(value.x, value.y);
        }
SWIGINTERN void b2PolygonDef_setVertex__SWIG_1(b2PolygonDef *self,uint16 vnum,float32 x,float32 y){
            if (vnum >= b2_maxPolygonVertices) return;
            self->vertices[vnum].Set(x, y);
        }
SWIGINTERN b2Vec2 const *b2PolygonShape_getVertex(b2PolygonShape *self,uint16 vnum){
            if (vnum >= b2_maxPolygonVertices || vnum >= self->GetVertexCount()) return NULL;
            return &( self->GetVertices() [vnum] );
        }
SWIGINTERN b2Vec2 const *b2PolygonShape_getCoreVertex(b2PolygonShape *self,uint16 vnum){
            if (vnum >= b2_maxPolygonVertices || vnum >= self->GetVertexCount()) return NULL;
            return &( self->GetCoreVertices() [vnum] );
        }
SWIGINTERN b2Vec2 const *b2PolygonShape_getNormal(b2PolygonShape *self,uint16 vnum){
            if (vnum >= b2_maxPolygonVertices || vnum >= self->GetVertexCount()) return NULL;
            return &( self->GetNormals() [vnum] );
        }
SWIGINTERN void b2EdgeChainDef__cleanUp(b2EdgeChainDef *self){
            if (self->vertexCount > 0 && self->vertices)
                delete [] self->vertices;
            self->vertices = NULL;
            self->vertexCount = 0;
        }
SWIGINTERN void b2EdgeChainDef__allocateVertices(b2EdgeChainDef *self,uint16 _count){
            if (self->vertexCount > 0 && self->vertices)
                delete [] self->vertices;
            self->vertices = new b2Vec2 [_count];
            if (!self->vertices) {
                self->vertexCount = 0;
                PyErr_SetString(PyExc_MemoryError, "Insufficient memory");
                return;
            }
            self->vertexCount = _count;
        }
SWIGINTERN b2Vec2 *b2EdgeChainDef_getVertex(b2EdgeChainDef *self,uint16 vnum){
            if (vnum >= self->vertexCount) return NULL;
            return &( self->vertices[vnum] );
        }
SWIGINTERN void b2EdgeChainDef_setVertex__SWIG_0(b2EdgeChainDef *self,uint16 vnum,b2Vec2 &value){
            if (vnum < self->vertexCount)
                self->vertices[vnum].Set(value.x, value.y);
        }
SWIGINTERN void b2EdgeChainDef_setVertex__SWIG_1(b2EdgeChainDef *self,uint16 vnum,float32 x,float32 y){
            if (vnum < self->vertexCount)
                self->vertices[vnum].Set(x, y);
        }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN b2Body *b2World_CreateBody(b2World *self,b2BodyDef *defn){
        b2Body* ret;
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);
        ret=self->CreateBody(defn);
        return ret;
    }
SWIGINTERN b2Joint *b2World_CreateJoint(b2World *self,b2JointDef *defn){
        b2Joint* ret;
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);
        ret=self->CreateJoint(defn);
        return ret;
    }
SWIGINTERN void b2World_DestroyBody(b2World *self,b2Body *body){
        Py_XDECREF((PyObject*)body->GetUserData());
        self->DestroyBody(body);
    }
SWIGINTERN void b2World_DestroyJoint(b2World *self,b2Joint *joint){
        Py_XDECREF((PyObject*)joint->GetUserData());
        self->DestroyJoint(joint);
    }
SWIGINTERN PyObject *b2World_Raycast__SWIG_1(b2World *self,b2Segment const &segment,int32 maxCount,bool solidShapes,PyObject *userData){
            //returns tuple (shapecount, shapes)
            PyObject* ret=Py_None;
            b2Shape** shapes=new b2Shape* [maxCount];

            if (!shapes) {
                PyErr_SetString(PyExc_MemoryError, "Insufficient memory");
                return NULL;
            }
            
            if (userData==Py_None) {
                userData=NULL;
            } else {
                Py_INCREF(userData);
            }

            int32 num = self->Raycast(segment, shapes, maxCount, solidShapes, (void*)userData);

            ret = PyTuple_New(2);
            
            PyObject* shapeList=PyTuple_New(num);

            for (int i=0; i < num; i++) {
                PyTuple_SetItem(shapeList, i, _downcasted_shape(shapes[i]));
            }

            PyTuple_SetItem(ret, 0, SWIG_From_int(num));
            PyTuple_SetItem(ret, 1, shapeList);

            delete [] shapes;
            return ret;
        }
SWIGINTERN PyObject *b2World_RaycastOne__SWIG_1(b2World *self,b2Segment const &segment,bool solidShapes,PyObject *userData){
            //returns tuple (float32 lambda, b2Vec2 normal, shape)
            PyObject* ret=Py_None;
            float32 lambda=1.0;
            b2Vec2* normal=new b2Vec2(0.0, 0.0);
            
            if (userData==Py_None) {
                userData=NULL;
            } else {
                Py_INCREF(userData);
            }

            b2Shape* shape = self->RaycastOne(segment, &lambda, normal, solidShapes, (void*)userData);
            
            ret = PyTuple_New(3);

            PyTuple_SetItem(ret, 0, SWIG_From_float(lambda));
            PyTuple_SetItem(ret, 1, SWIG_NewPointerObj(SWIG_as_voidptr(normal), SWIGTYPE_p_b2Vec2, 0) );
            PyTuple_SetItem(ret, 2, _downcasted_shape(shape));

            return ret;
        }
SWIGINTERN PyObject *b2World_Query__SWIG_1(b2World *self,b2AABB const &aabb,uint32 maxCount){
            // Returns tuple: (number of shapes, shapelist)
            PyObject* ret=Py_None;
            b2Shape** shapes=new b2Shape* [maxCount];

            if (!shapes) {
                PyErr_SetString(PyExc_MemoryError, "Insufficient memory");
                return NULL;
            }

            int32 num=self->Query(aabb, shapes, maxCount);
            if (num < 0)
                num = 0;

            ret = PyTuple_New(2);
            
            PyObject* shapeList=PyTuple_New(num);

            for (int i=0; i < num; i++) {
                PyTuple_SetItem(shapeList, i, _downcasted_shape(shapes[i]));
            }

            PyTuple_SetItem(ret, 0, SWIG_From_int(num));
            PyTuple_SetItem(ret, 1, shapeList);

            delete [] shapes;
            return ret;
        }
SWIGINTERN long b2Controller___hash__(b2Controller *self){ return (long)self; }
SWIGINTERN b2BuoyancyController *b2Controller__asBuoyancyController(b2Controller *self){
            if (self->GetType()==e_buoyancyController)
                return (b2BuoyancyController*)self;
            return NULL;
        }
SWIGINTERN b2ConstantAccelController *b2Controller__asConstantAccelController(b2Controller *self){
            if (self->GetType()==e_constantAccelController)
                return (b2ConstantAccelController*)self;
            return NULL;
        }
SWIGINTERN b2ConstantForceController *b2Controller__asConstantForceController(b2Controller *self){
            if (self->GetType()==e_constantForceController)
                return (b2ConstantForceController*)self;
            return NULL;
        }
SWIGINTERN b2GravityController *b2Controller__asGravityController(b2Controller *self){
            if (self->GetType()==e_gravityController)
                return (b2GravityController*)self;
            return NULL;
        }
SWIGINTERN b2TensorDampingController *b2Controller__asTensorDampingController(b2Controller *self){
            if (self->GetType()==e_tensorDampingController)
                return (b2TensorDampingController*)self;
            return NULL;
        }
SWIGINTERN PyObject *b2BodyDef_GetUserData(b2BodyDef *self){
        PyObject* ret;
        if (!self->userData)
            ret=Py_None;
        else
            ret=(PyObject*)self->userData;
        Py_INCREF((PyObject*)ret);
        return ret;
    }
SWIGINTERN void b2BodyDef_SetUserData(b2BodyDef *self,PyObject *data){
        Py_XDECREF((PyObject*)self->userData);
        Py_INCREF(data);
        self->userData=(void*)data;
    }
SWIGINTERN void b2BodyDef_ClearUserData(b2BodyDef *self){
        Py_XDECREF((PyObject*)self->userData);
        self->userData=NULL;
    }
SWIGINTERN void b2Body_DestroyShape(b2Body *self,b2Shape *shape){
        Py_XDECREF((PyObject*)shape->GetUserData());
        self->DestroyShape(shape);
    }
SWIGINTERN b2Shape *b2Body_CreateShape(b2Body *self,b2ShapeDef *defn){
        b2Shape* ret;
        if (defn)
            Py_XINCREF((PyObject*)defn->userData);
        ret=self->CreateShape(defn);
        return ret;
    }
SWIGINTERN PyObject *b2Body_GetUserData(b2Body *self){
        PyObject* ret=(PyObject*)self->GetUserData();
        if (!ret) ret=Py_None;
        Py_XINCREF(ret);
        return ret;
    }
SWIGINTERN void b2Body_SetUserData(b2Body *self,PyObject *data){
        Py_XDECREF((PyObject*)self->GetUserData());
        Py_INCREF(data);
        self->SetUserData(data);
    }
SWIGINTERN void b2Body_ClearUserData(b2Body *self){
        Py_XDECREF((PyObject*)self->GetUserData());
        self->SetUserData(NULL);
    }
SWIGINTERN long b2Body___hash__(b2Body *self){ return (long)self; }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Box2D_wrap.h"

SwigDirector_b2DestructionListener::SwigDirector_b2DestructionListener(PyObject *self): b2DestructionListener(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2DestructionListener *)this, this);  }
SwigDirector_b2DestructionListener::~SwigDirector_b2DestructionListener() {
}

void SwigDirector_b2DestructionListener::SayGoodbye(b2Joint *joint) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(joint), SWIGTYPE_p_b2Joint,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DestructionListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char * const swig_method_name = "SayGoodbye";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"SayGoodbye");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DestructionListener.SayGoodbye'"); }  }  }
void SwigDirector_b2DestructionListener::SayGoodbye(b2Shape *shape) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(shape), SWIGTYPE_p_b2Shape,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DestructionListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char * const swig_method_name = "SayGoodbye";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"SayGoodbye");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DestructionListener.SayGoodbye'"); }  }  }
SwigDirector_b2BoundaryListener::SwigDirector_b2BoundaryListener(PyObject *self): b2BoundaryListener(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2BoundaryListener *)this, this);  }
SwigDirector_b2BoundaryListener::~SwigDirector_b2BoundaryListener() {
}

void SwigDirector_b2BoundaryListener::Violation(b2Body *body) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(body), SWIGTYPE_p_b2Body,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2BoundaryListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char * const swig_method_name = "Violation";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"Violation");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2BoundaryListener.Violation'"); }  }  }
SwigDirector_b2ContactFilter::SwigDirector_b2ContactFilter(PyObject *self): b2ContactFilter(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2ContactFilter *)this, this);  }
SwigDirector_b2ContactFilter::~SwigDirector_b2ContactFilter() {
}

bool SwigDirector_b2ContactFilter::ShouldCollide(b2Shape *shape1, b2Shape *shape2) { bool c_result; swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(shape1), SWIGTYPE_p_b2Shape,  0 ); swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(shape2), SWIGTYPE_p_b2Shape,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactFilter.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char * const swig_method_name = "ShouldCollide";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"ShouldCollide");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactFilter.ShouldCollide'"); }  }  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val); if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'"); }
   c_result = static_cast< bool >(swig_val); return (bool) c_result; }
bool SwigDirector_b2ContactFilter::RayCollide(void *userData, b2Shape *b2Shape) { bool c_result; swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(userData), SWIGTYPE_p_void,  0 ); swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(b2Shape), SWIGTYPE_p_b2Shape,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactFilter.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char * const swig_method_name = "RayCollide";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"RayCollide");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactFilter.RayCollide'"); }  }  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val); if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'"); }
   c_result = static_cast< bool >(swig_val); return (bool) c_result; }
SwigDirector_b2ContactListener::SwigDirector_b2ContactListener(PyObject *self): b2ContactListener(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2ContactListener *)this, this);  }
SwigDirector_b2ContactListener::~SwigDirector_b2ContactListener() {
}

void SwigDirector_b2ContactListener::Add(b2ContactPoint const *point) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(point), SWIGTYPE_p_b2ContactPoint,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char * const swig_method_name = "Add";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"Add");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.Add'"); }  }  }
void SwigDirector_b2ContactListener::Persist(b2ContactPoint const *point) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(point), SWIGTYPE_p_b2ContactPoint,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char * const swig_method_name = "Persist";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"Persist");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.Persist'"); }  }  }
void SwigDirector_b2ContactListener::Remove(b2ContactPoint const *point) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(point), SWIGTYPE_p_b2ContactPoint,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 2; const char * const swig_method_name = "Remove";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"Remove");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.Remove'"); }  }  }
void SwigDirector_b2ContactListener::Result(b2ContactResult const *point) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(point), SWIGTYPE_p_b2ContactResult,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2ContactListener.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 3; const char * const swig_method_name = "Result";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"Result");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2ContactListener.Result'"); }  }  }
SwigDirector_b2DebugDraw::SwigDirector_b2DebugDraw(PyObject *self): b2DebugDraw(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((b2DebugDraw *)this, this);  }
SwigDirector_b2DebugDraw::~SwigDirector_b2DebugDraw() {
}

void SwigDirector_b2DebugDraw::DrawPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(vertexCount); PyObject* vertex; for (int i=0; i < vertexCount; i++) {
      vertex = PyTuple_New(2); PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)vertices[i].x));
      PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)vertices[i].y)); PyTuple_SetItem(obj0, i, vertex); }  } 
  swig::SwigVar_PyObject obj1; obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 0; const char * const swig_method_name = "DrawPolygon";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawPolygon'"); }  }  }
void SwigDirector_b2DebugDraw::DrawSolidPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(vertexCount); PyObject* vertex; for (int i=0; i < vertexCount; i++) {
      vertex = PyTuple_New(2); PyTuple_SetItem(vertex, 0, SWIG_From_double((float32)vertices[i].x));
      PyTuple_SetItem(vertex, 1, SWIG_From_double((float32)vertices[i].y)); PyTuple_SetItem(obj0, i, vertex); }  } 
  swig::SwigVar_PyObject obj1; obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 1; const char * const swig_method_name = "DrawSolidPolygon";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawSolidPolygon");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawSolidPolygon'"); }  }  }
void SwigDirector_b2DebugDraw::DrawCircle(b2Vec2 const &center, float32 radius, b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)center.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)center.y)); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 2; const char * const swig_method_name = "DrawCircle";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawCircle'"); }  }  }
void SwigDirector_b2DebugDraw::DrawSolidCircle(b2Vec2 const &center, float32 radius, b2Vec2 const &axis, b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)center.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)center.y)); }  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_float(static_cast< float >(radius)); swig::SwigVar_PyObject obj2; { obj2 = PyTuple_New(2);
    PyTuple_SetItem( obj2, 0, SWIG_From_double((float32)axis.x)); PyTuple_SetItem( obj2, 1, SWIG_From_double((float32)axis.y)); }
   swig::SwigVar_PyObject obj3; obj3 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 3; const char * const swig_method_name = "DrawSolidCircle";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawSolidCircle");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawSolidCircle'"); }  }  }
void SwigDirector_b2DebugDraw::DrawSegment(b2Vec2 const &p1, b2Vec2 const &p2, b2Color const &color) {
  swig::SwigVar_PyObject obj0; { obj0 = PyTuple_New(2); PyTuple_SetItem( obj0, 0, SWIG_From_double((float32)p1.x));
    PyTuple_SetItem( obj0, 1, SWIG_From_double((float32)p1.y)); }  swig::SwigVar_PyObject obj1; { obj1 = PyTuple_New(2);
    PyTuple_SetItem( obj1, 0, SWIG_From_double((float32)p2.x)); PyTuple_SetItem( obj1, 1, SWIG_From_double((float32)p2.y)); } 
  swig::SwigVar_PyObject obj2; obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&color), SWIGTYPE_p_b2Color,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 4; const char * const swig_method_name = "DrawSegment";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawSegment");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawSegment'"); }  }  }
void SwigDirector_b2DebugDraw::DrawXForm(b2XForm const &xf) { swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&xf), SWIGTYPE_p_b2XForm,  0 ); if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call b2DebugDraw.__init__."); }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
   const size_t swig_method_index = 5; const char * const swig_method_name = "DrawXForm";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
   swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"DrawXForm");swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
   if (!result) { PyObject *error = PyErr_Occurred(); if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'b2DebugDraw.DrawXForm'"); }  }  }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap___b2PythonJointPointerEquals__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Joint *arg1 = (b2Joint *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"__b2PythonJointPointerEquals__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2PythonJointPointerEquals__" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__b2PythonJointPointerEquals__" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); result = (bool)__b2PythonJointPointerEquals__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2PythonBodyPointerEquals__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"__b2PythonBodyPointerEquals__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2PythonBodyPointerEquals__" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__b2PythonBodyPointerEquals__" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); result = (bool)__b2PythonBodyPointerEquals__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2PythonShapePointerEquals__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"__b2PythonShapePointerEquals__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2PythonShapePointerEquals__" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__b2PythonShapePointerEquals__" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); result = (bool)__b2PythonShapePointerEquals__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2PythonControllerPointerEquals__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; b2Controller *arg2 = (b2Controller *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"__b2PythonControllerPointerEquals__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2PythonControllerPointerEquals__" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__b2PythonControllerPointerEquals__" "', argument " "2"" of type '" "b2Controller *""'");  }
   arg2 = reinterpret_cast< b2Controller * >(argp2); result = (bool)__b2PythonControllerPointerEquals__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN int Swig_var_b2_pi_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_pi is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_pi_get(void) { PyObject *pyobj = 0; pyobj = SWIG_From_float(static_cast< float >(b2_pi));
  return pyobj; }
SWIGINTERN int Swig_var_b2_maxManifoldPoints_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxManifoldPoints is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxManifoldPoints_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxManifoldPoints)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxPolygonVertices_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxPolygonVertices is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxPolygonVertices_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxPolygonVertices)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxProxies_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_maxProxies is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxProxies_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxProxies)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxPairs_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_maxPairs is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxPairs_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxPairs)); return pyobj; }
SWIGINTERN int Swig_var_b2_linearSlop_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_linearSlop is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_linearSlop_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_linearSlop)); return pyobj; }
SWIGINTERN int Swig_var_b2_angularSlop_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_angularSlop is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_angularSlop_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_angularSlop)); return pyobj; }
SWIGINTERN int Swig_var_b2_toiSlop_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_toiSlop is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_toiSlop_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_toiSlop)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxTOIContactsPerIsland_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxTOIContactsPerIsland is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxTOIContactsPerIsland_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxTOIContactsPerIsland)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxTOIJointsPerIsland_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxTOIJointsPerIsland is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxTOIJointsPerIsland_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxTOIJointsPerIsland)); return pyobj; }
SWIGINTERN int Swig_var_b2_velocityThreshold_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_velocityThreshold is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_velocityThreshold_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_velocityThreshold)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxLinearCorrection_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxLinearCorrection is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxLinearCorrection_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxLinearCorrection)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxAngularCorrection_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxAngularCorrection is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxAngularCorrection_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxAngularCorrection)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxLinearVelocity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxLinearVelocity is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxLinearVelocity_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxLinearVelocity)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxLinearVelocitySquared_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxLinearVelocitySquared is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxLinearVelocitySquared_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxLinearVelocitySquared)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxAngularVelocity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxAngularVelocity is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxAngularVelocity_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxAngularVelocity)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxAngularVelocitySquared_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxAngularVelocitySquared is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxAngularVelocitySquared_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_maxAngularVelocitySquared)); return pyobj; }
SWIGINTERN int Swig_var_b2_contactBaumgarte_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_contactBaumgarte is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_contactBaumgarte_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_contactBaumgarte)); return pyobj; }
SWIGINTERN int Swig_var_b2_timeToSleep_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_timeToSleep is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_timeToSleep_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_timeToSleep)); return pyobj; }
SWIGINTERN int Swig_var_b2_linearSleepTolerance_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_linearSleepTolerance is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_linearSleepTolerance_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_linearSleepTolerance)); return pyobj; }
SWIGINTERN int Swig_var_b2_angularSleepTolerance_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_angularSleepTolerance is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_angularSleepTolerance_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_angularSleepTolerance)); return pyobj; }
SWIGINTERN int Swig_var_b2_byteCount_set(PyObject *_val) { { int val; int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) { SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_byteCount""' of type '""int32""'"); } 
    b2_byteCount = static_cast< int32 >(val); }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_byteCount_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_byteCount)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Alloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; int32 arg1 ;
  int val1 ; int ecode1 = 0 ; PyObject *swig_obj[1] ; void *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Alloc" "', argument " "1"" of type '" "int32""'"); }  
  arg1 = static_cast< int32 >(val1); result = (void *)b2Alloc(arg1); { if (!result) resultobj=Py_None; else
    resultobj=(PyObject*)result; Py_INCREF(resultobj); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  void *arg1 = (void *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; { arg1 = swig_obj[0];
    Py_INCREF((PyObject*)arg1); }  b2Free(arg1); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_major_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Version_major_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_major_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_major_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->major = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_major_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_major_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->major);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_minor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Version_minor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_minor_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_minor_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->minor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_minor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_minor_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->minor);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_revision_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Version_revision_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_revision_set" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Version_revision_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->revision = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Version_revision_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Version_revision_get" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); result = (int32) ((arg1)->revision);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Version",0,0,0)) SWIG_fail;
  result = (b2Version *)new b2Version();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Version, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Version *arg1 = (b2Version *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Version, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Version" "', argument " "1"" of type '" "b2Version *""'");  }
   arg1 = reinterpret_cast< b2Version * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Version_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Version, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Version_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_version_set(PyObject *_val) { { void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_b2Version,  0  | 0); if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_version""' of type '""b2Version""'"); }  if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2_version""' of type '""b2Version""'"); }
     else { b2Version * temp; temp  = reinterpret_cast< b2Version * >(argp); b2_version = *temp;
      if (SWIG_IsNewObj(res)) delete temp; }  }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_version_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2_version), SWIGTYPE_p_b2Version,  0 ); return pyobj; }
SWIGINTERN PyObject *_wrap_b2MixFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  float32 result; if (!SWIG_Python_UnpackTuple(args,"b2MixFriction",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2MixFriction" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MixFriction" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = (float32)b2MixFriction(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MixRestitution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  float32 result; if (!SWIG_Python_UnpackTuple(args,"b2MixRestitution",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2MixRestitution" "', argument " "1"" of type '" "float32""'"); }
    arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MixRestitution" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (float32)b2MixRestitution(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; float32 arg1 ;
  float val1 ; int ecode1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2IsValid" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); result = (bool)b2IsValid(arg1); resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2InvSqrt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; float32 arg1 ;
  float val1 ; int ecode1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2InvSqrt" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); result = (float32)b2InvSqrt(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Abs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float val1 ; int ecode1 = 0 ; float32 result;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Abs" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); result = (float32)b2Abs(arg1); resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Vec2 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2Vec2 *)new b2Vec2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  b2Vec2 *result = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Vec2" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Vec2" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = (b2Vec2 *)new b2Vec2(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_SetZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_SetZero" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  (arg1)->SetZero(); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float32 arg3 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject *swig_obj[3] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec2_Set",3,3,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_Set" "', argument " "self"" of type '" "b2Vec2 *""'");  }  }
   ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec2_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); (arg1)->Set(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; b2Vec2 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___neg__" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  result = ((b2Vec2 const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_add_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_add_vector",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_add_vector" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_add_vector" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  (arg1)->operator +=((b2Vec2 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_sub_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_sub_vector",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_sub_vector" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_sub_vector" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  (arg1)->operator -=((b2Vec2 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_mul_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_mul_float",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_mul_float" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_mul_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->operator *=(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_Length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_Length" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  result = (float32)((b2Vec2 const *)arg1)->Length(); resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_LengthSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_LengthSquared" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  result = (float32)((b2Vec2 const *)arg1)->LengthSquared(); resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_Normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_Normalize" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  result = (float32)(arg1)->Normalize(); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_IsValid" "', argument " "self"" of type '" "b2Vec2 const *""'");  }
     }  result = (bool)((b2Vec2 const *)arg1)->IsValid(); resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_x_set",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_x_set" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_x_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->x = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_x_get" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  result = (float32) ((arg1)->x); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_y_set",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_y_set" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_y_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->y = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_y_get" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  result = (float32) ((arg1)->y); resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; b2Vec2 *result = 0 ; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Vec2" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  result = (b2Vec2 *)new_b2Vec2__SWIG_2(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec2(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2Vec2",0,2,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2Vec2__SWIG_0(self, argc, argv);}  if (argc == 1) { return _wrap_new_b2Vec2__SWIG_2(self, argc, argv);} 
  if (argc == 2) { return _wrap_new_b2Vec2__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2Vec2'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec2::b2Vec2()\n" "    b2Vec2::b2Vec2(float32,float32)\n"
  "    b2Vec2::b2Vec2(b2Vec2 &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (float32)b2Vec2_cross__SWIG_0(arg1,*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_cross" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2_cross" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Vec2_cross__SWIG_1(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_cross(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Vec2_cross",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Vec2_cross__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    return _wrap_b2Vec2_cross__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Vec2_cross'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec2::cross(b2Vec2 &)\n" "    b2Vec2::cross(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec2___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int arg2 ; int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; float32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___getitem__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___getitem__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___getitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); result = (float32)b2Vec2___getitem__(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int arg2 ; float32 arg3 ; int val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject *swig_obj[3] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec2___setitem__",3,3,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___setitem__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___setitem__" "', argument " "2"" of type '" "int""'"); }  
  arg2 = static_cast< int >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec2___setitem__" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); b2Vec2___setitem__(arg1,arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___equ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___equ",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___equ" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___equ" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (bool)b2Vec2___equ(arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2_dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; float32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2_dot",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_dot" "', argument " "self"" of type '" "b2Vec2 *""'");  }  }
   {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2_dot" "', argument " "other"" of type '" "b2Vec2 &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (float32)b2Vec2_dot(arg1,*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___truediv__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___truediv__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___truediv__" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = b2Vec2___truediv__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___div__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___div__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___div__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Vec2___div__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___mul__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___mul__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___mul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Vec2___mul__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___add__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___add__" "', argument " "other"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Vec2___add__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___sub__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___sub__" "', argument " "other"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Vec2___sub__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___rmul__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___rmul__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___rmul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Vec2___rmul__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___rdiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___rdiv__",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___rdiv__" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___rdiv__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Vec2___rdiv__(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec2___div_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; float32 arg2 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec2___div_float",2,2,swig_obj)) SWIG_fail; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec2___div_float" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec2___div_float" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); b2Vec2___div_float(arg1,arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Vec2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args; {
    int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Vec2" "', argument " "self"" of type '" "b2Vec2 *""'");  }
     }  delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Vec2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Vec2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Vec2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Vec3 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2Vec3 *)new b2Vec3();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float32 arg2 ; float32 arg3 ; float val1 ; int ecode1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; b2Vec3 *result = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Vec3" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Vec3" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Vec3" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); result = (b2Vec3 *)new b2Vec3(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Vec3(PyObject *self, PyObject *args) { int argc; PyObject *argv[4];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2Vec3",0,3,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2Vec3__SWIG_0(self, argc, argv);}  if (argc == 3) { return _wrap_new_b2Vec3__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2Vec3'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Vec3::b2Vec3()\n" "    b2Vec3::b2Vec3(float32,float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Vec3_SetZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_SetZero" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); (arg1)->SetZero(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; float32 arg3 ; float32 arg4 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; PyObject *swig_obj[4] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Vec3_Set",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_Set" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Vec3_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Vec3_Set" "', argument " "4"" of type '" "float32""'"); }  
  arg4 = static_cast< float32 >(val4); (arg1)->Set(arg2,arg3,arg4); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___neg__" "', argument " "1"" of type '" "b2Vec3 const *""'");  }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); result = ((b2Vec3 const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3___iadd__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___iadd__" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Vec3___iadd__" "', argument " "2"" of type '" "b2Vec3 const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Vec3___iadd__" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); (arg1)->operator +=((b2Vec3 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3___isub__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___isub__" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Vec3___isub__" "', argument " "2"" of type '" "b2Vec3 const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Vec3___isub__" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); (arg1)->operator -=((b2Vec3 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3___imul__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3___imul__" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3___imul__" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); (arg1)->operator *=(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3_x_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_x_set" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_x_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->x = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_x_get" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); result = (float32) ((arg1)->x);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3_y_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_y_set" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_y_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->y = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_y_get" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); result = (float32) ((arg1)->y);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Vec3_z_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_z_set" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Vec3_z_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->z = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Vec3_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Vec3_z_get" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); result = (float32) ((arg1)->z);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Vec3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec3 *arg1 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Vec3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Vec3" "', argument " "1"" of type '" "b2Vec3 *""'");  } 
  arg1 = reinterpret_cast< b2Vec3 * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Vec3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Vec3, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Vec3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Mat22 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2Mat22 *)new b2Mat22();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Mat22 *result = 0 ;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat22" "', argument " "c1"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat22" "', argument " "c2"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; } 
  result = (b2Mat22 *)new b2Mat22((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float32 arg2 ; float32 arg3 ; float32 arg4 ; float val1 ; int ecode1 = 0 ;
  float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; b2Mat22 *result = 0 ;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Mat22" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Mat22" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Mat22" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_b2Mat22" "', argument " "4"" of type '" "float32""'"); }  
  arg4 = static_cast< float32 >(val4); result = (b2Mat22 *)new b2Mat22(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float val1 ; int ecode1 = 0 ; b2Mat22 *result = 0 ;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Mat22" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); result = (b2Mat22 *)new b2Mat22(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat22(PyObject *self, PyObject *args) { int argc; PyObject *argv[5];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2Mat22",0,4,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2Mat22__SWIG_0(self, argc, argv);}  if (argc == 1) { return _wrap_new_b2Mat22__SWIG_3(self, argc, argv);} 
  if (argc == 2) { return _wrap_new_b2Mat22__SWIG_1(self, argc, argv);}  if (argc == 4) {
    return _wrap_new_b2Mat22__SWIG_2(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2Mat22'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat22::b2Mat22()\n" "    b2Mat22::b2Mat22(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Mat22::b2Mat22(float32,float32,float32,float32)\n" "    b2Mat22::b2Mat22(float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mat22_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 temp3 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Set" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Set" "', argument " "c1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Set" "', argument " "c2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  (arg1)->Set((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = (b2Mat22 *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Set" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Mat22_Set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); (arg1)->Set(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_Set(PyObject *self, PyObject *args) { int argc; PyObject *argv[4];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Mat22_Set",0,3,argv))) SWIG_fail; --argc; if (argc == 2) {
    return _wrap_b2Mat22_Set__SWIG_1(self, argc, argv);}  if (argc == 3) { return _wrap_b2Mat22_Set__SWIG_0(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Mat22_Set'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat22::Set(b2Vec2 const &,b2Vec2 const &)\n" "    b2Mat22::Set(float32)\n");
  return 0; }
SWIGINTERN PyObject *_wrap_b2Mat22_SetIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_SetIdentity" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); (arg1)->SetIdentity(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_SetZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_SetZero" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); (arg1)->SetZero(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_GetAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_GetAngle" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = (float32)((b2Mat22 const *)arg1)->GetAngle();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_GetInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_GetInverse" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = ((b2Mat22 const *)arg1)->GetInverse();
  resultobj = SWIG_NewPointerObj((new b2Mat22(static_cast< const b2Mat22& >(result))), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_Solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Mat22_Solve",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Solve" "', argument " "1"" of type '" "b2Mat22 const *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_Solve" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Mat22 const *)arg1)->Solve((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Mat22_col1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_set" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_set" "', argument " "col1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->col1 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col1_get" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = (b2Vec2 *)& ((arg1)->col1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Mat22_col2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_set" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_set" "', argument " "col2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->col2 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat22_col2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat22_col2_get" "', argument " "1"" of type '" "b2Mat22 *""'");  }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = (b2Vec2 *)& ((arg1)->col2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Mat22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat22 *arg1 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat22, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Mat22" "', argument " "1"" of type '" "b2Mat22 *""'");  } 
  arg1 = reinterpret_cast< b2Mat22 * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Mat22_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Mat22, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Mat22_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Mat33__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Mat33 *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2Mat33 *)new b2Mat33();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat33__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; b2Vec3 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Mat33 *result = 0 ;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2Mat33" "', argument " "1"" of type '" "b2Vec3 const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2Mat33" "', argument " "1"" of type '" "b2Vec3 const &""'"); }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_b2Mat33" "', argument " "2"" of type '" "b2Vec3 const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2Mat33" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_b2Mat33" "', argument " "3"" of type '" "b2Vec3 const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2Mat33" "', argument " "3"" of type '" "b2Vec3 const &""'"); }
   arg3 = reinterpret_cast< b2Vec3 * >(argp3);
  result = (b2Mat33 *)new b2Mat33((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2,(b2Vec3 const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Mat33(PyObject *self, PyObject *args) { int argc; PyObject *argv[4];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2Mat33",0,3,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2Mat33__SWIG_0(self, argc, argv);}  if (argc == 3) { return _wrap_new_b2Mat33__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2Mat33'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mat33::b2Mat33()\n"
  "    b2Mat33::b2Mat33(b2Vec3 const &,b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mat33_SetZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_SetZero" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); (arg1)->SetZero(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_Solve33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; b2Vec3 result; if (!SWIG_Python_UnpackTuple(args,"b2Mat33_Solve33",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve33" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_Solve33" "', argument " "2"" of type '" "b2Vec3 const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mat33_Solve33" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = ((b2Mat33 const *)arg1)->Solve33((b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_Solve22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Mat33_Solve22",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve22" "', argument " "1"" of type '" "b2Mat33 const *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_Solve22" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Mat33 const *)arg1)->Solve22((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Mat33_col1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col1_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_col1_set" "', argument " "2"" of type '" "b2Vec3 *""'");  } 
  arg2 = reinterpret_cast< b2Vec3 * >(argp2); if (arg1) (arg1)->col1 = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col1_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->col1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Mat33_col2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col2_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_col2_set" "', argument " "2"" of type '" "b2Vec3 *""'");  } 
  arg2 = reinterpret_cast< b2Vec3 * >(argp2); if (arg1) (arg1)->col2 = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col2_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->col2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Mat33_col3_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col3_set" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mat33_col3_set" "', argument " "2"" of type '" "b2Vec3 *""'");  } 
  arg2 = reinterpret_cast< b2Vec3 * >(argp2); if (arg1) (arg1)->col3 = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mat33_col3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec3 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mat33_col3_get" "', argument " "1"" of type '" "b2Mat33 *""'");  }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); result = (b2Vec3 *)& ((arg1)->col3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Mat33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Mat33 *arg1 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Mat33, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Mat33" "', argument " "1"" of type '" "b2Mat33 *""'");  } 
  arg1 = reinterpret_cast< b2Mat33 * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Mat33_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Mat33, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Mat33_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2XForm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2XForm *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2XForm *)new b2XForm();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2XForm, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2XForm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; b2Vec2 temp1 ; void *argp2 = 0 ; int res2 = 0 ;
  b2XForm *result = 0 ; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2XForm" "', argument " "position"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_b2XForm" "', argument " "2"" of type '" "b2Mat22 const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2XForm" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); result = (b2XForm *)new b2XForm((b2Vec2 const &)*arg1,(b2Mat22 const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2XForm, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2XForm(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2XForm",0,2,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2XForm__SWIG_0(self, argc, argv);}  if (argc == 2) { return _wrap_new_b2XForm__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2XForm'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2XForm::b2XForm()\n" "    b2XForm::b2XForm(b2Vec2 const &,b2Mat22 const &)\n");
  return 0; }
SWIGINTERN PyObject *_wrap_b2XForm_SetIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_SetIdentity" "', argument " "1"" of type '" "b2XForm *""'");  }
   arg1 = reinterpret_cast< b2XForm * >(argp1); (arg1)->SetIdentity(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2XForm_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2XForm_position_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_position_set" "', argument " "1"" of type '" "b2XForm *""'");  }
   arg1 = reinterpret_cast< b2XForm * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2XForm_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_position_get" "', argument " "1"" of type '" "b2XForm *""'");  }
   arg1 = reinterpret_cast< b2XForm * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2XForm_R_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2XForm_R_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_R_set" "', argument " "1"" of type '" "b2XForm *""'");  } 
  arg1 = reinterpret_cast< b2XForm * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2XForm_R_set" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->R = *arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2XForm_R_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2XForm_R_get" "', argument " "1"" of type '" "b2XForm *""'");  } 
  arg1 = reinterpret_cast< b2XForm * >(argp1); result = (b2Mat22 *)& ((arg1)->R);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2XForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2XForm *arg1 = (b2XForm *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2XForm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2XForm" "', argument " "1"" of type '" "b2XForm *""'");  } 
  arg1 = reinterpret_cast< b2XForm * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2XForm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2XForm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2XForm_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Sweep_GetXForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2XForm *arg2 = (b2XForm *) 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Sweep_GetXForm",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_GetXForm" "', argument " "1"" of type '" "b2Sweep const *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2XForm, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Sweep_GetXForm" "', argument " "2"" of type '" "b2XForm *""'");  }
   arg2 = reinterpret_cast< b2XForm * >(argp2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Sweep_GetXForm" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); ((b2Sweep const *)arg1)->GetXForm(arg2,arg3); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_Advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_Advance",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_Advance" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_Advance" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); (arg1)->Advance(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_localCenter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_localCenter_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_set" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_set" "', argument " "localCenter"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localCenter = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_localCenter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_localCenter_get" "', argument " "1"" of type '" "b2Sweep *""'");  }
   arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->localCenter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_c0_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_set" "', argument " "c0"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->c0 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c0_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->c0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_c_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_set" "', argument " "c"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->c = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_c_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (b2Vec2 *)& ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_a0_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a0_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_a0_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->a0 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a0_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->a0);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_a_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_a_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->a = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_a_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->a);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_t0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Sweep_t0_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_t0_set" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Sweep_t0_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->t0 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Sweep_t0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Sweep_t0_get" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); result = (float32) ((arg1)->t0);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Sweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Sweep",0,0,0)) SWIG_fail; result = (b2Sweep *)new b2Sweep();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Sweep, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Sweep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Sweep *arg1 = (b2Sweep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Sweep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Sweep" "', argument " "1"" of type '" "b2Sweep *""'");  } 
  arg1 = reinterpret_cast< b2Sweep * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Sweep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Sweep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Sweep_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2Vec2_zero_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2Vec2_zero is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2Vec2_zero_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2Vec2_zero), SWIGTYPE_p_b2Vec2,  0 ); return pyobj; }
SWIGINTERN int Swig_var_b2Mat22_identity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2Mat22_identity is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2Mat22_identity_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2Mat22_identity), SWIGTYPE_p_b2Mat22,  0 ); return pyobj; }
SWIGINTERN int Swig_var_b2XForm_identity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2XForm_identity is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2XForm_identity_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2XForm_identity), SWIGTYPE_p_b2XForm,  0 ); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Dot__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (float32)b2Dot((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (float32)b2Cross((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; float32 arg2 ; b2Vec2 temp1 ; float val2 ; int ecode2 = 0 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Cross" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = b2Cross((b2Vec2 const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; b2Vec2 *arg2 = 0 ; float val1 ; int ecode1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Cross" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Cross(arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Mul((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2MulT((b2Mat22 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2add" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2add" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = operator +((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2sub__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2sub" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2sub" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = operator -((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2mul__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; b2Vec2 *arg2 = 0 ; float val1 ; int ecode1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2mul" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2mul" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = operator *(arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2equ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2equ",2,2,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2equ" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2equ" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (bool)operator ==((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Distance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; float32 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; {  if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Distance" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Distance" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (float32)b2Distance((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; float32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceSquared",2,2,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceSquared" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceSquared" "', argument " "b"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; } 
  result = (float32)b2DistanceSquared((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2mul__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; b2Vec3 *arg2 = 0 ; float val1 ; int ecode1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  b2Vec3 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2mul" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2mul" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2mul" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = operator *(arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2mul(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2mul",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2mul__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { return _wrap_b2mul__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2mul'.\n"
  "  Possible C/C++ prototypes are:\n" "    operator *(float32,b2Vec2 const &)\n" "    operator *(float32,b2Vec3 const &)\n");
  return 0; }
SWIGINTERN PyObject *_wrap_b2add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec3 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Vec3,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2add" "', argument " "1"" of type '" "b2Vec3 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2add" "', argument " "1"" of type '" "b2Vec3 const &""'"); }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2add" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2add" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = operator +((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2sub__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec3 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Vec3,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2sub" "', argument " "1"" of type '" "b2Vec3 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2sub" "', argument " "1"" of type '" "b2Vec3 const &""'"); }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2sub" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2sub" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = operator -((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2sub(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2sub",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[0])  ||  PyTuple_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2sub__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { return _wrap_b2sub__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2sub'.\n"
  "  Possible C/C++ prototypes are:\n" "    operator -(b2Vec2 const &,b2Vec2 const &)\n"
  "    operator -(b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Dot__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; float32 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Vec3,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Dot" "', argument " "1"" of type '" "b2Vec3 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Dot" "', argument " "1"" of type '" "b2Vec3 const &""'"); }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Dot" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Dot" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = (float32)b2Dot((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Dot(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Dot",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[0])  ||  PyTuple_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Dot__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { return _wrap_b2Dot__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Dot'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Dot(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Dot(b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Cross__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec3 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec3 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Vec3,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Cross" "', argument " "1"" of type '" "b2Vec3 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Cross" "', argument " "1"" of type '" "b2Vec3 const &""'"); }
   arg1 = reinterpret_cast< b2Vec3 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Cross" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Cross" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = b2Cross((b2Vec3 const &)*arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Cross(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Cross",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[0])  ||  PyTuple_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Cross__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; { { _v = (PyList_Check(argv[0])  || 
        PyTuple_Check(argv[0]) ||  SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } } 
    if (!_v) goto check_2; { { int res = SWIG_AsVal_float(argv[1], NULL); _v = SWIG_CheckState(res); } }  if (!_v) goto check_2;
    return _wrap_b2Cross__SWIG_1(self, argc, argv);}  check_2: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec3, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_3; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec3, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_3;
    return _wrap_b2Cross__SWIG_3(self, argc, argv);}  check_3: if (argc == 2) { return _wrap_b2Cross__SWIG_2(self, argc, argv);}
   fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Cross'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Cross(b2Vec2 const &,b2Vec2 const &)\n" "    b2Cross(b2Vec2 const &,float32)\n"
  "    b2Cross(float32,b2Vec2 const &)\n" "    b2Cross(b2Vec3 const &,b2Vec3 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Mat22 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2add" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2add" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2add" "', argument " "2"" of type '" "b2Mat22 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2add" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); result = operator +((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Mat22(static_cast< const b2Mat22& >(result))), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2add(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2add",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[0])  ||  PyTuple_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2add__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec3, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec3, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2;
    return _wrap_b2add__SWIG_1(self, argc, argv);}  check_2: if (argc == 2) { return _wrap_b2add__SWIG_2(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2add'.\n"
  "  Possible C/C++ prototypes are:\n" "    operator +(b2Vec2 const &,b2Vec2 const &)\n"
  "    operator +(b2Vec3 const &,b2Vec3 const &)\n" "    operator +(b2Mat22 const &,b2Mat22 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Mat22 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mul" "', argument " "2"" of type '" "b2Mat22 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); result = b2Mul((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Mat22(static_cast< const b2Mat22& >(result))), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; b2Mat22 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Mat22 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MulT" "', argument " "2"" of type '" "b2Mat22 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "2"" of type '" "b2Mat22 const &""'"); }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); result = b2MulT((b2Mat22 const &)*arg1,(b2Mat22 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Mat22(static_cast< const b2Mat22& >(result))), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat33 *arg1 = 0 ; b2Vec3 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec3 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat33,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat33 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2Mat33 const &""'"); }
   arg1 = reinterpret_cast< b2Mat33 * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Vec3,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Mul" "', argument " "2"" of type '" "b2Vec3 const &""'");  } 
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "2"" of type '" "b2Vec3 const &""'"); }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); result = b2Mul((b2Mat33 const &)*arg1,(b2Vec3 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec3(static_cast< const b2Vec3& >(result))), SWIGTYPE_p_b2Vec3, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul__SWIG_3(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2XForm *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "1"" of type '" "b2XForm const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Mul" "', argument " "1"" of type '" "b2XForm const &""'"); }
   arg1 = reinterpret_cast< b2XForm * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Mul" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Mul((b2XForm const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Mul(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Mul",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Mul__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2;
    return _wrap_b2Mul__SWIG_1(self, argc, argv);}  check_2: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat33, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_3; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec3, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_3;
    return _wrap_b2Mul__SWIG_2(self, argc, argv);}  check_3: if (argc == 2) { return _wrap_b2Mul__SWIG_3(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Mul'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Mul(b2Mat22 const &,b2Vec2 const &)\n"
  "    b2Mul(b2Mat22 const &,b2Mat22 const &)\n" "    b2Mul(b2Mat33 const &,b2Vec3 const &)\n"
  "    b2Mul(b2XForm const &,b2Vec2 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2MulT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2XForm *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "1"" of type '" "b2XForm const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MulT" "', argument " "1"" of type '" "b2XForm const &""'"); }
   arg1 = reinterpret_cast< b2XForm * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MulT" "', argument " "v"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2MulT((b2XForm const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MulT(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2MulT",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_1; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2MulT__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2; {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2;
    return _wrap_b2MulT__SWIG_1(self, argc, argv);}  check_2: if (argc == 2) { return _wrap_b2MulT__SWIG_2(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2MulT'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2MulT(b2Mat22 const &,b2Vec2 const &)\n"
  "    b2MulT(b2Mat22 const &,b2Mat22 const &)\n" "    b2MulT(b2XForm const &,b2Vec2 const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Abs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ; b2Vec2 temp1 ; b2Vec2 result; if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Abs" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  result = b2Abs((b2Vec2 const &)*arg1);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Abs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Mat22 *arg1 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Mat22 result;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2Mat22,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Abs" "', argument " "1"" of type '" "b2Mat22 const &""'");  } 
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Abs" "', argument " "1"" of type '" "b2Mat22 const &""'"); }
   arg1 = reinterpret_cast< b2Mat22 * >(argp1); result = b2Abs((b2Mat22 const &)*arg1);
  resultobj = SWIG_NewPointerObj((new b2Mat22(static_cast< const b2Mat22& >(result))), SWIGTYPE_p_b2Mat22, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Abs(PyObject *self, PyObject *args) { int argc; PyObject *argv[2];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Abs",0,1,argv))) SWIG_fail; --argc; if (argc == 1) { int _v = 0; { {
        _v = (PyList_Check(argv[0])  ||  PyTuple_Check(argv[0]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2Abs__SWIG_1(self, argc, argv);}  check_1: if (argc == 1) { int _v = 0; {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_b2Mat22, 0); _v = SWIG_CheckState(res);}  if (!_v) goto check_2;
    return _wrap_b2Abs__SWIG_2(self, argc, argv);}  check_2: if (argc == 1) { return _wrap_b2Abs__SWIG_0(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Abs'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Abs(float32)\n" "    b2Abs(b2Vec2 const &)\n" "    b2Abs(b2Mat22 const &)\n");
  return 0; }
SWIGINTERN PyObject *_wrap_b2Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Min",2,2,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Min" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Min" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Min((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Max",2,2,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Max" "', argument " "a"" of type '" "b2Vec2 const &""'");  } 
      temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Max" "', argument " "b"" of type '" "b2Vec2 const &""'");  } 
      temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = b2Max((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Clamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0; b2Vec2 *arg1 = 0 ;
  b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; b2Vec2 temp3 ; PyObject *swig_obj[3] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Clamp",3,3,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0] == Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "a"" of type '" "b2Vec2 const &""'");  }
       temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "low"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Clamp" "', argument " "high"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; } 
  result = b2Clamp((b2Vec2 const &)*arg1,(b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2NextPowerOfTwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  uint32 arg1 ; unsigned int val1 ; int ecode1 = 0 ; PyObject *swig_obj[1] ; uint32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2NextPowerOfTwo" "', argument " "1"" of type '" "uint32""'"); }  
  arg1 = static_cast< uint32 >(val1); result = (uint32)b2NextPowerOfTwo(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2IsPowerOfTwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  uint32 arg1 ; unsigned int val1 ; int ecode1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2IsPowerOfTwo" "', argument " "1"" of type '" "uint32""'"); }  
  arg1 = static_cast< uint32 >(val1); result = (bool)b2IsPowerOfTwo(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_linear1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_linear1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear1_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear1_set" "', argument " "linear1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->linear1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_linear1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear1_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (b2Vec2 *)& ((arg1)->linear1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angular1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_angular1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angular1_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Jacobian_angular1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angular1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angular1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angular1_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (float32) ((arg1)->angular1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_linear2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_linear2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear2_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear2_set" "', argument " "linear2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->linear2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_linear2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_linear2_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (b2Vec2 *)& ((arg1)->linear2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angular2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_angular2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angular2_set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Jacobian_angular2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angular2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_angular2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_angular2_get" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); result = (float32) ((arg1)->angular2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_SetZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_SetZero" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); (arg1)->SetZero(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Vec2 *arg4 = 0 ; float32 arg5 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ; float val5 ; int ecode5 = 0 ;
  PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_Set",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Set" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Set" "', argument " "x1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Jacobian_Set" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Set" "', argument " "x2"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2Jacobian_Set" "', argument " "5"" of type '" "float32""'"); }  
  arg5 = static_cast< float32 >(val5); (arg1)->Set((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Jacobian_Compute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Vec2 *arg4 = 0 ; float32 arg5 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ; float val5 ; int ecode5 = 0 ;
  PyObject *swig_obj[5] ; float32 result; if (!SWIG_Python_UnpackTuple(args,"b2Jacobian_Compute",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Compute" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Compute" "', argument " "x1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Jacobian_Compute" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Jacobian_Compute" "', argument " "x2"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2Jacobian_Compute" "', argument " "5"" of type '" "float32""'"); }
    arg5 = static_cast< float32 >(val5);
  result = (float32)(arg1)->Compute((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,arg5);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Jacobian",0,0,0)) SWIG_fail;
  result = (b2Jacobian *)new b2Jacobian();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Jacobian, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Jacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Jacobian *arg1 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Jacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Jacobian" "', argument " "1"" of type '" "b2Jacobian *""'");  }
   arg1 = reinterpret_cast< b2Jacobian * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2Jacobian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Jacobian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Jacobian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2JointEdge_other_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointEdge_other_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_other_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_other_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->other = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_other_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_other_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2Body *) ((arg1)->other);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_joint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointEdge_joint_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_joint_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_joint_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_joint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_joint_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2Joint *) ((arg1)->joint); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2JointEdge *arg2 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2JointEdge_prev_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_prev_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_prev_set" "', argument " "2"" of type '" "b2JointEdge *""'");  }
   arg2 = reinterpret_cast< b2JointEdge * >(argp2); if (arg1) (arg1)->prev = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_prev_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2JointEdge *) ((arg1)->prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; b2JointEdge *arg2 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2JointEdge_next_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_next_set" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointEdge_next_set" "', argument " "2"" of type '" "b2JointEdge *""'");  }
   arg2 = reinterpret_cast< b2JointEdge * >(argp2); if (arg1) (arg1)->next = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointEdge_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointEdge_next_get" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); result = (b2JointEdge *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2JointEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2JointEdge",0,0,0)) SWIG_fail;
  result = (b2JointEdge *)new b2JointEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2JointEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointEdge *arg1 = (b2JointEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2JointEdge" "', argument " "1"" of type '" "b2JointEdge *""'");  }
   arg1 = reinterpret_cast< b2JointEdge * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2JointEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2JointEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2JointEdge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2JointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2JointDef",0,0,0)) SWIG_fail;
  result = (b2JointDef *)new b2JointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2JointType arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointDef_type_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_type_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2JointDef_type_set" "', argument " "2"" of type '" "b2JointType""'"); }
    arg2 = static_cast< b2JointType >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_type_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2JointType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_body1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointDef_body1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_body1_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointDef_body1_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->body1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_body1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_body1_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2Body *) ((arg1)->body1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_body2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointDef_body2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_body2_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2JointDef_body2_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->body2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_body2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_body2_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (b2Body *) ((arg1)->body2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_collideConnected_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2JointDef *arg1 = (b2JointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2JointDef_collideConnected_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_collideConnected_set" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2JointDef_collideConnected_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->collideConnected = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_collideConnected_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_collideConnected_get" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (bool) ((arg1)->collideConnected);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_GetUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); result = (PyObject *)b2JointDef_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2JointDef_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_SetUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); arg2 = swig_obj[1]; b2JointDef_SetUserData(arg1,arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2JointDef_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2JointDef_ClearUserData" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); b2JointDef_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2JointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2JointDef *arg1 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2JointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2JointDef" "', argument " "1"" of type '" "b2JointDef *""'");  }
   arg1 = reinterpret_cast< b2JointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2JointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2JointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2JointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Joint_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetType" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2JointType)((b2Joint const *)arg1)->GetType();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetBody1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetBody1" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2Body *)(arg1)->GetBody1();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetBody2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetBody2" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2Body *)(arg1)->GetBody2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetAnchor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetAnchor1" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = ((b2Joint const *)arg1)->GetAnchor1();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetAnchor2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetAnchor2" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = ((b2Joint const *)arg1)->GetAnchor2();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetReactionForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Joint_GetReactionForce",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetReactionForce" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Joint_GetReactionForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = ((b2Joint const *)arg1)->GetReactionForce(arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetReactionTorque(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; float32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Joint_GetReactionTorque",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetReactionTorque" "', argument " "1"" of type '" "b2Joint const *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Joint_GetReactionTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (float32)((b2Joint const *)arg1)->GetReactionTorque(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetNext" "', argument " "1"" of type '" "b2Joint *""'");  } 
  arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2Joint *)(arg1)->GetNext(); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetCollideConnected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetCollideConnected" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (bool)(arg1)->GetCollideConnected();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_GetUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (PyObject *)b2Joint_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Joint_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_SetUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); arg2 = swig_obj[1]; b2Joint_SetUserData(arg1,arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_ClearUserData" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); b2Joint_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint___hash__" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (long)b2Joint___hash__(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asMouseJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2MouseJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asMouseJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2MouseJoint *)b2Joint_asMouseJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MouseJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asGearJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2GearJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asGearJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2GearJoint *)b2Joint_asGearJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GearJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asDistanceJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2DistanceJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asDistanceJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2DistanceJoint *)b2Joint_asDistanceJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asPrismaticJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2PrismaticJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asPrismaticJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2PrismaticJoint *)b2Joint_asPrismaticJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asPulleyJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2PulleyJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asPulleyJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2PulleyJoint *)b2Joint_asPulleyJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asRevoluteJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2RevoluteJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asRevoluteJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2RevoluteJoint *)b2Joint_asRevoluteJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Joint_asLineJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Joint *arg1 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2LineJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Joint_asLineJoint" "', argument " "1"" of type '" "b2Joint *""'");  }
   arg1 = reinterpret_cast< b2Joint * >(argp1); result = (b2LineJoint *)b2Joint_asLineJoint(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2LineJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2Joint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Joint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2Distance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; b2XForm *arg2 = 0 ; b2Shape *arg3 = (b2Shape *) 0 ;
  b2XForm *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ;
  void *argp4 = 0 ; int res4 = 0 ; PyObject *result = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Distance" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Distance" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Distance" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Distance" "', argument " "3"" of type '" "b2Shape const *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Distance" "', argument " "4"" of type '" "b2XForm const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Distance" "', argument " "4"" of type '" "b2XForm const &""'"); }
   arg4 = reinterpret_cast< b2XForm * >(argp4);
  result = (PyObject *)b2Distance((b2Shape const *)arg1,(b2XForm const &)*arg2,(b2Shape const *)arg3,(b2XForm const &)*arg4);
  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Distance(PyObject *self, PyObject *args) { int argc; PyObject *argv[5];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Distance",0,4,argv))) SWIG_fail; --argc; if (argc == 2) {
    return _wrap_b2Distance__SWIG_0(self, argc, argv);}  if (argc == 4) { return _wrap_b2Distance__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Distance'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Distance(b2Vec2 const &,b2Vec2 const &)\n"
  "    b2Distance(b2Shape const *,b2XForm const &,b2Shape const *,b2XForm const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap__downcasted_shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_downcasted_shape" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (PyObject *)_downcasted_shape(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABBOverlaps__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; bool result;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABBOverlaps" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABBOverlaps" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABBOverlaps" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (bool)b2AABBOverlaps((b2AABB const &)*arg1,(b2Vec2 const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABBOverlaps__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2AABB *arg1 = 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; bool result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABBOverlaps" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABBOverlaps" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2AABBOverlaps" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2AABBOverlaps" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); result = (bool)b2AABBOverlaps((b2AABB const &)*arg1,(b2AABB const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABBOverlaps(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2AABBOverlaps",0,2,argv))) SWIG_fail; --argc; if (argc == 2) { int _v = 0; { {
        _v = (PyList_Check(argv[1])  ||  PyTuple_Check(argv[1]) || 
        SWIG_CheckState(SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_b2Vec2, 0)) ) ? 1 : 0; } }  if (!_v) goto check_1;
    return _wrap_b2AABBOverlaps__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    return _wrap_b2AABBOverlaps__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2AABBOverlaps'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2AABBOverlaps(b2AABB const &,b2Vec2 const &)\n"
  "    b2AABBOverlaps(b2AABB const &,b2AABB const &)\n"); return 0; }
SWIGINTERN PyObject *_wrap___b2ComputeCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; int32 arg2 ; b2Vec2 temp1 ; int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"__b2ComputeCentroid",2,2,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2ComputeCentroid" "', argument " "vs"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__b2ComputeCentroid" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); result = __b2ComputeCentroid((b2Vec2 const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2ComputeOBB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  int val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"__b2ComputeOBB",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2ComputeOBB" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2ComputeOBB" "', argument " "vs"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__b2ComputeOBB" "', argument " "3"" of type '" "int32""'"); }  
  arg3 = static_cast< int32 >(val3); result = (bool)__b2ComputeOBB(arg1,(b2Vec2 const *)arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CheckPolygonDef__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; bool result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CheckPolygonDef" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2CheckPolygonDef" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); result = (bool)b2CheckPolygonDef(arg1,arg2); { if (!result)  SWIG_fail; else
    resultobj = SWIG_From_bool(static_cast< bool >(result)); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CheckPolygonDef__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; bool result;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CheckPolygonDef" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); result = (bool)b2CheckPolygonDef(arg1); { if (!result)  SWIG_fail; else
    resultobj = SWIG_From_bool(static_cast< bool >(result)); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CheckPolygonDef(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2CheckPolygonDef",0,2,argv))) SWIG_fail; --argc; if (argc == 1) {
    return _wrap_b2CheckPolygonDef__SWIG_1(self, argc, argv);}  if (argc == 2) {
    return _wrap_b2CheckPolygonDef__SWIG_0(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2CheckPolygonDef'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2CheckPolygonDef(b2PolygonDef *,bool)\n"
  "    b2CheckPolygonDef(b2PolygonDef *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Random__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; float32 result; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (float32)b2Random();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Random__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float32 arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  float32 result; if ((nobjs < 2) || (nobjs > 2)) SWIG_fail; ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "b2Random" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Random" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); result = (float32)b2Random(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Random(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Random",0,2,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_b2Random__SWIG_0(self, argc, argv);}  if (argc == 2) { return _wrap_b2Random__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Random'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Random()\n" "    b2Random(float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_collideCircleParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; PyObject *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"collideCircleParticle",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collideCircleParticle" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "collideCircleParticle" "', argument " "ppos"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = (PyObject *)collideCircleParticle(arg1,(b2Vec2 const &)*arg2);
  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollidePolyParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ; PyObject *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2CollidePolyParticle",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolyParticle" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolyParticle" "', argument " "ppos"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2CollidePolyParticle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); result = (PyObject *)b2CollidePolyParticle(arg1,(b2Vec2 const &)*arg2,arg3);
  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN int Swig_var_b2_nullFeature_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_nullFeature is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_nullFeature_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(b2_nullFeature)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2ContactID_features_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; b2ContactID::Features *arg2 = (b2ContactID::Features *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactID_features_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_features_set" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID__Features, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactID_features_set" "', argument " "2"" of type '" "b2ContactID::Features *""'");  }
   arg2 = reinterpret_cast< b2ContactID::Features * >(argp2); if (arg1) (arg1)->features = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_features_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactID::Features *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_features_get" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); result = (b2ContactID::Features *)& ((arg1)->features);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID__Features, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_key_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ContactID_key_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_key_set" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactID_key_set" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); if (arg1) (arg1)->key = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactID_key_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactID_key_get" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); result = (uint32) ((arg1)->key);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactID",0,0,0)) SWIG_fail;
  result = (b2ContactID *)new b2ContactID();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactID *arg1 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactID" "', argument " "1"" of type '" "b2ContactID *""'");  }
   arg1 = reinterpret_cast< b2ContactID * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactID_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_localPoint1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint1_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint1_set" "', argument " "localPoint1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localPoint1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint1_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->localPoint1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_localPoint2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint2_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint2_set" "', argument " "localPoint2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localPoint2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_localPoint2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_localPoint2_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->localPoint2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_separation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_separation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_separation_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ManifoldPoint_separation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->separation = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_separation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_separation_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (float32) ((arg1)->separation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_normalImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_normalImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_normalImpulse_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ManifoldPoint_normalImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->normalImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_normalImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_normalImpulse_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (float32) ((arg1)->normalImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_tangentImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_tangentImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_tangentImpulse_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ManifoldPoint_tangentImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->tangentImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_tangentImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_tangentImpulse_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (float32) ((arg1)->tangentImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; b2ContactID *arg2 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ManifoldPoint_id_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_id_set" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ManifoldPoint_id_set" "', argument " "2"" of type '" "b2ContactID *""'");  }
   arg2 = reinterpret_cast< b2ContactID * >(argp2); if (arg1) (arg1)->id = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ManifoldPoint_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactID *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ManifoldPoint_id_get" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); result = (b2ContactID *)& ((arg1)->id);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ManifoldPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ManifoldPoint",0,0,0)) SWIG_fail;
  result = (b2ManifoldPoint *)new b2ManifoldPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ManifoldPoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ManifoldPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ManifoldPoint *arg1 = (b2ManifoldPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ManifoldPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ManifoldPoint" "', argument " "1"" of type '" "b2ManifoldPoint *""'");  }
   arg1 = reinterpret_cast< b2ManifoldPoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ManifoldPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ManifoldPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ManifoldPoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Manifold_points_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2ManifoldPoint *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Manifold_points_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_points_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Manifold_points_set" "', argument " "2"" of type '" "b2ManifoldPoint [b2_maxManifoldPoints]""'");  }
    arg2 = reinterpret_cast< b2ManifoldPoint * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxManifoldPoints; ++ii) arg1->points[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""points""' of type '""b2ManifoldPoint [b2_maxManifoldPoints]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_points_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ManifoldPoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_points_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (b2ManifoldPoint *)(b2ManifoldPoint *) ((arg1)->points);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ManifoldPoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Manifold_normal_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_normal_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_normal_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_pointCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Manifold_pointCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_pointCount_set" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Manifold_pointCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->pointCount = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Manifold_pointCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Manifold_pointCount_get" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); result = (int32) ((arg1)->pointCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Manifold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Manifold",0,0,0)) SWIG_fail;
  result = (b2Manifold *)new b2Manifold();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Manifold, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Manifold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Manifold" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2Manifold_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Manifold, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Manifold_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Segment_TestSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; float32 *arg2 = (float32 *) 0 ; b2Vec2 *arg3 = (b2Vec2 *) 0 ; b2Segment *arg4 = 0 ;
  float32 arg5 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; void *argp4 = 0 ;
  int res4 = 0 ; float val5 ; int ecode5 = 0 ; PyObject *swig_obj[5] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2Segment_TestSegment",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_TestSegment" "', argument " "1"" of type '" "b2Segment const *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Segment_TestSegment" "', argument " "2"" of type '" "float32 *""'");  }
   arg2 = reinterpret_cast< float32 * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2]==Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_TestSegment" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; } 
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Segment,  0  | 0); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Segment_TestSegment" "', argument " "4"" of type '" "b2Segment const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Segment_TestSegment" "', argument " "4"" of type '" "b2Segment const &""'"); }
   arg4 = reinterpret_cast< b2Segment * >(argp4); ecode5 = SWIG_AsVal_float(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2Segment_TestSegment" "', argument " "5"" of type '" "float32""'"); }
    arg5 = static_cast< float32 >(val5);
  result = (bool)((b2Segment const *)arg1)->TestSegment(arg2,arg3,(b2Segment const &)*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Segment_p1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Segment_p1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p1_set" "', argument " "1"" of type '" "b2Segment *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p1_set" "', argument " "p1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->p1 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Segment_p1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p1_get" "', argument " "1"" of type '" "b2Segment *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); result = (b2Vec2 *)& ((arg1)->p1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Segment_p2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Segment_p2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p2_set" "', argument " "1"" of type '" "b2Segment *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p2_set" "', argument " "p2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->p2 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Segment_p2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Segment_p2_get" "', argument " "1"" of type '" "b2Segment *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); result = (b2Vec2 *)& ((arg1)->p2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Segment",0,0,0)) SWIG_fail;
  result = (b2Segment *)new b2Segment();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Segment, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Segment *arg1 = (b2Segment *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Segment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Segment" "', argument " "1"" of type '" "b2Segment *""'");  }
   arg1 = reinterpret_cast< b2Segment * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Segment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Segment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Segment_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2AABB_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_IsValid" "', argument " "1"" of type '" "b2AABB const *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); result = (bool)((b2AABB const *)arg1)->IsValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_lowerBound_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2AABB_lowerBound_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_set" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_set" "', argument " "lowerBound"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->lowerBound = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_lowerBound_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_lowerBound_get" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); result = (b2Vec2 *)& ((arg1)->lowerBound);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_upperBound_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2AABB_upperBound_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_set" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_set" "', argument " "upperBound"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->upperBound = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2AABB_upperBound_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2AABB_upperBound_get" "', argument " "1"" of type '" "b2AABB *""'");  }
   arg1 = reinterpret_cast< b2AABB * >(argp1); result = (b2Vec2 *)& ((arg1)->upperBound);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2AABB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2AABB",0,0,0)) SWIG_fail; result = (b2AABB *)new b2AABB();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2AABB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2AABB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2AABB" "', argument " "1"" of type '" "b2AABB *""'");  } 
  arg1 = reinterpret_cast< b2AABB * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2AABB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2AABB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2AABB_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2OBB_R_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2OBB_R_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_R_set" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2OBB_R_set" "', argument " "2"" of type '" "b2Mat22 *""'");  } 
  arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->R = *arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2OBB_R_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_R_get" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); result = (b2Mat22 *)& ((arg1)->R);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2OBB_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2OBB_center_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_center_set" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_center_set" "', argument " "center"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->center = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2OBB_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_center_get" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); result = (b2Vec2 *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2OBB_extents_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2OBB_extents_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_extents_set" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_extents_set" "', argument " "extents"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->extents = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2OBB_extents_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2OBB_extents_get" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); result = (b2Vec2 *)& ((arg1)->extents);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2OBB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2OBB",0,0,0)) SWIG_fail; result = (b2OBB *)new b2OBB();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2OBB, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2OBB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2OBB *arg1 = (b2OBB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2OBB, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2OBB" "', argument " "1"" of type '" "b2OBB *""'");  } 
  arg1 = reinterpret_cast< b2OBB * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2OBB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2OBB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2OBB_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2CollideCircles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2CircleShape *arg2 = (b2CircleShape *) 0 ; b2XForm *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ; b2XForm *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2CollideCircles",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollideCircles" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2CircleShape, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollideCircles" "', argument " "2"" of type '" "b2CircleShape const *""'");  }
   arg2 = reinterpret_cast< b2CircleShape * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollideCircles" "', argument " "3"" of type '" "b2XForm const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideCircles" "', argument " "3"" of type '" "b2XForm const &""'"); }
   arg3 = reinterpret_cast< b2XForm * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollideCircles" "', argument " "4"" of type '" "b2CircleShape const *""'");  }
   arg4 = reinterpret_cast< b2CircleShape * >(argp4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollideCircles" "', argument " "5"" of type '" "b2XForm const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollideCircles" "', argument " "5"" of type '" "b2XForm const &""'"); }
   arg5 = reinterpret_cast< b2XForm * >(argp5);
  b2CollideCircles(arg1,(b2CircleShape const *)arg2,(b2XForm const &)*arg3,(b2CircleShape const *)arg4,(b2XForm const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollidePolygonAndCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2PolygonShape *arg2 = (b2PolygonShape *) 0 ; b2XForm *arg3 = 0 ;
  b2CircleShape *arg4 = (b2CircleShape *) 0 ; b2XForm *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2CollidePolygonAndCircle",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolygonAndCircle" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollidePolygonAndCircle" "', argument " "2"" of type '" "b2PolygonShape const *""'");  }
   arg2 = reinterpret_cast< b2PolygonShape * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollidePolygonAndCircle" "', argument " "3"" of type '" "b2XForm const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygonAndCircle" "', argument " "3"" of type '" "b2XForm const &""'"); }
   arg3 = reinterpret_cast< b2XForm * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollidePolygonAndCircle" "', argument " "4"" of type '" "b2CircleShape const *""'");  }
   arg4 = reinterpret_cast< b2CircleShape * >(argp4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollidePolygonAndCircle" "', argument " "5"" of type '" "b2XForm const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygonAndCircle" "', argument " "5"" of type '" "b2XForm const &""'"); }
   arg5 = reinterpret_cast< b2XForm * >(argp5);
  b2CollidePolygonAndCircle(arg1,(b2PolygonShape const *)arg2,(b2XForm const &)*arg3,(b2CircleShape const *)arg4,(b2XForm const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CollidePolygons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Manifold *arg1 = (b2Manifold *) 0 ; b2PolygonShape *arg2 = (b2PolygonShape *) 0 ; b2XForm *arg3 = 0 ;
  b2PolygonShape *arg4 = (b2PolygonShape *) 0 ; b2XForm *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ;
  PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2CollidePolygons",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Manifold, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CollidePolygons" "', argument " "1"" of type '" "b2Manifold *""'");  }
   arg1 = reinterpret_cast< b2Manifold * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2CollidePolygons" "', argument " "2"" of type '" "b2PolygonShape const *""'");  }
   arg2 = reinterpret_cast< b2PolygonShape * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2CollidePolygons" "', argument " "3"" of type '" "b2XForm const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygons" "', argument " "3"" of type '" "b2XForm const &""'"); }
   arg3 = reinterpret_cast< b2XForm * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2CollidePolygons" "', argument " "4"" of type '" "b2PolygonShape const *""'");  }
   arg4 = reinterpret_cast< b2PolygonShape * >(argp4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2CollidePolygons" "', argument " "5"" of type '" "b2XForm const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2CollidePolygons" "', argument " "5"" of type '" "b2XForm const &""'"); }
   arg5 = reinterpret_cast< b2XForm * >(argp5);
  b2CollidePolygons(arg1,(b2PolygonShape const *)arg2,(b2XForm const &)*arg3,(b2PolygonShape const *)arg4,(b2XForm const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap___b2Distance__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; b2Shape *arg3 = (b2Shape *) 0 ; b2XForm *arg4 = 0 ;
  b2Shape *arg5 = (b2Shape *) 0 ; b2XForm *arg6 = 0 ; b2Vec2 temp1 ; b2Vec2 temp2 ; void *argp3 = 0 ; int res3 = 0 ;
  void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ; int res6 = 0 ; PyObject *swig_obj[6] ;
  float32 result; if (!SWIG_Python_UnpackTuple(args,"__b2Distance__",6,6,swig_obj)) SWIG_fail; { 
    if (PyTuple_Check(swig_obj[0]) || PyList_Check(swig_obj[0])) {
      int sz = (PyList_Check(swig_obj[0]) ? PyList_Size(swig_obj[0]) : PyTuple_Size(swig_obj[0])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[0]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 0), &temp1.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[0], 1), &temp1.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[0]==Py_None) { temp1.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[0], (void**)&arg1, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2Distance__" "', argument " "x1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp1 =(b2Vec2&) *arg1; }  arg1 = &temp1; }  { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__b2Distance__" "', argument " "x2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; } 
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "__b2Distance__" "', argument " "3"" of type '" "b2Shape const *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "__b2Distance__" "', argument " "4"" of type '" "b2XForm const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__b2Distance__" "', argument " "4"" of type '" "b2XForm const &""'"); }
   arg4 = reinterpret_cast< b2XForm * >(argp4); res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "__b2Distance__" "', argument " "5"" of type '" "b2Shape const *""'");  }
   arg5 = reinterpret_cast< b2Shape * >(argp5); res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "__b2Distance__" "', argument " "6"" of type '" "b2XForm const &""'");  }
   if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__b2Distance__" "', argument " "6"" of type '" "b2XForm const &""'"); }
   arg6 = reinterpret_cast< b2XForm * >(argp6);
  result = (float32)b2Distance(arg1,arg2,(b2Shape const *)arg3,(b2XForm const &)*arg4,(b2Shape const *)arg5,(b2XForm const &)*arg6);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeOfImpact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2Sweep *arg2 = 0 ; b2Shape *arg3 = (b2Shape *) 0 ; b2Sweep *arg4 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  PyObject *swig_obj[4] ; float32 result; if (!SWIG_Python_UnpackTuple(args,"b2TimeOfImpact",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeOfImpact" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Sweep,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TimeOfImpact" "', argument " "2"" of type '" "b2Sweep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TimeOfImpact" "', argument " "2"" of type '" "b2Sweep const &""'"); }
   arg2 = reinterpret_cast< b2Sweep * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2TimeOfImpact" "', argument " "3"" of type '" "b2Shape const *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Sweep,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2TimeOfImpact" "', argument " "4"" of type '" "b2Sweep const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TimeOfImpact" "', argument " "4"" of type '" "b2Sweep const &""'"); }
   arg4 = reinterpret_cast< b2Sweep * >(argp4);
  result = (float32)b2TimeOfImpact((b2Shape const *)arg1,(b2Sweep const &)*arg2,(b2Shape const *)arg3,(b2Sweep const &)*arg4);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TestOverlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; bool result; if (!SWIG_Python_UnpackTuple(args,"b2TestOverlap",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TestOverlap" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TestOverlap" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2TestOverlap" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); result = (bool)b2TestOverlap((b2AABB const &)*arg1,(b2AABB const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_mass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MassData_mass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_mass_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MassData_mass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->mass = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_mass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_mass_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (float32) ((arg1)->mass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_center_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MassData_center_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_set" "', argument " "center"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->center = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_center_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_center_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (b2Vec2 *)& ((arg1)->center);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_I_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MassData_I_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_I_set" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MassData_I_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->I = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MassData_I_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MassData_I_get" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); result = (float32) ((arg1)->I);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2MassData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2MassData",0,0,0)) SWIG_fail;
  result = (b2MassData *)new b2MassData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MassData, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MassData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MassData *arg1 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MassData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MassData" "', argument " "1"" of type '" "b2MassData *""'");  }
   arg1 = reinterpret_cast< b2MassData * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2MassData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MassData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MassData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2FilterData_categoryBits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2FilterData *arg1 = (b2FilterData *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2FilterData_categoryBits_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_categoryBits_set" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FilterData_categoryBits_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->categoryBits = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FilterData_categoryBits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2FilterData *arg1 = (b2FilterData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  uint16 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_categoryBits_get" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); result = (uint16) ((arg1)->categoryBits);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FilterData_maskBits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2FilterData *arg1 = (b2FilterData *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2FilterData_maskBits_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_maskBits_set" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FilterData_maskBits_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->maskBits = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FilterData_maskBits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2FilterData *arg1 = (b2FilterData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_maskBits_get" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); result = (uint16) ((arg1)->maskBits);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2FilterData_groupIndex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2FilterData *arg1 = (b2FilterData *) 0 ; int16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2FilterData_groupIndex_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_groupIndex_set" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); ecode2 = SWIG_AsVal_short(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2FilterData_groupIndex_set" "', argument " "2"" of type '" "int16""'"); }
    arg2 = static_cast< int16 >(val2); if (arg1) (arg1)->groupIndex = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2FilterData_groupIndex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2FilterData *arg1 = (b2FilterData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int16 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2FilterData_groupIndex_get" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); result = (int16) ((arg1)->groupIndex);
  resultobj = SWIG_From_short(static_cast< short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2FilterData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2FilterData *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2FilterData",0,0,0)) SWIG_fail;
  result = (b2FilterData *)new b2FilterData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FilterData, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2FilterData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2FilterData *arg1 = (b2FilterData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2FilterData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2FilterData" "', argument " "1"" of type '" "b2FilterData *""'");  }
   arg1 = reinterpret_cast< b2FilterData * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2FilterData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2FilterData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2FilterData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2ShapeDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ShapeDef",0,0,0)) SWIG_fail;
  result = (b2ShapeDef *)new b2ShapeDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ShapeDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ShapeDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ShapeDef" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; b2ShapeType arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_type_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_type_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ShapeDef_type_set" "', argument " "2"" of type '" "b2ShapeType""'"); }
    arg2 = static_cast< b2ShapeType >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ShapeType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_type_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (b2ShapeType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_friction_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_friction_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ShapeDef_friction_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->friction = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_friction_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (float32) ((arg1)->friction);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_restitution_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_restitution_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ShapeDef_restitution_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->restitution = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_restitution_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (float32) ((arg1)->restitution);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_density_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_density_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_density_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ShapeDef_density_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->density = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_density_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_density_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (float32) ((arg1)->density);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_isSensor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_isSensor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_isSensor_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ShapeDef_isSensor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->isSensor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_isSensor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_isSensor_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (bool) ((arg1)->isSensor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_filter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; b2FilterData *arg2 = (b2FilterData *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_filter_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_filter_set" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2FilterData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ShapeDef_filter_set" "', argument " "2"" of type '" "b2FilterData *""'");  }
   arg2 = reinterpret_cast< b2FilterData * >(argp2); if (arg1) (arg1)->filter = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_filter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2FilterData *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_filter_get" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (b2FilterData *)& ((arg1)->filter);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FilterData, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_GetUserData" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); result = (PyObject *)b2ShapeDef_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ShapeDef_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_SetUserData" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); arg2 = swig_obj[1]; b2ShapeDef_SetUserData(arg1,arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ShapeDef_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ShapeDef *arg1 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ShapeDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ShapeDef_ClearUserData" "', argument " "1"" of type '" "b2ShapeDef *""'");  }
   arg1 = reinterpret_cast< b2ShapeDef * >(argp1); b2ShapeDef_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2ShapeDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ShapeDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ShapeDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Shape_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ShapeType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetType" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2ShapeType)((b2Shape const *)arg1)->GetType();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_IsSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_IsSensor" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (bool)((b2Shape const *)arg1)->IsSensor();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetSensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetSensor",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetSensor" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Shape_SetSensor" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); (arg1)->SetSensor(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetFilterData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2FilterData *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetFilterData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetFilterData" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2FilterData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_SetFilterData" "', argument " "2"" of type '" "b2FilterData const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_SetFilterData" "', argument " "2"" of type '" "b2FilterData const &""'"); }
   arg2 = reinterpret_cast< b2FilterData * >(argp2); (arg1)->SetFilterData((b2FilterData const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetFilterData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2FilterData *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetFilterData" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2FilterData *) &((b2Shape const *)arg1)->GetFilterData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2FilterData, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetBody" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2Body *)(arg1)->GetBody();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetNext" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2Shape *)(arg1)->GetNext(); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_TestPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2XForm *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; b2Vec2 temp3 ; PyObject *swig_obj[3] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2Shape_TestPoint",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestPoint" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_TestPoint" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestPoint" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestPoint" "', argument " "p"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; } 
  result = (bool)((b2Shape const *)arg1)->TestPoint((b2XForm const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_TestSegment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; b2XForm *arg2 = 0 ; float32 *arg3 = (float32 *) 0 ;
  b2Vec2 *arg4 = (b2Vec2 *) 0 ; b2Segment *arg5 = 0 ; float32 arg6 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; void *argp5 = 0 ; int res5 = 0 ; float val6 ; int ecode6 = 0 ;
  b2SegmentCollide result; if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestSegment" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_TestSegment" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestSegment" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape_TestSegment" "', argument " "3"" of type '" "float32 *""'");  }
   arg3 = reinterpret_cast< float32 * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3]==Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestSegment" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; } 
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2Segment,  0  | 0); if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2Shape_TestSegment" "', argument " "5"" of type '" "b2Segment const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestSegment" "', argument " "5"" of type '" "b2Segment const &""'"); }
   arg5 = reinterpret_cast< b2Segment * >(argp5); ecode6 = SWIG_AsVal_float(swig_obj[5], &val6); if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "b2Shape_TestSegment" "', argument " "6"" of type '" "float32""'"); }
    arg6 = static_cast< float32 >(val6);
  result = (b2SegmentCollide)((b2Shape const *)arg1)->TestSegment((b2XForm const &)*arg2,arg3,arg4,(b2Segment const &)*arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_ComputeAABB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; b2XForm *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Shape_ComputeAABB",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeAABB" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_ComputeAABB" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape_ComputeAABB" "', argument " "3"" of type '" "b2XForm const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_ComputeAABB" "', argument " "3"" of type '" "b2XForm const &""'"); }
   arg3 = reinterpret_cast< b2XForm * >(argp3); ((b2Shape const *)arg1)->ComputeAABB(arg2,(b2XForm const &)*arg3);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_ComputeSweptAABB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; b2XForm *arg3 = 0 ; b2XForm *arg4 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  PyObject *swig_obj[4] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_ComputeSweptAABB",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeSweptAABB" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_ComputeSweptAABB" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape_ComputeSweptAABB" "', argument " "3"" of type '" "b2XForm const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_ComputeSweptAABB" "', argument " "3"" of type '" "b2XForm const &""'"); }
   arg3 = reinterpret_cast< b2XForm * >(argp3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Shape_ComputeSweptAABB" "', argument " "4"" of type '" "b2XForm const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_ComputeSweptAABB" "', argument " "4"" of type '" "b2XForm const &""'"); }
   arg4 = reinterpret_cast< b2XForm * >(argp4);
  ((b2Shape const *)arg1)->ComputeSweptAABB(arg2,(b2XForm const &)*arg3,(b2XForm const &)*arg4); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_ComputeMass",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeMass" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_ComputeMass" "', argument " "2"" of type '" "b2MassData *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); ((b2Shape const *)arg1)->ComputeMass(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_ComputeSubmergedArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2XForm *arg4 = 0 ;
  b2Vec2 *arg5 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; void *argp4 = 0 ;
  int res4 = 0 ; b2Vec2 temp5 ; PyObject *swig_obj[5] ; float32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Shape_ComputeSubmergedArea",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "normal"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "4"" of type '" "b2XForm const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "4"" of type '" "b2XForm const &""'"); }
   arg4 = reinterpret_cast< b2XForm * >(argp4); {  if (PyTuple_Check(swig_obj[4]) || PyList_Check(swig_obj[4])) {
      int sz = (PyList_Check(swig_obj[4]) ? PyList_Size(swig_obj[4]) : PyTuple_Size(swig_obj[4])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[4]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 0), &temp5.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 1), &temp5.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[4]==Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[4], (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ComputeSubmergedArea" "', argument " "c"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; } 
  result = (float32)((b2Shape const *)arg1)->ComputeSubmergedArea((b2Vec2 const &)*arg2,arg3,(b2XForm const &)*arg4,arg5);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetSweepRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetSweepRadius" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (float32)((b2Shape const *)arg1)->GetSweepRadius();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetFriction" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (float32)((b2Shape const *)arg1)->GetFriction();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetFriction",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetFriction" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Shape_SetFriction" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetFriction(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetRestitution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetRestitution" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (float32)((b2Shape const *)arg1)->GetRestitution();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetRestitution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetRestitution",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetRestitution" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Shape_SetRestitution" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetRestitution(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetDensity" "', argument " "1"" of type '" "b2Shape const *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (float32)((b2Shape const *)arg1)->GetDensity();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetDensity",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetDensity" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Shape_SetDensity" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetDensity(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_GetUserData" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (PyObject *)b2Shape_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Shape_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_SetUserData" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); arg2 = swig_obj[1]; b2Shape_SetUserData(arg1,arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_ClearUserData" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); b2Shape_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape___hash__" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (long)b2Shape___hash__(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_TestSegment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2Shape *arg1 = (b2Shape *) 0 ; b2XForm *arg2 = 0 ; b2Segment *arg3 = 0 ; float32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; float val4 ;
  int ecode4 = 0 ; PyObject *result = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_TestSegment" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Shape_TestSegment" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestSegment" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Shape_TestSegment" "', argument " "3"" of type '" "b2Segment const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Shape_TestSegment" "', argument " "3"" of type '" "b2Segment const &""'"); }
   arg3 = reinterpret_cast< b2Segment * >(argp3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Shape_TestSegment" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4);
  result = (PyObject *)b2Shape_TestSegment__SWIG_1(arg1,(b2XForm const &)*arg2,(b2Segment const &)*arg3,arg4);
  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_TestSegment(PyObject *self, PyObject *args) { int argc; PyObject *argv[7];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2Shape_TestSegment",0,6,argv))) SWIG_fail; --argc; if (argc == 4) {
    return _wrap_b2Shape_TestSegment__SWIG_1(self, argc, argv);}  if (argc == 6) {
    return _wrap_b2Shape_TestSegment__SWIG_0(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2Shape_TestSegment'.\n"
  "  Possible C/C++ prototypes are:\n"
  "    b2Shape::TestSegment(b2XForm const &,float32 *,b2Vec2 *,b2Segment const &,float32) const\n"
  "    b2Shape::TestSegment(b2XForm const &,b2Segment const &,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Shape_asCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2CircleShape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_asCircle" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2CircleShape *)b2Shape_asCircle(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2CircleShape, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_asPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2PolygonShape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_asPolygon" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2PolygonShape *)b2Shape_asPolygon(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PolygonShape, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Shape_asEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2EdgeShape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shape_asEdge" "', argument " "1"" of type '" "b2Shape *""'");  } 
  arg1 = reinterpret_cast< b2Shape * >(argp1); result = (b2EdgeShape *)b2Shape_asEdge(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2EdgeShape, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2Shape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Shape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2CircleDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2CircleDef",0,0,0)) SWIG_fail;
  result = (b2CircleDef *)new b2CircleDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2CircleDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleDef_localPosition_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2CircleDef *arg1 = (b2CircleDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2CircleDef_localPosition_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleDef_localPosition_set" "', argument " "1"" of type '" "b2CircleDef *""'");  }
   arg1 = reinterpret_cast< b2CircleDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleDef_localPosition_set" "', argument " "localPosition"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localPosition = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleDef_localPosition_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2CircleDef *arg1 = (b2CircleDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleDef_localPosition_get" "', argument " "1"" of type '" "b2CircleDef *""'");  }
   arg1 = reinterpret_cast< b2CircleDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localPosition);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleDef_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleDef *arg1 = (b2CircleDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2CircleDef_radius_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleDef_radius_set" "', argument " "1"" of type '" "b2CircleDef *""'");  }
   arg1 = reinterpret_cast< b2CircleDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2CircleDef_radius_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->radius = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleDef_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleDef *arg1 = (b2CircleDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleDef_radius_get" "', argument " "1"" of type '" "b2CircleDef *""'");  }
   arg1 = reinterpret_cast< b2CircleDef * >(argp1); result = (float32) ((arg1)->radius);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2CircleDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleDef *arg1 = (b2CircleDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2CircleDef" "', argument " "1"" of type '" "b2CircleDef *""'");  }
   arg1 = reinterpret_cast< b2CircleDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2CircleDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2CircleDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2CircleDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2CircleShape_GetLocalPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape_GetLocalPosition" "', argument " "1"" of type '" "b2CircleShape const *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); result = (b2Vec2 *) &((b2CircleShape const *)arg1)->GetLocalPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2CircleShape_GetRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2CircleShape_GetRadius" "', argument " "1"" of type '" "b2CircleShape const *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); result = (float32)((b2CircleShape const *)arg1)->GetRadius();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2CircleShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2CircleShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2CircleShape" "', argument " "1"" of type '" "b2CircleShape *""'");  }
   arg1 = reinterpret_cast< b2CircleShape * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2CircleShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2CircleShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2PolygonDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2PolygonDef",0,0,0)) SWIG_fail;
  result = (b2PolygonDef *)new b2PolygonDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PolygonDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_SetAsBox__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_SetAsBox" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_SetAsBox" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonDef_SetAsBox" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); (arg1)->SetAsBox(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_SetAsBox__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; float32 arg2 ; float32 arg3 ; b2Vec2 *arg4 = 0 ;
  float32 arg5 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ;
  float val5 ; int ecode5 = 0 ; if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_SetAsBox" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_SetAsBox" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonDef_SetAsBox" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_SetAsBox" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2PolygonDef_SetAsBox" "', argument " "5"" of type '" "float32""'"); }
    arg5 = static_cast< float32 >(val5); (arg1)->SetAsBox(arg2,arg3,(b2Vec2 const &)*arg4,arg5); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_SetAsBox(PyObject *self, PyObject *args) { int argc; PyObject *argv[6];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2PolygonDef_SetAsBox",0,5,argv))) SWIG_fail; --argc; if (argc == 3) {
    return _wrap_b2PolygonDef_SetAsBox__SWIG_0(self, argc, argv);}  if (argc == 5) {
    return _wrap_b2PolygonDef_SetAsBox__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2PolygonDef_SetAsBox'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2PolygonDef::SetAsBox(float32,float32)\n"
  "    b2PolygonDef::SetAsBox(float32,float32,b2Vec2 const &,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_vertexCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonDef_vertexCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_vertexCount_set" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_vertexCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->vertexCount = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_vertexCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_vertexCount_get" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); result = (int32) ((arg1)->vertexCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_getVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonDef_getVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_getVertex" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_getVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); result = (b2Vec2 *)b2PolygonDef_getVertex(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_setVertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; uint16 arg2 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; b2Vec2 temp3 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_setVertex" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_setVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_setVertex" "', argument " "value"" of type '" "b2Vec2 &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  b2PolygonDef_setVertex__SWIG_0(arg1,arg2,*arg3); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_setVertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; uint16 arg2 ; float32 arg3 ; float32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ;
  int ecode4 = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonDef_setVertex" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonDef_setVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PolygonDef_setVertex" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2PolygonDef_setVertex" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4); b2PolygonDef_setVertex__SWIG_1(arg1,arg2,arg3,arg4); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonDef_setVertex(PyObject *self, PyObject *args) { int argc; PyObject *argv[5];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2PolygonDef_setVertex",0,4,argv))) SWIG_fail; --argc; if (argc == 3) {
    return _wrap_b2PolygonDef_setVertex__SWIG_0(self, argc, argv);}  if (argc == 4) {
    return _wrap_b2PolygonDef_setVertex__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2PolygonDef_setVertex'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2PolygonDef::setVertex(uint16,b2Vec2 &)\n"
  "    b2PolygonDef::setVertex(uint16,float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_delete_b2PolygonDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonDef *arg1 = (b2PolygonDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PolygonDef" "', argument " "1"" of type '" "b2PolygonDef *""'");  }
   arg1 = reinterpret_cast< b2PolygonDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PolygonDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PolygonDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PolygonDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PolygonShape_GetOBB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2OBB *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_GetOBB" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (b2OBB *) &((b2PolygonShape const *)arg1)->GetOBB();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2OBB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_GetCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_GetCentroid" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (b2Vec2 *) &((b2PolygonShape const *)arg1)->GetCentroid();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_GetVertexCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_GetVertexCount" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (int32)((b2PolygonShape const *)arg1)->GetVertexCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_GetCoreVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_GetCoreVertices" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); result = (b2Vec2 *)((b2PolygonShape const *)arg1)->GetCoreVertices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_GetFirstVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2XForm *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_GetFirstVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_GetFirstVertex" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PolygonShape_GetFirstVertex" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PolygonShape_GetFirstVertex" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); result = ((b2PolygonShape const *)arg1)->GetFirstVertex((b2XForm const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_Centroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2XForm *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_Centroid",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_Centroid" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PolygonShape_Centroid" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PolygonShape_Centroid" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); result = ((b2PolygonShape const *)arg1)->Centroid((b2XForm const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_Support(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; b2XForm *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; PyObject *swig_obj[3] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_Support",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_Support" "', argument " "1"" of type '" "b2PolygonShape const *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PolygonShape_Support" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PolygonShape_Support" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_Support" "', argument " "d"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; } 
  result = ((b2PolygonShape const *)arg1)->Support((b2XForm const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_getVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_getVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_getVertex" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_getVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); result = (b2Vec2 *)b2PolygonShape_getVertex(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_getCoreVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_getCoreVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_getCoreVertex" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_getCoreVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); result = (b2Vec2 *)b2PolygonShape_getCoreVertex(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PolygonShape_getNormal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2PolygonShape_getNormal",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PolygonShape_getNormal" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PolygonShape_getNormal" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); result = (b2Vec2 *)b2PolygonShape_getNormal(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PolygonShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PolygonShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PolygonShape" "', argument " "1"" of type '" "b2PolygonShape *""'");  }
   arg1 = reinterpret_cast< b2PolygonShape * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PolygonShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PolygonShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2EdgeChainDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2EdgeChainDef",0,0,0)) SWIG_fail;
  result = (b2EdgeChainDef *)new b2EdgeChainDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2EdgeChainDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_vertexCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2EdgeChainDef_vertexCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_vertexCount_set" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef_vertexCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->vertexCount = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_vertexCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_vertexCount_get" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); result = (int32) ((arg1)->vertexCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_isALoop_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2EdgeChainDef_isALoop_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_isALoop_set" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef_isALoop_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->isALoop = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_isALoop_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_isALoop_get" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); result = (bool) ((arg1)->isALoop);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef__cleanUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef__cleanUp" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); b2EdgeChainDef__cleanUp(arg1); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef__allocateVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2EdgeChainDef__allocateVertices",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef__allocateVertices" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef__allocateVertices" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); b2EdgeChainDef__allocateVertices(arg1,arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_getVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; b2Vec2 *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2EdgeChainDef_getVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_getVertex" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef_getVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); result = (b2Vec2 *)b2EdgeChainDef_getVertex(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_setVertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; uint16 arg2 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; b2Vec2 temp3 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_setVertex" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef_setVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_setVertex" "', argument " "value"" of type '" "b2Vec2 &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  b2EdgeChainDef_setVertex__SWIG_0(arg1,arg2,*arg3);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_setVertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; uint16 arg2 ; float32 arg3 ; float32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ;
  int ecode4 = 0 ; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeChainDef_setVertex" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2EdgeChainDef_setVertex" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2EdgeChainDef_setVertex" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); ecode4 = SWIG_AsVal_float(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2EdgeChainDef_setVertex" "', argument " "4"" of type '" "float32""'"); }
    arg4 = static_cast< float32 >(val4); b2EdgeChainDef_setVertex__SWIG_1(arg1,arg2,arg3,arg4); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeChainDef_setVertex(PyObject *self, PyObject *args) { int argc; PyObject *argv[5];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2EdgeChainDef_setVertex",0,4,argv))) SWIG_fail; --argc; if (argc == 3) {
    return _wrap_b2EdgeChainDef_setVertex__SWIG_0(self, argc, argv);}  if (argc == 4) {
    return _wrap_b2EdgeChainDef_setVertex__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2EdgeChainDef_setVertex'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2EdgeChainDef::setVertex(uint16,b2Vec2 &)\n"
  "    b2EdgeChainDef::setVertex(uint16,float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_delete_b2EdgeChainDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeChainDef *arg1 = (b2EdgeChainDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeChainDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2EdgeChainDef" "', argument " "1"" of type '" "b2EdgeChainDef *""'");  }
   arg1 = reinterpret_cast< b2EdgeChainDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2EdgeChainDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2EdgeChainDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2EdgeChainDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2EdgeShape_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetLength" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (float32)((b2EdgeShape const *)arg1)->GetLength();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetVertex1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetVertex1" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetVertex1();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetVertex2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetVertex2" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetVertex2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetCoreVertex1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetCoreVertex1" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetCoreVertex1();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetCoreVertex2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetCoreVertex2" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetCoreVertex2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetNormalVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetNormalVector" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetNormalVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetDirectionVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetDirectionVector" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetDirectionVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetCorner1Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetCorner1Vector" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetCorner1Vector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetCorner2Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetCorner2Vector" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2Vec2 *) &((b2EdgeShape const *)arg1)->GetCorner2Vector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_Corner1IsConvex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_Corner1IsConvex" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (bool)((b2EdgeShape const *)arg1)->Corner1IsConvex();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_Corner2IsConvex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_Corner2IsConvex" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (bool)((b2EdgeShape const *)arg1)->Corner2IsConvex();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetFirstVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2XForm *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2EdgeShape_GetFirstVertex",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetFirstVertex" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2EdgeShape_GetFirstVertex" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2EdgeShape_GetFirstVertex" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); result = ((b2EdgeShape const *)arg1)->GetFirstVertex((b2XForm const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_Support(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2XForm *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; PyObject *swig_obj[3] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2EdgeShape_Support",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_Support" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2EdgeShape_Support" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2EdgeShape_Support" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_Support" "', argument " "d"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; } 
  result = ((b2EdgeShape const *)arg1)->Support((b2XForm const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetNextEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2EdgeShape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetNextEdge" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2EdgeShape *)((b2EdgeShape const *)arg1)->GetNextEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2EdgeShape, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_GetPrevEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2EdgeShape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_GetPrevEdge" "', argument " "1"" of type '" "b2EdgeShape const *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); result = (b2EdgeShape *)((b2EdgeShape const *)arg1)->GetPrevEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2EdgeShape, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_SetPrevEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2EdgeShape *arg2 = (b2EdgeShape *) 0 ; b2Vec2 *arg3 = 0 ; b2Vec2 *arg4 = 0 ;
  bool arg5 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; b2Vec2 temp4 ; bool val5 ;
  int ecode5 = 0 ; PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2EdgeShape_SetPrevEdge",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetPrevEdge" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2EdgeShape_SetPrevEdge" "', argument " "2"" of type '" "b2EdgeShape *""'");  }
   arg2 = reinterpret_cast< b2EdgeShape * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetPrevEdge" "', argument " "core"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetPrevEdge" "', argument " "cornerDir"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2EdgeShape_SetPrevEdge" "', argument " "5"" of type '" "bool""'"); }
    arg5 = static_cast< bool >(val5); (arg1)->SetPrevEdge(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4,arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2EdgeShape_SetNextEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; b2EdgeShape *arg2 = (b2EdgeShape *) 0 ; b2Vec2 *arg3 = 0 ; b2Vec2 *arg4 = 0 ;
  bool arg5 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; b2Vec2 temp3 ; b2Vec2 temp4 ; bool val5 ;
  int ecode5 = 0 ; PyObject *swig_obj[5] ; if (!SWIG_Python_UnpackTuple(args,"b2EdgeShape_SetNextEdge",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetNextEdge" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2EdgeShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2EdgeShape_SetNextEdge" "', argument " "2"" of type '" "b2EdgeShape *""'");  }
   arg2 = reinterpret_cast< b2EdgeShape * >(argp2); {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetNextEdge" "', argument " "core"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2EdgeShape_SetNextEdge" "', argument " "cornerDir"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2EdgeShape_SetNextEdge" "', argument " "5"" of type '" "bool""'"); }
    arg5 = static_cast< bool >(val5); (arg1)->SetNextEdge(arg2,(b2Vec2 const &)*arg3,(b2Vec2 const &)*arg4,arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2EdgeShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2EdgeShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2EdgeShape" "', argument " "1"" of type '" "b2EdgeShape *""'");  }
   arg1 = reinterpret_cast< b2EdgeShape * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2EdgeShape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2EdgeShape, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_b2_nullPair_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_nullPair is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_nullPair_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(b2_nullPair)); return pyobj; }
SWIGINTERN int Swig_var_b2_nullProxy_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_nullProxy is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_nullProxy_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(b2_nullProxy)); return pyobj; }
SWIGINTERN int Swig_var_b2_tableCapacity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_tableCapacity is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_tableCapacity_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_tableCapacity)); return pyobj; }
SWIGINTERN int Swig_var_b2_tableMask_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_tableMask is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_tableMask_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_tableMask)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Pair_SetBuffered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_SetBuffered" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); (arg1)->SetBuffered(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_ClearBuffered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_ClearBuffered" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); (arg1)->ClearBuffered(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_IsBuffered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_IsBuffered" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (bool)(arg1)->IsBuffered();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_SetRemoved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_SetRemoved" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); (arg1)->SetRemoved(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_ClearRemoved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_ClearRemoved" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); (arg1)->ClearRemoved(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_IsRemoved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_IsRemoved" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); result = (bool)(arg1)->IsRemoved();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_SetFinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_SetFinal" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); (arg1)->SetFinal(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_IsFinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_IsFinal" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); result = (bool)(arg1)->IsFinal();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyId1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Pair_proxyId1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyId1_set" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_proxyId1_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->proxyId1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyId1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyId1_get" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (uint16) ((arg1)->proxyId1);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyId2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Pair_proxyId2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyId2_set" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_proxyId2_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->proxyId2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_proxyId2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_proxyId2_get" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (uint16) ((arg1)->proxyId2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Pair_next_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_next_set" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_next_set" "', argument " "2"" of type '" "uint16""'"); }  
  arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->next = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_next_get" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); result = (uint16) ((arg1)->next);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_status_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Pair_status_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_status_set" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Pair_status_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->status = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Pair_status_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Pair_status_get" "', argument " "1"" of type '" "b2Pair *""'");  }
   arg1 = reinterpret_cast< b2Pair * >(argp1); result = (uint16) ((arg1)->status);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Pair",0,0,0)) SWIG_fail; result = (b2Pair *)new b2Pair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Pair, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Pair *arg1 = (b2Pair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Pair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Pair" "', argument " "1"" of type '" "b2Pair *""'");  } 
  arg1 = reinterpret_cast< b2Pair * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Pair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Pair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Pair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2BufferedPair_proxyId1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BufferedPair *arg1 = (b2BufferedPair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BufferedPair_proxyId1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BufferedPair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BufferedPair_proxyId1_set" "', argument " "1"" of type '" "b2BufferedPair *""'");  }
   arg1 = reinterpret_cast< b2BufferedPair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BufferedPair_proxyId1_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->proxyId1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BufferedPair_proxyId1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BufferedPair *arg1 = (b2BufferedPair *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BufferedPair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BufferedPair_proxyId1_get" "', argument " "1"" of type '" "b2BufferedPair *""'");  }
   arg1 = reinterpret_cast< b2BufferedPair * >(argp1); result = (uint16) ((arg1)->proxyId1);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BufferedPair_proxyId2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BufferedPair *arg1 = (b2BufferedPair *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  unsigned short val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BufferedPair_proxyId2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BufferedPair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BufferedPair_proxyId2_set" "', argument " "1"" of type '" "b2BufferedPair *""'");  }
   arg1 = reinterpret_cast< b2BufferedPair * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BufferedPair_proxyId2_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->proxyId2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BufferedPair_proxyId2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BufferedPair *arg1 = (b2BufferedPair *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BufferedPair, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BufferedPair_proxyId2_get" "', argument " "1"" of type '" "b2BufferedPair *""'");  }
   arg1 = reinterpret_cast< b2BufferedPair * >(argp1); result = (uint16) ((arg1)->proxyId2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2BufferedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BufferedPair *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2BufferedPair",0,0,0)) SWIG_fail;
  result = (b2BufferedPair *)new b2BufferedPair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BufferedPair, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BufferedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BufferedPair *arg1 = (b2BufferedPair *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BufferedPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BufferedPair" "', argument " "1"" of type '" "b2BufferedPair *""'");  }
   arg1 = reinterpret_cast< b2BufferedPair * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2BufferedPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BufferedPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BufferedPair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2PairCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairCallback *arg1 = (b2PairCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PairCallback" "', argument " "1"" of type '" "b2PairCallback *""'");  }
   arg1 = reinterpret_cast< b2PairCallback * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairCallback_PairAdded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairCallback *arg1 = (b2PairCallback *) 0 ; void *arg2 = (void *) 0 ; void *arg3 = (void *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[3] ; void *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairCallback_PairAdded",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairCallback_PairAdded" "', argument " "1"" of type '" "b2PairCallback *""'");  }
   arg1 = reinterpret_cast< b2PairCallback * >(argp1); { arg2 = swig_obj[1]; Py_INCREF((PyObject*)arg2); }  {
    arg3 = swig_obj[2]; Py_INCREF((PyObject*)arg3); }  result = (void *)(arg1)->PairAdded(arg2,arg3); { if (!result)
    resultobj=Py_None; else resultobj=(PyObject*)result; Py_INCREF(resultobj); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairCallback_PairRemoved(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairCallback *arg1 = (b2PairCallback *) 0 ; void *arg2 = (void *) 0 ; void *arg3 = (void *) 0 ; void *arg4 = (void *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[4] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairCallback_PairRemoved",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairCallback, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairCallback_PairRemoved" "', argument " "1"" of type '" "b2PairCallback *""'");  }
   arg1 = reinterpret_cast< b2PairCallback * >(argp1); { arg2 = swig_obj[1]; Py_INCREF((PyObject*)arg2); }  {
    arg3 = swig_obj[2]; Py_INCREF((PyObject*)arg3); }  { arg4 = swig_obj[3]; Py_INCREF((PyObject*)arg4); } 
  (arg1)->PairRemoved(arg2,arg3,arg4); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2PairCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PairCallback, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2PairManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2PairManager",0,0,0)) SWIG_fail;
  result = (b2PairManager *)new b2PairManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PairManager, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; b2BroadPhase *arg2 = (b2BroadPhase *) 0 ;
  b2PairCallback *arg3 = (b2PairCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_Initialize",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_Initialize" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_Initialize" "', argument " "2"" of type '" "b2BroadPhase *""'");  }
   arg2 = reinterpret_cast< b2BroadPhase * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2PairCallback, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2PairManager_Initialize" "', argument " "3"" of type '" "b2PairCallback *""'");  }
   arg3 = reinterpret_cast< b2PairCallback * >(argp3); (arg1)->Initialize(arg2,arg3); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_AddBufferedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; int32 arg2 ; int32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; int val2 ; int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_AddBufferedPair",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_AddBufferedPair" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PairManager_AddBufferedPair" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PairManager_AddBufferedPair" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); (arg1)->AddBufferedPair(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_RemoveBufferedPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; int32 arg2 ; int32 arg3 ; void *argp1 = 0 ;
  int res1 = 0 ; int val2 ; int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_RemoveBufferedPair",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_RemoveBufferedPair" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PairManager_RemoveBufferedPair" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PairManager_RemoveBufferedPair" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); (arg1)->RemoveBufferedPair(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_Commit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_Commit" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); (arg1)->Commit(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_broadPhase_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; b2BroadPhase *arg2 = (b2BroadPhase *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_broadPhase_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_broadPhase_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BroadPhase, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_broadPhase_set" "', argument " "2"" of type '" "b2BroadPhase *""'");  }
   arg2 = reinterpret_cast< b2BroadPhase * >(argp2); if (arg1) (arg1)->m_broadPhase = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_broadPhase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2BroadPhase *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_broadPhase_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (b2BroadPhase *) ((arg1)->m_broadPhase);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BroadPhase, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_callback_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; b2PairCallback *arg2 = (b2PairCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_callback_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_callback_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PairCallback, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_callback_set" "', argument " "2"" of type '" "b2PairCallback *""'");  }
   arg2 = reinterpret_cast< b2PairCallback * >(argp2); if (arg1) (arg1)->m_callback = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_callback_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PairCallback *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_callback_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (b2PairCallback *) ((arg1)->m_callback);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PairCallback, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; b2Pair *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PairManager_pairs_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairs_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Pair, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_pairs_set" "', argument " "2"" of type '" "b2Pair [b2_maxPairs]""'");  }
    arg2 = reinterpret_cast< b2Pair * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxPairs; ++ii) arg1->m_pairs[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_pairs""' of type '""b2Pair [b2_maxPairs]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Pair *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairs_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (b2Pair *)(b2Pair *) ((arg1)->m_pairs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Pair, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_freePair_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_freePair_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_freePair_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PairManager_freePair_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->m_freePair = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_freePair_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_freePair_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (uint16) ((arg1)->m_freePair);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_pairCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairCount_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PairManager_pairCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_pairCount = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairCount_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (int32) ((arg1)->m_pairCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairBuffer_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; b2BufferedPair *arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_pairBuffer_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairBuffer_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BufferedPair, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_pairBuffer_set" "', argument " "2"" of type '" "b2BufferedPair [b2_maxPairs]""'");  }
    arg2 = reinterpret_cast< b2BufferedPair * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxPairs; ++ii) arg1->m_pairBuffer[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_pairBuffer""' of type '""b2BufferedPair [b2_maxPairs]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairBuffer_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2BufferedPair *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairBuffer_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (b2BufferedPair *)(b2BufferedPair *) ((arg1)->m_pairBuffer);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BufferedPair, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairBufferCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_pairBufferCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairBufferCount_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PairManager_pairBufferCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_pairBufferCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_pairBufferCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_pairBufferCount_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (int32) ((arg1)->m_pairBufferCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_hashTable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; uint16 *arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PairManager_hashTable_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_hashTable_set" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PairManager_hashTable_set" "', argument " "2"" of type '" "uint16 [b2_tableCapacity]""'");  }
    arg2 = reinterpret_cast< uint16 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_tableCapacity; ++ii) arg1->m_hashTable[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_hashTable""' of type '""uint16 [b2_tableCapacity]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PairManager_hashTable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  uint16 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PairManager_hashTable_get" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); result = (uint16 *)(uint16 *) ((arg1)->m_hashTable);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PairManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PairManager *arg1 = (b2PairManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PairManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PairManager" "', argument " "1"" of type '" "b2PairManager *""'");  }
   arg1 = reinterpret_cast< b2PairManager * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PairManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PairManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PairManager_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_invalid_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_invalid is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_invalid_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(b2_invalid)); return pyobj; }
SWIGINTERN int Swig_var_b2_nullEdge_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_nullEdge is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_nullEdge_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(b2_nullEdge)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Bound_IsLower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_IsLower" "', argument " "1"" of type '" "b2Bound const *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); result = (bool)((b2Bound const *)arg1)->IsLower();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_IsUpper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_IsUpper" "', argument " "1"" of type '" "b2Bound const *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); result = (bool)((b2Bound const *)arg1)->IsUpper();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Bound_value_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_value_set" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Bound_value_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->value = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_value_get" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); result = (uint16) ((arg1)->value);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_proxyId_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Bound_proxyId_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_proxyId_set" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Bound_proxyId_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->proxyId = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_proxyId_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_proxyId_get" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); result = (uint16) ((arg1)->proxyId);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_stabbingCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Bound_stabbingCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_stabbingCount_set" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Bound_stabbingCount_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->stabbingCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Bound_stabbingCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Bound_stabbingCount_get" "', argument " "1"" of type '" "b2Bound *""'");  }
   arg1 = reinterpret_cast< b2Bound * >(argp1); result = (uint16) ((arg1)->stabbingCount);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Bound",0,0,0)) SWIG_fail; result = (b2Bound *)new b2Bound();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Bound, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Bound *arg1 = (b2Bound *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Bound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Bound" "', argument " "1"" of type '" "b2Bound *""'");  } 
  arg1 = reinterpret_cast< b2Bound * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Bound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Bound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Bound_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Proxy_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_GetNext" "', argument " "1"" of type '" "b2Proxy const *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (uint16)((b2Proxy const *)arg1)->GetNext();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_SetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Proxy_SetNext",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_SetNext" "', argument " "1"" of type '" "b2Proxy *""'");  } 
  arg1 = reinterpret_cast< b2Proxy * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Proxy_SetNext" "', argument " "2"" of type '" "uint16""'"); }  
  arg2 = static_cast< uint16 >(val2); (arg1)->SetNext(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_IsValid" "', argument " "1"" of type '" "b2Proxy const *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (bool)((b2Proxy const *)arg1)->IsValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_lowerBounds_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; uint16 *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Proxy_lowerBounds_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_lowerBounds_set" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Proxy_lowerBounds_set" "', argument " "2"" of type '" "uint16 [2]""'");  }
    arg2 = reinterpret_cast< uint16 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)2; ++ii) arg1->lowerBounds[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""lowerBounds""' of type '""uint16 [2]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_lowerBounds_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_lowerBounds_get" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (uint16 *)(uint16 *) ((arg1)->lowerBounds);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_upperBounds_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; uint16 *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Proxy_upperBounds_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_upperBounds_set" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Proxy_upperBounds_set" "', argument " "2"" of type '" "uint16 [2]""'");  }
    arg2 = reinterpret_cast< uint16 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)2; ++ii) arg1->upperBounds[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""upperBounds""' of type '""uint16 [2]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_upperBounds_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_upperBounds_get" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (uint16 *)(uint16 *) ((arg1)->upperBounds);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_overlapCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Proxy_overlapCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_overlapCount_set" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Proxy_overlapCount_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->overlapCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_overlapCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_overlapCount_get" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (uint16) ((arg1)->overlapCount);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_timeStamp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Proxy_timeStamp_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_timeStamp_set" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Proxy_timeStamp_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->timeStamp = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Proxy_timeStamp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Proxy_timeStamp_get" "', argument " "1"" of type '" "b2Proxy *""'");  }
   arg1 = reinterpret_cast< b2Proxy * >(argp1); result = (uint16) ((arg1)->timeStamp);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Proxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2Proxy",0,0,0)) SWIG_fail; result = (b2Proxy *)new b2Proxy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Proxy, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Proxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Proxy *arg1 = (b2Proxy *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Proxy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Proxy" "', argument " "1"" of type '" "b2Proxy *""'");  } 
  arg1 = reinterpret_cast< b2Proxy * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Proxy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Proxy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Proxy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2BroadPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = 0 ; b2PairCallback *arg2 = (b2PairCallback *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; b2BroadPhase *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"new_b2BroadPhase",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2BroadPhase" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2BroadPhase" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PairCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_b2BroadPhase" "', argument " "2"" of type '" "b2PairCallback *""'");  }
   arg2 = reinterpret_cast< b2PairCallback * >(argp2); result = (b2BroadPhase *)new b2BroadPhase((b2AABB const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BroadPhase, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BroadPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BroadPhase" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_InRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; bool result; if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_InRange",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_InRange" "', argument " "1"" of type '" "b2BroadPhase const *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_InRange" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_InRange" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); result = (bool)((b2BroadPhase const *)arg1)->InRange((b2AABB const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_CreateProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2AABB *arg2 = 0 ; void *arg3 = (void *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[3] ; uint16 result;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_CreateProxy",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_CreateProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_CreateProxy" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_CreateProxy" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); { arg3 = swig_obj[2]; Py_INCREF((PyObject*)arg3); } 
  result = (uint16)(arg1)->CreateProxy((b2AABB const &)*arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_DestroyProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_DestroyProxy",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_DestroyProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_DestroyProxy" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); (arg1)->DestroyProxy(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_MoveProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; b2AABB *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_MoveProxy",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_MoveProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_MoveProxy" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2BroadPhase_MoveProxy" "', argument " "3"" of type '" "b2AABB const &""'");  }
   if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_MoveProxy" "', argument " "3"" of type '" "b2AABB const &""'"); }
   arg3 = reinterpret_cast< b2AABB * >(argp3); (arg1)->MoveProxy(arg2,(b2AABB const &)*arg3); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_Commit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_Commit" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); (arg1)->Commit(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_GetProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; b2Proxy *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_GetProxy",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_GetProxy" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_GetProxy" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); result = (b2Proxy *)(arg1)->GetProxy(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Proxy, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_Query(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2AABB *arg2 = 0 ; void **arg3 = (void **) 0 ; int32 arg4 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ;
  PyObject *swig_obj[4] ; int32 result; if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_Query",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_Query" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_Query" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_Query" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2BroadPhase_Query" "', argument " "3"" of type '" "void **""'");  }
   arg3 = reinterpret_cast< void ** >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2BroadPhase_Query" "', argument " "4"" of type '" "int32""'"); }
    arg4 = static_cast< int32 >(val4); result = (int32)(arg1)->Query((b2AABB const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_QuerySegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2Segment *arg2 = 0 ; void **arg3 = (void **) 0 ; int32 arg4 ;
  SortKeyFunc arg5 = (SortKeyFunc) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; int val4 ; int ecode4 = 0 ; PyObject *swig_obj[5] ; int32 result;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_QuerySegment",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_QuerySegment" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_QuerySegment" "', argument " "2"" of type '" "b2Segment const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2BroadPhase_QuerySegment" "', argument " "2"" of type '" "b2Segment const &""'"); }
   arg2 = reinterpret_cast< b2Segment * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2BroadPhase_QuerySegment" "', argument " "3"" of type '" "void **""'");  }
   arg3 = reinterpret_cast< void ** >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2BroadPhase_QuerySegment" "', argument " "4"" of type '" "int32""'"); }
    arg4 = static_cast< int32 >(val4); {
    int res = SWIG_ConvertFunctionPtr(swig_obj[4], (void**)(&arg5), SWIGTYPE_p_f_p_void__float); if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "b2BroadPhase_QuerySegment" "', argument " "5"" of type '" "SortKeyFunc""'");  }
     }  result = (int32)(arg1)->QuerySegment((b2Segment const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_Validate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_Validate" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); (arg1)->Validate(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_ValidatePairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_ValidatePairs" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); (arg1)->ValidatePairs(); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_pairManager_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2PairManager *arg2 = (b2PairManager *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_pairManager_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_pairManager_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PairManager, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_pairManager_set" "', argument " "2"" of type '" "b2PairManager *""'");  }
   arg2 = reinterpret_cast< b2PairManager * >(argp2); if (arg1) (arg1)->m_pairManager = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_pairManager_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PairManager *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_pairManager_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (b2PairManager *)& ((arg1)->m_pairManager);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PairManager, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_proxyPool_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2Proxy *arg2 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_proxyPool_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_proxyPool_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Proxy, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_proxyPool_set" "', argument " "2"" of type '" "b2Proxy [b2_maxProxies]""'");  }
    arg2 = reinterpret_cast< b2Proxy * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxProxies; ++ii) arg1->m_proxyPool[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_proxyPool""' of type '""b2Proxy [b2_maxProxies]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_proxyPool_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Proxy *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_proxyPool_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (b2Proxy *)(b2Proxy *) ((arg1)->m_proxyPool);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Proxy, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_freeProxy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_freeProxy_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_freeProxy_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_freeProxy_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->m_freeProxy = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_freeProxy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_freeProxy_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (uint16) ((arg1)->m_freeProxy);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_bounds_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2Bound (*arg2)[2*b2_maxProxies] ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_bounds_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_bounds_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_a_2_b2_maxProxies__b2Bound, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_bounds_set" "', argument " "2"" of type '" "b2Bound [2][2*b2_maxProxies]""'");  }
    arg2 = reinterpret_cast< b2Bound (*)[2*b2_maxProxies] >(argp2); { if (arg2) { size_t ii = 0; for (; ii < (size_t)2; ++ii) {
        if (arg2[ii]) { size_t jj = 0; for (; jj < (size_t)2*b2_maxProxies; ++jj) arg1->m_bounds[ii][jj] = arg2[ii][jj]; }
         else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_bounds""' of type '""b2Bound [2][2*b2_maxProxies]""'"); }
         }  }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_bounds""' of type '""b2Bound [2][2*b2_maxProxies]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_bounds_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Bound (*result)[2*b2_maxProxies] = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_bounds_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1);
  result = (b2Bound (*)[2*b2_maxProxies])(b2Bound (*)[2*b2_maxProxies]) ((arg1)->m_bounds);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_2_b2_maxProxies__b2Bound, 0 |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_queryResults_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; uint16 *arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_queryResults_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_queryResults_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_queryResults_set" "', argument " "2"" of type '" "uint16 [b2_maxProxies]""'");  }
    arg2 = reinterpret_cast< uint16 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxProxies; ++ii) arg1->m_queryResults[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_queryResults""' of type '""uint16 [b2_maxProxies]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_queryResults_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  uint16 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_queryResults_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (uint16 *)(uint16 *) ((arg1)->m_queryResults);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_querySortKeys_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; float32 *arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_querySortKeys_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_querySortKeys_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_querySortKeys_set" "', argument " "2"" of type '" "float32 [b2_maxProxies]""'");  }
    arg2 = reinterpret_cast< float32 * >(argp2); { if (arg2) { size_t ii = 0;
      for (; ii < (size_t)b2_maxProxies; ++ii) arg1->m_querySortKeys[ii] = arg2[ii]; }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_querySortKeys""' of type '""float32 [b2_maxProxies]""'"); }
     }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_querySortKeys_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_querySortKeys_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (float32 *)(float32 *) ((arg1)->m_querySortKeys);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_queryResultCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_queryResultCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_queryResultCount_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_queryResultCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_queryResultCount = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_queryResultCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_queryResultCount_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (int32) ((arg1)->m_queryResultCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_worldAABB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2AABB *arg2 = (b2AABB *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_worldAABB_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_worldAABB_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2AABB, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BroadPhase_worldAABB_set" "', argument " "2"" of type '" "b2AABB *""'");  }
   arg2 = reinterpret_cast< b2AABB * >(argp2); if (arg1) (arg1)->m_worldAABB = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_worldAABB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2AABB *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_worldAABB_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (b2AABB *)& ((arg1)->m_worldAABB);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2AABB, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_quantizationFactor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_quantizationFactor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_quantizationFactor_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_quantizationFactor_set" "', argument " "m_quantizationFactor"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_quantizationFactor = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_quantizationFactor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_quantizationFactor_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (b2Vec2 *)& ((arg1)->m_quantizationFactor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_proxyCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_proxyCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_proxyCount_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_proxyCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_proxyCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_proxyCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_proxyCount_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (int32) ((arg1)->m_proxyCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_timeStamp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; uint16 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned short val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BroadPhase_timeStamp_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_timeStamp_set" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BroadPhase_timeStamp_set" "', argument " "2"" of type '" "uint16""'"); }
    arg2 = static_cast< uint16 >(val2); if (arg1) (arg1)->m_timeStamp = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_timeStamp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BroadPhase *arg1 = (b2BroadPhase *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint16 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BroadPhase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BroadPhase_timeStamp_get" "', argument " "1"" of type '" "b2BroadPhase *""'");  }
   arg1 = reinterpret_cast< b2BroadPhase * >(argp1); result = (uint16) ((arg1)->m_timeStamp);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)); return resultobj; fail: return NULL; }
SWIGINTERN int Swig_var_b2BroadPhase_s_validate_set(PyObject *_val) { { bool val; int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2BroadPhase::s_validate""' of type '""bool""'"); } 
    b2BroadPhase::s_validate = static_cast< bool >(val); }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2BroadPhase_s_validate_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_bool(static_cast< bool >(b2BroadPhase::s_validate)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2BroadPhase_s_validate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_b2BroadPhase_s_validate_get(); }
SWIGINTERN PyObject *_wrap_b2BroadPhase_s_validate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { int res;
  res = Swig_var_b2BroadPhase_s_validate_set(args); return !res ? SWIG_Py_Void() : NULL; }
SWIGINTERN PyObject *b2BroadPhase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BroadPhase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BroadPhase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2DestructionListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DestructionListener" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; Swig::Director *director = 0; bool upcall = false;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DestructionListener::SayGoodbye"); }  else { (arg1)->SayGoodbye(arg2); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; Swig::Director *director = 0; bool upcall = false;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DestructionListener_SayGoodbye" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DestructionListener::SayGoodbye"); }  else { (arg1)->SayGoodbye(arg2); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DestructionListener_SayGoodbye(PyObject *self, PyObject *args) { int argc; PyObject *argv[3];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2DestructionListener_SayGoodbye",0,2,argv))) SWIG_fail; --argc; if (argc == 2) {
    int _v = 0; { void *vptr = 0; int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_b2Joint, 0); _v = SWIG_CheckState(res);} 
    if (!_v) goto check_1; return _wrap_b2DestructionListener_SayGoodbye__SWIG_0(self, argc, argv);}  check_1: if (argc == 2) {
    return _wrap_b2DestructionListener_SayGoodbye__SWIG_1(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2DestructionListener_SayGoodbye'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2DestructionListener::SayGoodbye(b2Joint *)\n"
  "    b2DestructionListener::SayGoodbye(b2Shape *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_new_b2DestructionListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject *swig_obj[1] ; b2DestructionListener *result = 0 ; if (!args) SWIG_fail;
  swig_obj[0] = args; arg1 = swig_obj[0]; if ( arg1 != Py_None ) { 
    result = (b2DestructionListener *)new SwigDirector_b2DestructionListener(arg1);  }  else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DestructionListener, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2DestructionListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DestructionListener *arg1 = (b2DestructionListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2DestructionListener" "', argument " "1"" of type '" "b2DestructionListener *""'");  }
   arg1 = reinterpret_cast< b2DestructionListener * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DestructionListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DestructionListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DestructionListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2BoundaryListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BoundaryListener *arg1 = (b2BoundaryListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BoundaryListener, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BoundaryListener" "', argument " "1"" of type '" "b2BoundaryListener *""'");  }
   arg1 = reinterpret_cast< b2BoundaryListener * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BoundaryListener_Violation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BoundaryListener *arg1 = (b2BoundaryListener *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2BoundaryListener_Violation",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BoundaryListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BoundaryListener_Violation" "', argument " "1"" of type '" "b2BoundaryListener *""'");  }
   arg1 = reinterpret_cast< b2BoundaryListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BoundaryListener_Violation" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2BoundaryListener::Violation"); }  else { (arg1)->Violation(arg2); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2BoundaryListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject *swig_obj[1] ; b2BoundaryListener *result = 0 ; if (!args) SWIG_fail;
  swig_obj[0] = args; arg1 = swig_obj[0]; if ( arg1 != Py_None ) { 
    result = (b2BoundaryListener *)new SwigDirector_b2BoundaryListener(arg1);  }  else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BoundaryListener, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2BoundaryListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BoundaryListener *arg1 = (b2BoundaryListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BoundaryListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2BoundaryListener" "', argument " "1"" of type '" "b2BoundaryListener *""'");  }
   arg1 = reinterpret_cast< b2BoundaryListener * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2BoundaryListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BoundaryListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BoundaryListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2ContactFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactFilter" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFilter_ShouldCollide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ;
  b2Shape *arg3 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; PyObject *swig_obj[3] ; Swig::Director *director = 0; bool upcall = false; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactFilter_ShouldCollide",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2ContactFilter_ShouldCollide" "', argument " "3"" of type '" "b2Shape *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      result = (bool)(arg1)->b2ContactFilter::ShouldCollide(arg2,arg3); }  else {
      result = (bool)(arg1)->ShouldCollide(arg2,arg3); }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactFilter_RayCollide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *arg2 = (void *) 0 ; b2Shape *arg3 = (b2Shape *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject *swig_obj[3] ; Swig::Director *director = 0; bool upcall = false;
  bool result; if (!SWIG_Python_UnpackTuple(args,"b2ContactFilter_RayCollide",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactFilter_RayCollide" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); { arg2 = swig_obj[1]; Py_INCREF((PyObject*)arg2); } 
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2ContactFilter_RayCollide" "', argument " "3"" of type '" "b2Shape *""'");  }
   arg3 = reinterpret_cast< b2Shape * >(argp3); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      result = (bool)(arg1)->b2ContactFilter::RayCollide(arg2,arg3); }  else { result = (bool)(arg1)->RayCollide(arg2,arg3); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject *swig_obj[1] ; b2ContactFilter *result = 0 ; if (!args) SWIG_fail;
  swig_obj[0] = args; arg1 = swig_obj[0]; if ( arg1 != Py_None ) { 
    result = (b2ContactFilter *)new SwigDirector_b2ContactFilter(arg1);  }  else {
    result = (b2ContactFilter *)new b2ContactFilter();  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactFilter, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2ContactFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactFilter *arg1 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactFilter, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2ContactFilter" "', argument " "1"" of type '" "b2ContactFilter *""'");  }
   arg1 = reinterpret_cast< b2ContactFilter * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactFilter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_defaultFilter_set(PyObject *_val) { { void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_b2ContactFilter,  0  | 0); if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2_defaultFilter""' of type '""b2ContactFilter""'"); } 
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2_defaultFilter""' of type '""b2ContactFilter""'"); }
     else { b2ContactFilter * temp; temp  = reinterpret_cast< b2ContactFilter * >(argp); b2_defaultFilter = *temp;
      if (SWIG_IsNewObj(res)) delete temp; }  }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2_defaultFilter_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&b2_defaultFilter), SWIGTYPE_p_b2ContactFilter,  0 ); return pyobj; }
SWIGINTERN PyObject *_wrap_delete_b2ContactListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactListener" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_Add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2ContactPoint *arg2 = (b2ContactPoint *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactListener_Add",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_Add" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_Add" "', argument " "2"" of type '" "b2ContactPoint const *""'");  }
   arg2 = reinterpret_cast< b2ContactPoint * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      (arg1)->b2ContactListener::Add((b2ContactPoint const *)arg2); }  else { (arg1)->Add((b2ContactPoint const *)arg2); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_Persist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2ContactPoint *arg2 = (b2ContactPoint *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactListener_Persist",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_Persist" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_Persist" "', argument " "2"" of type '" "b2ContactPoint const *""'");  }
   arg2 = reinterpret_cast< b2ContactPoint * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      (arg1)->b2ContactListener::Persist((b2ContactPoint const *)arg2); }  else {
      (arg1)->Persist((b2ContactPoint const *)arg2); }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2ContactPoint *arg2 = (b2ContactPoint *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactListener_Remove",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_Remove" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_Remove" "', argument " "2"" of type '" "b2ContactPoint const *""'");  }
   arg2 = reinterpret_cast< b2ContactPoint * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      (arg1)->b2ContactListener::Remove((b2ContactPoint const *)arg2); }  else { (arg1)->Remove((b2ContactPoint const *)arg2); }
     }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactListener_Result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; b2ContactResult *arg2 = (b2ContactResult *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactListener_Result",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactListener_Result" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactListener_Result" "', argument " "2"" of type '" "b2ContactResult const *""'");  }
   arg2 = reinterpret_cast< b2ContactResult * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      (arg1)->b2ContactListener::Result((b2ContactResult const *)arg2); }  else {
      (arg1)->Result((b2ContactResult const *)arg2); }  }  catch (Swig::DirectorException&) { SWIG_fail; } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject *swig_obj[1] ; b2ContactListener *result = 0 ; if (!args) SWIG_fail;
  swig_obj[0] = args; arg1 = swig_obj[0]; if ( arg1 != Py_None ) { 
    result = (b2ContactListener *)new SwigDirector_b2ContactListener(arg1);  }  else {
    result = (b2ContactListener *)new b2ContactListener();  } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactListener, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2ContactListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactListener *arg1 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2ContactListener" "', argument " "1"" of type '" "b2ContactListener *""'");  }
   arg1 = reinterpret_cast< b2ContactListener * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2ContactListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactListener_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2Color__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0; b2Color *result = 0 ; if ((nobjs < 0) || (nobjs > 0)) SWIG_fail; result = (b2Color *)new b2Color();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Color, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Color__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; float32 arg1 ; float32 arg2 ; float32 arg3 ; float val1 ; int ecode1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; b2Color *result = 0 ; if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_b2Color" "', argument " "1"" of type '" "float32""'"); }  
  arg1 = static_cast< float32 >(val1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_b2Color" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2Color" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); result = (b2Color *)new b2Color(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Color, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2Color(PyObject *self, PyObject *args) { int argc; PyObject *argv[4];
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_b2Color",0,3,argv))) SWIG_fail; --argc; if (argc == 0) {
    return _wrap_new_b2Color__SWIG_0(self, argc, argv);}  if (argc == 3) { return _wrap_new_b2Color__SWIG_1(self, argc, argv);} 
  fail: SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_b2Color'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2Color::b2Color()\n" "    b2Color::b2Color(float32,float32,float32)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2Color_r_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Color_r_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_r_set" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_r_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->r = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_r_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_r_get" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); result = (float32) ((arg1)->r);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_g_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Color_g_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_g_set" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_g_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->g = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_g_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_g_get" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); result = (float32) ((arg1)->g);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Color_b_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_b_set" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Color_b_set" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->b = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Color_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Color_b_get" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); result = (float32) ((arg1)->b);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Color(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Color *arg1 = (b2Color *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Color, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Color" "', argument " "1"" of type '" "b2Color *""'");  } 
  arg1 = reinterpret_cast< b2Color * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Color_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Color, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2Color_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2DebugDraw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ; PyObject *swig_obj[1] ; b2DebugDraw *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  arg1 = swig_obj[0]; if ( arg1 != Py_None ) {  result = (b2DebugDraw *)new SwigDirector_b2DebugDraw(arg1);  }  else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor");  SWIG_fail; } 
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DebugDraw, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DebugDraw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DebugDraw" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_SetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_SetFlags",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_SetFlags" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DebugDraw_SetFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); (arg1)->SetFlags(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_GetFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_GetFlags" "', argument " "1"" of type '" "b2DebugDraw const *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); result = (uint32)((b2DebugDraw const *)arg1)->GetFlags();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_AppendFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_AppendFlags",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_AppendFlags" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DebugDraw_AppendFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); (arg1)->AppendFlags(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_ClearFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_ClearFlags",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_ClearFlags" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DebugDraw_ClearFlags" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); (arg1)->ClearFlags(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ; b2Color *arg4 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; PyObject *swig_obj[4] ;
  Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawPolygon",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawPolygon" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawPolygon" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DebugDraw_DrawPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Color,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2DebugDraw_DrawPolygon" "', argument " "4"" of type '" "b2Color const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawPolygon" "', argument " "4"" of type '" "b2Color const &""'"); }
   arg4 = reinterpret_cast< b2Color * >(argp4); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawPolygon"); }  else {
      (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch (Swig::DirectorException&) {
    SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawSolidPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; int32 arg3 ;
  b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; int val3 ; int ecode3 = 0 ; void *argp4 = 0 ;
  int res4 = 0 ; PyObject *swig_obj[4] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawSolidPolygon",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSolidPolygon" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSolidPolygon" "', argument " "vertices"" of type '" "b2Vec2 const *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DebugDraw_DrawSolidPolygon" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Color,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2DebugDraw_DrawSolidPolygon" "', argument " "4"" of type '" "b2Color const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawSolidPolygon" "', argument " "4"" of type '" "b2Color const &""'"); }
   arg4 = reinterpret_cast< b2Color * >(argp4); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawSolidPolygon"); }  else {
      (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4); }  }  catch (Swig::DirectorException&) {
    SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Color *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; PyObject *swig_obj[4] ;
  Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawCircle",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawCircle" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawCircle" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DebugDraw_DrawCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Color,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2DebugDraw_DrawCircle" "', argument " "4"" of type '" "b2Color const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawCircle" "', argument " "4"" of type '" "b2Color const &""'"); }
   arg4 = reinterpret_cast< b2Color * >(argp4); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawCircle"); }  else {
      (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4); }  }  catch (Swig::DirectorException&) {
    SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawSolidCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; b2Vec2 *arg4 = 0 ;
  b2Color *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ; int ecode3 = 0 ; b2Vec2 temp4 ;
  void *argp5 = 0 ; int res5 = 0 ; PyObject *swig_obj[5] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawSolidCircle",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "center"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_b2Color,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "5"" of type '" "b2Color const &""'");  }
   if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawSolidCircle" "', argument " "5"" of type '" "b2Color const &""'"); }
   arg5 = reinterpret_cast< b2Color * >(argp5); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawSolidCircle"); }  else {
      (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawSegment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; b2Color *arg4 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; b2Vec2 temp3 ; void *argp4 = 0 ; int res4 = 0 ; PyObject *swig_obj[4] ;
  Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawSegment",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSegment" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSegment" "', argument " "p1"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawSegment" "', argument " "p2"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_b2Color,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "b2DebugDraw_DrawSegment" "', argument " "4"" of type '" "b2Color const &""'");  }
   if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawSegment" "', argument " "4"" of type '" "b2Color const &""'"); }
   arg4 = reinterpret_cast< b2Color * >(argp4); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawSegment"); }  else {
      (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4); }  }
   catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DebugDraw_DrawXForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; b2XForm *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; Swig::Director *director = 0; bool upcall = false;
  if (!SWIG_Python_UnpackTuple(args,"b2DebugDraw_DrawXForm",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DebugDraw_DrawXForm" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2XForm,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DebugDraw_DrawXForm" "', argument " "2"" of type '" "b2XForm const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DebugDraw_DrawXForm" "', argument " "2"" of type '" "b2XForm const &""'"); }
   arg2 = reinterpret_cast< b2XForm * >(argp2); director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0])); try { if (upcall) {
      Swig::DirectorPureVirtualException::raise("b2DebugDraw::DrawXForm"); }  else { (arg1)->DrawXForm((b2XForm const &)*arg2); }
     }  catch (Swig::DirectorException&) { SWIG_fail; }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_disown_b2DebugDraw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DebugDraw *arg1 = (b2DebugDraw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_b2DebugDraw" "', argument " "1"" of type '" "b2DebugDraw *""'");  }
   arg1 = reinterpret_cast< b2DebugDraw * >(argp1); { Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown(); }  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2DebugDraw_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DebugDraw, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DebugDraw_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_chunkSize_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_chunkSize is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_chunkSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_chunkSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxBlockSize_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxBlockSize is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxBlockSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxBlockSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_blockSizes_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_blockSizes is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_blockSizes_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_blockSizes)); return pyobj; }
SWIGINTERN int Swig_var_b2_chunkArrayIncrement_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_chunkArrayIncrement is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_chunkArrayIncrement_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_chunkArrayIncrement)); return pyobj; }
SWIGINTERN PyObject *_wrap_new_b2BlockAllocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BlockAllocator *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2BlockAllocator",0,0,0)) SWIG_fail;
  result = (b2BlockAllocator *)new b2BlockAllocator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BlockAllocator, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BlockAllocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BlockAllocator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BlockAllocator" "', argument " "1"" of type '" "b2BlockAllocator *""'");  }
   arg1 = reinterpret_cast< b2BlockAllocator * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BlockAllocator_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; void *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2BlockAllocator_Allocate",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BlockAllocator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BlockAllocator_Allocate" "', argument " "1"" of type '" "b2BlockAllocator *""'");  }
   arg1 = reinterpret_cast< b2BlockAllocator * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BlockAllocator_Allocate" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); result = (void *)(arg1)->Allocate(arg2); { if (!result) resultobj=Py_None; else
    resultobj=(PyObject*)result; Py_INCREF(resultobj); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BlockAllocator_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ; void *arg2 = (void *) 0 ; int32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  int val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BlockAllocator_Free",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BlockAllocator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BlockAllocator_Free" "', argument " "1"" of type '" "b2BlockAllocator *""'");  }
   arg1 = reinterpret_cast< b2BlockAllocator * >(argp1); { arg2 = swig_obj[1]; Py_INCREF((PyObject*)arg2); } 
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2BlockAllocator_Free" "', argument " "3"" of type '" "int32""'"); }
    arg3 = static_cast< int32 >(val3); (arg1)->Free(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BlockAllocator_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BlockAllocator *arg1 = (b2BlockAllocator *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BlockAllocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BlockAllocator_Clear" "', argument " "1"" of type '" "b2BlockAllocator *""'");  }
   arg1 = reinterpret_cast< b2BlockAllocator * >(argp1); (arg1)->Clear(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2BlockAllocator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BlockAllocator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BlockAllocator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_stackSize_set(PyObject *) { SWIG_Error(SWIG_AttributeError,"Variable b2_stackSize is read-only.");
  return 1; }
SWIGINTERN PyObject *Swig_var_b2_stackSize_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_stackSize)); return pyobj; }
SWIGINTERN int Swig_var_b2_maxStackEntries_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_maxStackEntries is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_maxStackEntries_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_int(static_cast< int >(b2_maxStackEntries)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2StackEntry_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ; char *arg2 = (char *) 0 ; void *argp1 = 0 ; int res1 = 0 ; int res2 ;
  char *buf2 = 0 ; int alloc2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2StackEntry_data_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_data_set" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2StackEntry_data_set" "', argument " "2"" of type '" "char *""'"); }
   arg2 = reinterpret_cast< char * >(buf2); if (arg1->data) delete[] arg1->data; if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->data = (char *)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size))); }
   else { arg1->data = 0; }  resultobj = SWIG_Py_Void(); if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return resultobj; fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return NULL; }
SWIGINTERN PyObject *_wrap_b2StackEntry_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; char *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_data_get" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); result = (char *) ((arg1)->data);
  resultobj = SWIG_FromCharPtr((const char *)result); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2StackEntry_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2StackEntry_size_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_size_set" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2StackEntry_size_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->size = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2StackEntry_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_size_get" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); result = (int32) ((arg1)->size);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2StackEntry_usedMalloc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2StackEntry *arg1 = (b2StackEntry *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2StackEntry_usedMalloc_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_usedMalloc_set" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2StackEntry_usedMalloc_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->usedMalloc = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2StackEntry_usedMalloc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2StackEntry *arg1 = (b2StackEntry *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackEntry_usedMalloc_get" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); result = (bool) ((arg1)->usedMalloc);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2StackEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2StackEntry",0,0,0)) SWIG_fail;
  result = (b2StackEntry *)new b2StackEntry();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2StackEntry, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2StackEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackEntry *arg1 = (b2StackEntry *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackEntry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2StackEntry" "', argument " "1"" of type '" "b2StackEntry *""'");  }
   arg1 = reinterpret_cast< b2StackEntry * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2StackEntry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2StackEntry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2StackEntry_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2StackAllocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackAllocator *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2StackAllocator",0,0,0)) SWIG_fail;
  result = (b2StackAllocator *)new b2StackAllocator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2StackAllocator, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2StackAllocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackAllocator, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2StackAllocator" "', argument " "1"" of type '" "b2StackAllocator *""'");  }
   arg1 = reinterpret_cast< b2StackAllocator * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2StackAllocator_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; void *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2StackAllocator_Allocate",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackAllocator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackAllocator_Allocate" "', argument " "1"" of type '" "b2StackAllocator *""'");  }
   arg1 = reinterpret_cast< b2StackAllocator * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2StackAllocator_Allocate" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); result = (void *)(arg1)->Allocate(arg2); { if (!result) resultobj=Py_None; else
    resultobj=(PyObject*)result; Py_INCREF(resultobj); }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2StackAllocator_Free(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2StackAllocator *arg1 = (b2StackAllocator *) 0 ; void *arg2 = (void *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2StackAllocator_Free",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackAllocator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackAllocator_Free" "', argument " "1"" of type '" "b2StackAllocator *""'");  }
   arg1 = reinterpret_cast< b2StackAllocator * >(argp1); { arg2 = swig_obj[1]; Py_INCREF((PyObject*)arg2); } 
  (arg1)->Free(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2StackAllocator_GetMaxAllocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2StackAllocator *arg1 = (b2StackAllocator *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2StackAllocator, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2StackAllocator_GetMaxAllocation" "', argument " "1"" of type '" "b2StackAllocator const *""'");  }
   arg1 = reinterpret_cast< b2StackAllocator * >(argp1); result = (int32)((b2StackAllocator const *)arg1)->GetMaxAllocation();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2StackAllocator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2StackAllocator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2StackAllocator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactRegister_createFcn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactCreateFcn *arg2 = (b2ContactCreateFcn *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactRegister_createFcn_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_createFcn_set" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "b2ContactRegister_createFcn_set" "', argument " "2"" of type '" "b2ContactCreateFcn *""'");  }
     }  if (arg1) (arg1)->createFcn = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactRegister_createFcn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ContactCreateFcn *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_createFcn_get" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); result = (b2ContactCreateFcn *) ((arg1)->createFcn);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact);
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactRegister_destroyFcn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ;
  b2ContactDestroyFcn *arg2 = (b2ContactDestroyFcn *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactRegister_destroyFcn_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_destroyFcn_set" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_b2Contact_p_b2BlockAllocator__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "b2ContactRegister_destroyFcn_set" "', argument " "2"" of type '" "b2ContactDestroyFcn *""'");  }
     }  if (arg1) (arg1)->destroyFcn = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactRegister_destroyFcn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ContactDestroyFcn *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_destroyFcn_get" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); result = (b2ContactDestroyFcn *) ((arg1)->destroyFcn);
  resultobj = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_b2Contact_p_b2BlockAllocator__void); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactRegister_primary_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactRegister_primary_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_primary_set" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactRegister_primary_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->primary = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactRegister_primary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactRegister *arg1 = (b2ContactRegister *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactRegister_primary_get" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); result = (bool) ((arg1)->primary);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactRegister *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactRegister",0,0,0)) SWIG_fail;
  result = (b2ContactRegister *)new b2ContactRegister();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactRegister, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactRegister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactRegister *arg1 = (b2ContactRegister *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactRegister, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactRegister" "', argument " "1"" of type '" "b2ContactRegister *""'");  }
   arg1 = reinterpret_cast< b2ContactRegister * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactRegister_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactRegister, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactRegister_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactEdge_other_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ContactEdge_other_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_other_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_other_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->other = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_other_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_other_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2Body *) ((arg1)->other);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_contact_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactEdge_contact_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_contact_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_contact_set" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); if (arg1) (arg1)->contact = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_contact_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Contact *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_contact_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2Contact *) ((arg1)->contact);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactEdge_prev_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_prev_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_prev_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->prev = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_prev_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2ContactEdge *) ((arg1)->prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactEdge_next_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_next_set" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactEdge_next_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->next = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactEdge_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactEdge_next_get" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); result = (b2ContactEdge *) ((arg1)->next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactEdge",0,0,0)) SWIG_fail;
  result = (b2ContactEdge *)new b2ContactEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactEdge *arg1 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactEdge" "', argument " "1"" of type '" "b2ContactEdge *""'");  }
   arg1 = reinterpret_cast< b2ContactEdge * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactEdge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactPoint_shape1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_shape1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_shape1_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactPoint_shape1_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->shape1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_shape1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_shape1_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Shape *) ((arg1)->shape1); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_shape2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_shape2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_shape2_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactPoint_shape2_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->shape2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_shape2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_shape2_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Shape *) ((arg1)->shape2); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_position_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_position_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_velocity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_velocity_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_velocity_set" "', argument " "velocity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_velocity_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_normal_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_normal_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_separation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_separation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_separation_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactPoint_separation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->separation = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_separation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_separation_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (float32) ((arg1)->separation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_friction_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_friction_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactPoint_friction_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->friction = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_friction_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (float32) ((arg1)->friction);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_restitution_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_restitution_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactPoint_restitution_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->restitution = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_restitution_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (float32) ((arg1)->restitution);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; b2ContactID *arg2 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactPoint_id_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_id_set" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactPoint_id_set" "', argument " "2"" of type '" "b2ContactID *""'");  }
   arg2 = reinterpret_cast< b2ContactID * >(argp2); if (arg1) (arg1)->id = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactPoint_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactID *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactPoint_id_get" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); result = (b2ContactID *)& ((arg1)->id);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactPoint",0,0,0)) SWIG_fail;
  result = (b2ContactPoint *)new b2ContactPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactPoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactPoint *arg1 = (b2ContactPoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactPoint" "', argument " "1"" of type '" "b2ContactPoint *""'");  }
   arg1 = reinterpret_cast< b2ContactPoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactPoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ContactResult_shape1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_shape1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_shape1_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactResult_shape1_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->shape1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_shape1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_shape1_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (b2Shape *) ((arg1)->shape1); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_shape2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_shape2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_shape2_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactResult_shape2_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->shape2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_shape2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_shape2_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (b2Shape *) ((arg1)->shape2); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_position_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_position_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_position_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_normal_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_normal_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_normal_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_normalImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_normalImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_normalImpulse_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactResult_normalImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->normalImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_normalImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_normalImpulse_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (float32) ((arg1)->normalImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_tangentImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_tangentImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_tangentImpulse_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactResult_tangentImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->tangentImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_tangentImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_tangentImpulse_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (float32) ((arg1)->tangentImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; b2ContactID *arg2 = (b2ContactID *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactResult_id_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_id_set" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactID, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactResult_id_set" "', argument " "2"" of type '" "b2ContactID *""'");  }
   arg2 = reinterpret_cast< b2ContactID * >(argp2); if (arg1) (arg1)->id = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactResult_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ContactID *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactResult_id_get" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); result = (b2ContactID *)& ((arg1)->id);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactID, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ContactResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactResult",0,0,0)) SWIG_fail;
  result = (b2ContactResult *)new b2ContactResult();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactResult, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactResult *arg1 = (b2ContactResult *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactResult, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactResult" "', argument " "1"" of type '" "b2ContactResult *""'");  }
   arg1 = reinterpret_cast< b2ContactResult * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactResult_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactResult, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactResult_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Contact_GetManifolds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Manifold *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_GetManifolds" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Manifold *)(arg1)->GetManifolds();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Manifold, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_GetManifoldCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_GetManifoldCount" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (int32)((b2Contact const *)arg1)->GetManifoldCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_IsSolid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_IsSolid" "', argument " "1"" of type '" "b2Contact const *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (bool)((b2Contact const *)arg1)->IsSolid();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Contact *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_GetNext" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Contact *)(arg1)->GetNext();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_GetShape1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_GetShape1" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Shape *)(arg1)->GetShape1(); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_GetShape2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_GetShape2" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Shape *)(arg1)->GetShape2(); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_AddType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactCreateFcn *arg1 = (b2ContactCreateFcn *) 0 ; b2ContactDestroyFcn *arg2 = (b2ContactDestroyFcn *) 0 ;
  b2ShapeType arg3 ; b2ShapeType arg4 ; int val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; PyObject *swig_obj[4] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_AddType",4,4,swig_obj)) SWIG_fail; {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "b2Contact_AddType" "', argument " "1"" of type '" "b2ContactCreateFcn *""'");  }
     }  { int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_p_b2Contact_p_b2BlockAllocator__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "b2Contact_AddType" "', argument " "2"" of type '" "b2ContactDestroyFcn *""'");  }
     }  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Contact_AddType" "', argument " "3"" of type '" "b2ShapeType""'"); }
    arg3 = static_cast< b2ShapeType >(val3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2Contact_AddType" "', argument " "4"" of type '" "b2ShapeType""'"); }
    arg4 = static_cast< b2ShapeType >(val4); b2Contact::AddType(arg1,arg2,arg3,arg4); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_InitializeRegisters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; if (!SWIG_Python_UnpackTuple(args,"b2Contact_InitializeRegisters",0,0,0)) SWIG_fail;
  b2Contact::InitializeRegisters(); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_Create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Shape *arg1 = (b2Shape *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; b2BlockAllocator *arg3 = (b2BlockAllocator *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; PyObject *swig_obj[3] ;
  b2Contact *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_Create",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Shape, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_Create" "', argument " "1"" of type '" "b2Shape *""'");  }
   arg1 = reinterpret_cast< b2Shape * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_Create" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2BlockAllocator, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2Contact_Create" "', argument " "3"" of type '" "b2BlockAllocator *""'");  }
   arg3 = reinterpret_cast< b2BlockAllocator * >(argp3); result = (b2Contact *)b2Contact::Create(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2BlockAllocator *arg2 = (b2BlockAllocator *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_Destroy",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_Destroy" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BlockAllocator, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_Destroy" "', argument " "2"" of type '" "b2BlockAllocator *""'");  }
   arg2 = reinterpret_cast< b2BlockAllocator * >(argp2); b2Contact::Destroy(arg1,arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2Contact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Contact" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2ContactListener *arg2 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_Update",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_Update" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_Update" "', argument " "2"" of type '" "b2ContactListener *""'");  }
   arg2 = reinterpret_cast< b2ContactListener * >(argp2); (arg1)->Update(arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_Evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2ContactListener *arg2 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_Evaluate",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_Evaluate" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_Evaluate" "', argument " "2"" of type '" "b2ContactListener *""'");  }
   arg2 = reinterpret_cast< b2ContactListener * >(argp2); (arg1)->Evaluate(arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN int Swig_var_b2Contact_s_registers_set(PyObject *_val) { { b2ContactRegister (*inp)[e_shapeTypeCount] = 0;
    int res = SWIG_ConvertPtr(_val, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_a_e_shapeTypeCount__b2ContactRegister,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2Contact::s_registers""' of type '""b2ContactRegister [e_shapeTypeCount][e_shapeTypeCount]""'"); }
     else if (inp) { size_t ii = 0; for (; ii < (size_t)e_shapeTypeCount; ++ii) { if (inp[ii]) { size_t jj = 0;
          for (; jj < (size_t)e_shapeTypeCount; ++jj) b2Contact::s_registers[ii][jj] = inp[ii][jj]; }  else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2Contact::s_registers""' of type '""b2ContactRegister [e_shapeTypeCount][e_shapeTypeCount]""'"); }
         }  }  else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""b2Contact::s_registers""' of type '""b2ContactRegister [e_shapeTypeCount][e_shapeTypeCount]""'"); }
     }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2Contact_s_registers_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(b2Contact::s_registers), SWIGTYPE_p_a_e_shapeTypeCount__b2ContactRegister,  0 );
  return pyobj; }
SWIGINTERN PyObject *_wrap_b2Contact_s_registers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_b2Contact_s_registers_get(); }
SWIGINTERN PyObject *_wrap_b2Contact_s_registers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { int res;
  res = Swig_var_b2Contact_s_registers_set(args); return !res ? SWIG_Py_Void() : NULL; }
SWIGINTERN int Swig_var_b2Contact_s_initialized_set(PyObject *_val) { { bool val; int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""b2Contact::s_initialized""' of type '""bool""'"); } 
    b2Contact::s_initialized = static_cast< bool >(val); }  return 0; fail: return 1; }
SWIGINTERN PyObject *Swig_var_b2Contact_s_initialized_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_bool(static_cast< bool >(b2Contact::s_initialized)); return pyobj; }
SWIGINTERN PyObject *_wrap_b2Contact_s_initialized_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_b2Contact_s_initialized_get(); }
SWIGINTERN PyObject *_wrap_b2Contact_s_initialized_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { int res;
  res = Swig_var_b2Contact_s_initialized_set(args); return !res ? SWIG_Py_Void() : NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_flags_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; uint32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; unsigned int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_flags_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_flags_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact_flags_set" "', argument " "2"" of type '" "uint32""'"); }
    arg2 = static_cast< uint32 >(val2); if (arg1) (arg1)->m_flags = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_flags_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; uint32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_flags_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (uint32) ((arg1)->m_flags);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_manifoldCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_manifoldCount_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_manifoldCount_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact_manifoldCount_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->m_manifoldCount = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_manifoldCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_manifoldCount_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (int32) ((arg1)->m_manifoldCount);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_prev_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_prev_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_prev_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_prev_set" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); if (arg1) (arg1)->m_prev = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_prev_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Contact *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_prev_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Contact *) ((arg1)->m_prev);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_next_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_next_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_next_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_next_set" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); if (arg1) (arg1)->m_next = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_next_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Contact *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_next_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Contact *) ((arg1)->m_next);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Contact, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_node1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_node1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_node1_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_node1_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->m_node1 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_node1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ContactEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_node1_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2ContactEdge *)& ((arg1)->m_node1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_node2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2ContactEdge *arg2 = (b2ContactEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Contact_node2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_node2_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactEdge, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_node2_set" "', argument " "2"" of type '" "b2ContactEdge *""'");  }
   arg2 = reinterpret_cast< b2ContactEdge * >(argp2); if (arg1) (arg1)->m_node2 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_node2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ContactEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_node2_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2ContactEdge *)& ((arg1)->m_node2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_shape1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_shape1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_shape1_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_shape1_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->m_shape1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_shape1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_shape1_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Shape *) ((arg1)->m_shape1); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_shape2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_shape2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_shape2_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Contact_shape2_set" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); if (arg1) (arg1)->m_shape2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_shape2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_shape2_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (b2Shape *) ((arg1)->m_shape2); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_toi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Contact_toi_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_toi_set" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Contact_toi_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_toi = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Contact_toi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Contact *arg1 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Contact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Contact_toi_get" "', argument " "1"" of type '" "b2Contact *""'");  }
   arg1 = reinterpret_cast< b2Contact * >(argp1); result = (float32) ((arg1)->m_toi);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Contact_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Contact, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2NullContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2NullContact *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2NullContact",0,0,0)) SWIG_fail;
  result = (b2NullContact *)new b2NullContact();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2NullContact, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2NullContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2NullContact *arg1 = (b2NullContact *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2NullContact, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2NullContact" "', argument " "1"" of type '" "b2NullContact *""'");  }
   arg1 = reinterpret_cast< b2NullContact * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2NullContact_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2NullContact, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2NullContact_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2ContactManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ContactManager",0,0,0)) SWIG_fail;
  result = (b2ContactManager *)new b2ContactManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ContactManager, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_Destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2Contact *arg2 = (b2Contact *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactManager_Destroy",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_Destroy" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Contact, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_Destroy" "', argument " "2"" of type '" "b2Contact *""'");  }
   arg2 = reinterpret_cast< b2Contact * >(argp2); (arg1)->Destroy(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_Collide(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_Collide" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); (arg1)->Collide(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_world_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2World *arg2 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactManager_world_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_world_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2World, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_world_set" "', argument " "2"" of type '" "b2World *""'");  }
   arg2 = reinterpret_cast< b2World * >(argp2); if (arg1) (arg1)->m_world = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_world_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2World *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_world_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2World *) ((arg1)->m_world);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_nullContact_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactManager *arg1 = (b2ContactManager *) 0 ; b2NullContact *arg2 = (b2NullContact *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactManager_nullContact_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_nullContact_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2NullContact, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ContactManager_nullContact_set" "', argument " "2"" of type '" "b2NullContact *""'");  }
   arg2 = reinterpret_cast< b2NullContact * >(argp2); if (arg1) (arg1)->m_nullContact = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_nullContact_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2NullContact *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_nullContact_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (b2NullContact *)& ((arg1)->m_nullContact);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2NullContact, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_destroyImmediate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactManager *arg1 = (b2ContactManager *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ContactManager_destroyImmediate_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_destroyImmediate_set" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2ContactManager_destroyImmediate_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_destroyImmediate = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ContactManager_destroyImmediate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ContactManager_destroyImmediate_get" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); result = (bool) ((arg1)->m_destroyImmediate);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ContactManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ContactManager *arg1 = (b2ContactManager *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ContactManager, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ContactManager" "', argument " "1"" of type '" "b2ContactManager *""'");  }
   arg1 = reinterpret_cast< b2ContactManager * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ContactManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ContactManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ContactManager_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2TimeStep_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_dt_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_dt_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_dt_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dt = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_dt_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (float32) ((arg1)->dt);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_inv_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_inv_dt_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_inv_dt_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_inv_dt_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->inv_dt = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_inv_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_inv_dt_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (float32) ((arg1)->inv_dt);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_dtRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_dtRatio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_dtRatio_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_dtRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dtRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_dtRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_dtRatio_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (float32) ((arg1)->dtRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_velocityIterations_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_velocityIterations_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_velocityIterations_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_velocityIterations_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->velocityIterations = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_velocityIterations_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_velocityIterations_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (int32) ((arg1)->velocityIterations);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_positionIterations_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; int32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_positionIterations_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_positionIterations_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_positionIterations_set" "', argument " "2"" of type '" "int32""'"); }
    arg2 = static_cast< int32 >(val2); if (arg1) (arg1)->positionIterations = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_positionIterations_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  int32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_positionIterations_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (int32) ((arg1)->positionIterations);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_warmStarting_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TimeStep_warmStarting_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_warmStarting_set" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TimeStep_warmStarting_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->warmStarting = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TimeStep_warmStarting_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TimeStep_warmStarting_get" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); result = (bool) ((arg1)->warmStarting);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2TimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2TimeStep",0,0,0)) SWIG_fail;
  result = (b2TimeStep *)new b2TimeStep();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TimeStep, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2TimeStep *arg1 = (b2TimeStep *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TimeStep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TimeStep" "', argument " "1"" of type '" "b2TimeStep *""'");  }
   arg1 = reinterpret_cast< b2TimeStep * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2TimeStep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TimeStep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2TimeStep_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2World(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2AABB *arg1 = 0 ; b2Vec2 *arg2 = 0 ; bool arg3 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; bool val3 ; int ecode3 = 0 ;
  PyObject *swig_obj[3] ; b2World *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2World",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_b2AABB,  0  | 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2World" "', argument " "1"" of type '" "b2AABB const &""'");  }
   if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_b2World" "', argument " "1"" of type '" "b2AABB const &""'"); }
   arg1 = reinterpret_cast< b2AABB * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2World" "', argument " "gravity"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_b2World" "', argument " "3"" of type '" "bool""'"); }  
  arg3 = static_cast< bool >(val3); result = (b2World *)new b2World((b2AABB const &)*arg1,(b2Vec2 const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2World(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2World" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetDestructionListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2DestructionListener *arg2 = (b2DestructionListener *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetDestructionListener",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetDestructionListener" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DestructionListener, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_SetDestructionListener" "', argument " "2"" of type '" "b2DestructionListener *""'");  }
   arg2 = reinterpret_cast< b2DestructionListener * >(argp2); (arg1)->SetDestructionListener(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetBoundaryListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2BoundaryListener *arg2 = (b2BoundaryListener *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetBoundaryListener",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetBoundaryListener" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BoundaryListener, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_SetBoundaryListener" "', argument " "2"" of type '" "b2BoundaryListener *""'");  }
   arg2 = reinterpret_cast< b2BoundaryListener * >(argp2); (arg1)->SetBoundaryListener(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetContactFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2ContactFilter *arg2 = (b2ContactFilter *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetContactFilter",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetContactFilter" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactFilter, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_SetContactFilter" "', argument " "2"" of type '" "b2ContactFilter *""'");  }
   arg2 = reinterpret_cast< b2ContactFilter * >(argp2); (arg1)->SetContactFilter(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetContactListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2ContactListener *arg2 = (b2ContactListener *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetContactListener",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetContactListener" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ContactListener, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_SetContactListener" "', argument " "2"" of type '" "b2ContactListener *""'");  }
   arg2 = reinterpret_cast< b2ContactListener * >(argp2); (arg1)->SetContactListener(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetDebugDraw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2DebugDraw *arg2 = (b2DebugDraw *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_SetDebugDraw",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetDebugDraw" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DebugDraw, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_SetDebugDraw" "', argument " "2"" of type '" "b2DebugDraw *""'");  }
   arg2 = reinterpret_cast< b2DebugDraw * >(argp2); (arg1)->SetDebugDraw(arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_CreateController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2ControllerDef *arg2 = (b2ControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ; b2Controller *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_CreateController",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_CreateController" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ControllerDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_CreateController" "', argument " "2"" of type '" "b2ControllerDef *""'");  }
   arg2 = reinterpret_cast< b2ControllerDef * >(argp2); result = (b2Controller *)(arg1)->CreateController(arg2); { if (result) {
      switch ((result)->GetType()) { case e_buoyancyController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2BuoyancyController, 0); break; case e_constantAccelController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantAccelController, 0); break; case e_constantForceController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantForceController, 0); break; case e_gravityController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GravityController, 0); break; case e_tensorDampingController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2TensorDampingController, 0); break; case e_unknownController: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Controller, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DestroyController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Controller *arg2 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_DestroyController",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DestroyController" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Controller, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_DestroyController" "', argument " "2"" of type '" "b2Controller *""'");  }
   arg2 = reinterpret_cast< b2Controller * >(argp2); (arg1)->DestroyController(arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetGroundBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetGroundBody" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (b2Body *)(arg1)->GetGroundBody();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; float32 arg2 ; int32 arg3 ; int32 arg4 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; int val3 ; int ecode3 = 0 ; int val4 ; int ecode4 = 0 ; PyObject *swig_obj[4] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_Step",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Step" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World_Step" "', argument " "2"" of type '" "float32""'"); }  
  arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2World_Step" "', argument " "3"" of type '" "int32""'"); }  
  arg3 = static_cast< int32 >(val3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2World_Step" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); { try { (arg1)->Step(arg2,arg3,arg4); }  catch (Swig::DirectorException) { SWIG_fail; }  } 
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Query__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2AABB *arg2 = 0 ; b2Shape **arg3 = (b2Shape **) 0 ; int32 arg4 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int val4 ; int ecode4 = 0 ;
  int32 result; if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Query" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_Query" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_Query" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2World_Query" "', argument " "3"" of type '" "b2Shape **""'");  } 
  arg3 = reinterpret_cast< b2Shape ** >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2World_Query" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); result = (int32)(arg1)->Query((b2AABB const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Raycast__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2Segment *arg2 = 0 ; b2Shape **arg3 = (b2Shape **) 0 ; int32 arg4 ;
  bool arg5 ; void *arg6 = (void *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ; int val4 ; int ecode4 = 0 ; bool val5 ; int ecode5 = 0 ; int32 result;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Raycast" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_Raycast" "', argument " "2"" of type '" "b2Segment const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_Raycast" "', argument " "2"" of type '" "b2Segment const &""'"); }
   arg2 = reinterpret_cast< b2Segment * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2World_Raycast" "', argument " "3"" of type '" "b2Shape **""'");  }
   arg3 = reinterpret_cast< b2Shape ** >(argp3); ecode4 = SWIG_AsVal_int(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2World_Raycast" "', argument " "4"" of type '" "int32""'"); }  
  arg4 = static_cast< int32 >(val4); ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2World_Raycast" "', argument " "5"" of type '" "bool""'"); }  
  arg5 = static_cast< bool >(val5); { arg6 = swig_obj[5]; Py_INCREF((PyObject*)arg6); } 
  result = (int32)(arg1)->Raycast((b2Segment const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_RaycastOne__SWIG_0(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2Segment *arg2 = 0 ; float32 *arg3 = (float32 *) 0 ;
  b2Vec2 *arg4 = (b2Vec2 *) 0 ; bool arg5 ; void *arg6 = (void *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; bool val5 ; int ecode5 = 0 ; b2Shape *result = 0 ;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RaycastOne" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_RaycastOne" "', argument " "2"" of type '" "b2Segment const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_RaycastOne" "', argument " "2"" of type '" "b2Segment const &""'"); }
   arg2 = reinterpret_cast< b2Segment * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2World_RaycastOne" "', argument " "3"" of type '" "float32 *""'");  }
   arg3 = reinterpret_cast< float32 * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3]==Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RaycastOne" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "b2World_RaycastOne" "', argument " "5"" of type '" "bool""'"); }  
  arg5 = static_cast< bool >(val5); { arg6 = swig_obj[5]; Py_INCREF((PyObject*)arg6); } 
  result = (b2Shape *)(arg1)->RaycastOne((b2Segment const &)*arg2,arg3,arg4,arg5,arg6); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_InRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2AABB *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  PyObject *swig_obj[2] ; bool result; if (!SWIG_Python_UnpackTuple(args,"b2World_InRange",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_InRange" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_InRange" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_InRange" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); result = (bool)((b2World const *)arg1)->InRange((b2AABB const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World__GetBodyList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World__GetBodyList" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (b2Body *)(arg1)->GetBodyList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World__GetJointList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World__GetJointList" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (b2Joint *)(arg1)->GetJointList(); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World__GetControllerList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Controller *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World__GetControllerList" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (b2Controller *)(arg1)->GetControllerList(); { if (result) {
      switch ((result)->GetType()) { case e_buoyancyController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2BuoyancyController, 0); break; case e_constantAccelController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantAccelController, 0); break; case e_constantForceController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantForceController, 0); break; case e_gravityController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GravityController, 0); break; case e_tensorDampingController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2TensorDampingController, 0); break; case e_unknownController: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Controller, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Refilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_Refilter",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Refilter" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_Refilter" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); (arg1)->Refilter(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetWarmStarting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_SetWarmStarting",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetWarmStarting" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World_SetWarmStarting" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->SetWarmStarting(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetContinuousPhysics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetContinuousPhysics",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetContinuousPhysics" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2World_SetContinuousPhysics" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->SetContinuousPhysics(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Validate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Validate" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); (arg1)->Validate(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetProxyCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetProxyCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetProxyCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetPairCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetPairCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetPairCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetBodyCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetBodyCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetBodyCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetJointCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetJointCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetJointCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetContactCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetContactCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetContactCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetControllerCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; int32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetControllerCount" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (int32)((b2World const *)arg1)->GetControllerCount();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_SetGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_SetGravity",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetGravity" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_SetGravity" "', argument " "gravity"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  (arg1)->SetGravity((b2Vec2 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetGravity" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = ((b2World const *)arg1)->GetGravity();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_GetWorldAABB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2AABB result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_GetWorldAABB" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = ((b2World const *)arg1)->GetWorldAABB();
  resultobj = SWIG_NewPointerObj((new b2AABB(static_cast< const b2AABB& >(result))), SWIGTYPE_p_b2AABB, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_CanSleep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_CanSleep" "', argument " "1"" of type '" "b2World const *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); result = (bool)((b2World const *)arg1)->CanSleep();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_CreateBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2BodyDef *arg2 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; b2Body *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_CreateBody",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_CreateBody" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_CreateBody" "', argument " "2"" of type '" "b2BodyDef *""'");  }
   arg2 = reinterpret_cast< b2BodyDef * >(argp2); result = (b2Body *)b2World_CreateBody(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_CreateJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2JointDef *arg2 = (b2JointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; b2Joint *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2World_CreateJoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_CreateJoint" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2JointDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_CreateJoint" "', argument " "2"" of type '" "b2JointDef *""'");  }
   arg2 = reinterpret_cast< b2JointDef * >(argp2); result = (b2Joint *)b2World_CreateJoint(arg1,arg2); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DestroyBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_DestroyBody",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DestroyBody" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_DestroyBody" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); b2World_DestroyBody(arg1,arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_DestroyJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2World *arg1 = (b2World *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2World_DestroyJoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_DestroyJoint" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_DestroyJoint" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); b2World_DestroyJoint(arg1,arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Raycast__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2Segment *arg2 = 0 ; int32 arg3 ; bool arg4 ;
  PyObject *arg5 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; int val3 ;
  int ecode3 = 0 ; bool val4 ; int ecode4 = 0 ; PyObject *result = 0 ; if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Raycast" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_Raycast" "', argument " "2"" of type '" "b2Segment const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_Raycast" "', argument " "2"" of type '" "b2Segment const &""'"); }
   arg2 = reinterpret_cast< b2Segment * >(argp2); ecode3 = SWIG_AsVal_int(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2World_Raycast" "', argument " "3"" of type '" "int32""'"); }  
  arg3 = static_cast< int32 >(val3); ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "b2World_Raycast" "', argument " "4"" of type '" "bool""'"); }  
  arg4 = static_cast< bool >(val4); arg5 = swig_obj[4];
  result = (PyObject *)b2World_Raycast__SWIG_1(arg1,(b2Segment const &)*arg2,arg3,arg4,arg5); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Raycast(PyObject *self, PyObject *args) { int argc; PyObject *argv[7];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2World_Raycast",0,6,argv))) SWIG_fail; --argc; if (argc == 5) {
    return _wrap_b2World_Raycast__SWIG_1(self, argc, argv);}  if (argc == 6) {
    return _wrap_b2World_Raycast__SWIG_0(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2World_Raycast'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::Raycast(b2Segment const &,b2Shape **,int32,bool,void *)\n"
  "    b2World::Raycast(b2Segment const &,int32,bool,PyObject *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2World_RaycastOne__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2Segment *arg2 = 0 ; bool arg3 ; PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; bool val3 ; int ecode3 = 0 ; PyObject *result = 0 ;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_RaycastOne" "', argument " "1"" of type '" "b2World *""'");  }
   arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2Segment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_RaycastOne" "', argument " "2"" of type '" "b2Segment const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_RaycastOne" "', argument " "2"" of type '" "b2Segment const &""'"); }
   arg2 = reinterpret_cast< b2Segment * >(argp2); ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2World_RaycastOne" "', argument " "3"" of type '" "bool""'"); }  
  arg3 = static_cast< bool >(val3); arg4 = swig_obj[3];
  result = (PyObject *)b2World_RaycastOne__SWIG_1(arg1,(b2Segment const &)*arg2,arg3,arg4); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_RaycastOne(PyObject *self, PyObject *args) { int argc; PyObject *argv[7];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2World_RaycastOne",0,6,argv))) SWIG_fail; --argc; if (argc == 4) {
    return _wrap_b2World_RaycastOne__SWIG_1(self, argc, argv);}  if (argc == 6) {
    return _wrap_b2World_RaycastOne__SWIG_0(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2World_RaycastOne'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::RaycastOne(b2Segment const &,float32 *,b2Vec2 *,bool,void *)\n"
  "    b2World::RaycastOne(b2Segment const &,bool,PyObject *)\n"); return 0; }
SWIGINTERN PyObject *_wrap_b2World_Query__SWIG_1(PyObject *SWIGUNUSEDPARM(self), int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0; b2World *arg1 = (b2World *) 0 ; b2AABB *arg2 = 0 ; uint32 arg3 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; unsigned int val3 ; int ecode3 = 0 ; PyObject *result = 0 ;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2World, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2World_Query" "', argument " "1"" of type '" "b2World *""'");  } 
  arg1 = reinterpret_cast< b2World * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2AABB,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2World_Query" "', argument " "2"" of type '" "b2AABB const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2World_Query" "', argument " "2"" of type '" "b2AABB const &""'"); }
   arg2 = reinterpret_cast< b2AABB * >(argp2); ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2World_Query" "', argument " "3"" of type '" "uint32""'"); }  
  arg3 = static_cast< uint32 >(val3); result = (PyObject *)b2World_Query__SWIG_1(arg1,(b2AABB const &)*arg2,arg3);
  resultobj = result; return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2World_Query(PyObject *self, PyObject *args) { int argc; PyObject *argv[5];
  if (!(argc = SWIG_Python_UnpackTuple(args,"b2World_Query",0,4,argv))) SWIG_fail; --argc; if (argc == 3) {
    return _wrap_b2World_Query__SWIG_1(self, argc, argv);}  if (argc == 4) {
    return _wrap_b2World_Query__SWIG_0(self, argc, argv);}  fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'b2World_Query'.\n"
  "  Possible C/C++ prototypes are:\n" "    b2World::Query(b2AABB const &,b2Shape **,int32)\n"
  "    b2World::Query(b2AABB const &,uint32)\n"); return 0; }
SWIGINTERN PyObject *b2World_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2World, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2World_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ControllerEdge_controller_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2Controller *arg2 = (b2Controller *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_controller_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_controller_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Controller, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_controller_set" "', argument " "2"" of type '" "b2Controller *""'");  }
   arg2 = reinterpret_cast< b2Controller * >(argp2); if (arg1) (arg1)->controller = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_controller_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Controller *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_controller_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2Controller *) ((arg1)->controller); { if (result) {
      switch ((result)->GetType()) { case e_buoyancyController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2BuoyancyController, 0); break; case e_constantAccelController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantAccelController, 0); break; case e_constantForceController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantForceController, 0); break; case e_gravityController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GravityController, 0); break; case e_tensorDampingController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2TensorDampingController, 0); break; case e_unknownController: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Controller, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_body_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_body_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_body_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->body = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Body *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_body_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2Body *) ((arg1)->body);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_prevBody_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2ControllerEdge *arg2 = (b2ControllerEdge *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_prevBody_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_prevBody_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_prevBody_set" "', argument " "2"" of type '" "b2ControllerEdge *""'");  }
   arg2 = reinterpret_cast< b2ControllerEdge * >(argp2); if (arg1) (arg1)->prevBody = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_prevBody_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ControllerEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_prevBody_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2ControllerEdge *) ((arg1)->prevBody);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_nextBody_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2ControllerEdge *arg2 = (b2ControllerEdge *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_nextBody_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_nextBody_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_nextBody_set" "', argument " "2"" of type '" "b2ControllerEdge *""'");  }
   arg2 = reinterpret_cast< b2ControllerEdge * >(argp2); if (arg1) (arg1)->nextBody = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_nextBody_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ControllerEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_nextBody_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2ControllerEdge *) ((arg1)->nextBody);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_prevController_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2ControllerEdge *arg2 = (b2ControllerEdge *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_prevController_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_prevController_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_prevController_set" "', argument " "2"" of type '" "b2ControllerEdge *""'");  }
   arg2 = reinterpret_cast< b2ControllerEdge * >(argp2); if (arg1) (arg1)->prevController = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_prevController_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ControllerEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_prevController_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2ControllerEdge *) ((arg1)->prevController);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_nextController_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; b2ControllerEdge *arg2 = (b2ControllerEdge *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ControllerEdge_nextController_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_nextController_set" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2ControllerEdge_nextController_set" "', argument " "2"" of type '" "b2ControllerEdge *""'");  }
   arg2 = reinterpret_cast< b2ControllerEdge * >(argp2); if (arg1) (arg1)->nextController = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ControllerEdge_nextController_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2ControllerEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ControllerEdge_nextController_get" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); result = (b2ControllerEdge *) ((arg1)->nextController);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ControllerEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ControllerEdge *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2ControllerEdge",0,0,0)) SWIG_fail;
  result = (b2ControllerEdge *)new b2ControllerEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ControllerEdge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ControllerEdge *arg1 = (b2ControllerEdge *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerEdge, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ControllerEdge" "', argument " "1"" of type '" "b2ControllerEdge *""'");  }
   arg1 = reinterpret_cast< b2ControllerEdge * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ControllerEdge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ControllerEdge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ControllerEdge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_b2Controller(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2Controller" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_Step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Controller_Step",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_Step" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Controller_Step" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2Controller_Step" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->Step((b2TimeStep const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; b2DebugDraw *arg2 = (b2DebugDraw *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Controller_Draw",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_Draw" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2DebugDraw, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Controller_Draw" "', argument " "2"" of type '" "b2DebugDraw *""'");  }
   arg2 = reinterpret_cast< b2DebugDraw * >(argp2); (arg1)->Draw(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_AddBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Controller_AddBody",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_AddBody" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Controller_AddBody" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); (arg1)->AddBody(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_RemoveBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Controller_RemoveBody",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_RemoveBody" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Controller_RemoveBody" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); (arg1)->RemoveBody(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_Clear" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); (arg1)->Clear(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ControllerType result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_GetType" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2ControllerType)(arg1)->GetType();
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Controller *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_GetNext" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2Controller *)(arg1)->GetNext(); { if (result) {
      switch ((result)->GetType()) { case e_buoyancyController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2BuoyancyController, 0); break; case e_constantAccelController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantAccelController, 0); break; case e_constantForceController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2ConstantForceController, 0); break; case e_gravityController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GravityController, 0); break; case e_tensorDampingController:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2TensorDampingController, 0); break; case e_unknownController: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Controller, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller_GetWorld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2World *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller_GetWorld" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2World *)(arg1)->GetWorld();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__GetBodyList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ControllerEdge *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__GetBodyList" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2ControllerEdge *)(arg1)->GetBodyList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller___hash__" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (long)b2Controller___hash__(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__asBuoyancyController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2BuoyancyController *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__asBuoyancyController" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2BuoyancyController *)b2Controller__asBuoyancyController(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__asConstantAccelController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ConstantAccelController *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__asConstantAccelController" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  result = (b2ConstantAccelController *)b2Controller__asConstantAccelController(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ConstantAccelController, 0 |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__asConstantForceController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2ConstantForceController *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__asConstantForceController" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  result = (b2ConstantForceController *)b2Controller__asConstantForceController(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ConstantForceController, 0 |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__asGravityController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2GravityController *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__asGravityController" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1); result = (b2GravityController *)b2Controller__asGravityController(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GravityController, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Controller__asTensorDampingController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Controller *arg1 = (b2Controller *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2TensorDampingController *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Controller, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Controller__asTensorDampingController" "', argument " "1"" of type '" "b2Controller *""'");  }
   arg1 = reinterpret_cast< b2Controller * >(argp1);
  result = (b2TensorDampingController *)b2Controller__asTensorDampingController(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TensorDampingController, 0 |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2Controller_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Controller, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_b2ControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2ControllerDef *arg1 = (b2ControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ControllerDef" "', argument " "1"" of type '" "b2ControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2ControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_b2BodyDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2BodyDef",0,0,0)) SWIG_fail;
  result = (b2BodyDef *)new b2BodyDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BodyDef, SWIG_POINTER_NEW |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_massData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_massData_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_massData_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2BodyDef_massData_set" "', argument " "2"" of type '" "b2MassData *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); if (arg1) (arg1)->massData = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_massData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2MassData *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_massData_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (b2MassData *)& ((arg1)->massData);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MassData, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_position_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_set" "', argument " "position"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->position = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_position_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (b2Vec2 *)& ((arg1)->position);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_angle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angle_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_angle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angle = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angle_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->angle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearDamping_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_linearDamping_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearDamping_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_linearDamping_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->linearDamping = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_linearDamping_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_linearDamping_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->linearDamping);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularDamping_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_angularDamping_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularDamping_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_angularDamping_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularDamping = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_angularDamping_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_angularDamping_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (float32) ((arg1)->angularDamping);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_allowSleep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_allowSleep_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_allowSleep_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_allowSleep_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->allowSleep = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_allowSleep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_allowSleep_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->allowSleep);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_isSleeping_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_isSleeping_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_isSleeping_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_isSleeping_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->isSleeping = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_isSleeping_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_isSleeping_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->isSleeping);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_fixedRotation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_fixedRotation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_fixedRotation_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_fixedRotation_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->fixedRotation = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_fixedRotation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_fixedRotation_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->fixedRotation);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_isBullet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_isBullet_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_isBullet_set" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BodyDef_isBullet_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->isBullet = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_isBullet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_isBullet_get" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (bool) ((arg1)->isBullet);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_GetUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); result = (PyObject *)b2BodyDef_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BodyDef_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_SetUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); arg2 = swig_obj[1]; b2BodyDef_SetUserData(arg1,arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BodyDef_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BodyDef_ClearUserData" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); b2BodyDef_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BodyDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BodyDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BodyDef" "', argument " "1"" of type '" "b2BodyDef *""'");  }
   arg1 = reinterpret_cast< b2BodyDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2BodyDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BodyDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BodyDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2Body_SetMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2MassData *arg2 = (b2MassData *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetMass",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetMass" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2MassData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body_SetMass" "', argument " "2"" of type '" "b2MassData const *""'");  }
   arg2 = reinterpret_cast< b2MassData * >(argp2); (arg1)->SetMass((b2MassData const *)arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetMassFromShapes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetMassFromShapes" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); (arg1)->SetMassFromShapes(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetXForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; float val3 ;
  int ecode3 = 0 ; PyObject *swig_obj[3] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_SetXForm",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetXForm" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetXForm" "', argument " "position"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2Body_SetXForm" "', argument " "3"" of type '" "float32""'"); }  
  arg3 = static_cast< float32 >(val3); result = (bool)(arg1)->SetXForm((b2Vec2 const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetXForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2XForm *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetXForm" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2XForm *) &((b2Body const *)arg1)->GetXForm();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2XForm, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetPosition" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2Vec2 *) &((b2Body const *)arg1)->GetPosition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetAngle" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetAngle();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorldCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldCenter" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2Vec2 *) &((b2Body const *)arg1)->GetWorldCenter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLocalCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalCenter" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2Vec2 *) &((b2Body const *)arg1)->GetLocalCenter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetLinearVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_SetLinearVelocity",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetLinearVelocity" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetLinearVelocity" "', argument " "v"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  (arg1)->SetLinearVelocity((b2Vec2 const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocity" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = ((b2Body const *)arg1)->GetLinearVelocity();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetAngularVelocity",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetAngularVelocity" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_SetAngularVelocity" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetAngularVelocity(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetAngularVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetAngularVelocity" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetAngularVelocity();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  b2Vec2 temp3 ; PyObject *swig_obj[3] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_ApplyForce",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "force"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyForce" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyTorque(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_ApplyTorque",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyTorque" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_ApplyTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->ApplyTorque(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ApplyImpulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; b2Vec2 *arg3 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  b2Vec2 temp3 ; PyObject *swig_obj[3] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_ApplyImpulse",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyImpulse" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyImpulse" "', argument " "impulse"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  {  if (PyTuple_Check(swig_obj[2]) || PyList_Check(swig_obj[2])) {
      int sz = (PyList_Check(swig_obj[2]) ? PyList_Size(swig_obj[2]) : PyTuple_Size(swig_obj[2])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[2]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 0), &temp3.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[2], 1), &temp3.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[2] == Py_None) { temp3.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[2], (void**)&arg3, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ApplyImpulse" "', argument " "point"" of type '" "b2Vec2 const &""'");  }
       temp3 =(b2Vec2&) *arg3; }  arg3 = &temp3; }  (arg1)->ApplyImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetMass" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetMass();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetInertia" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetInertia();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorldPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Body_GetWorldPoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldPoint" "', argument " "localPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorldVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Body_GetWorldVector",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldVector" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorldVector" "', argument " "localVector"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLocalPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Body_GetLocalPoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalPoint" "', argument " "worldPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLocalVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  b2Vec2 result; if (!SWIG_Python_UnpackTuple(args,"b2Body_GetLocalVector",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalVector" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLocalVector" "', argument " "worldVector"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearVelocityFromWorldPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_GetLinearVelocityFromWorldPoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromWorldPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromWorldPoint" "', argument " "worldPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearVelocityFromLocalPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2Body *arg1 = (b2Body *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; b2Vec2 result;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_GetLinearVelocityFromLocalPoint",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromLocalPoint" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearVelocityFromLocalPoint" "', argument " "localPoint"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2);
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetLinearDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetLinearDamping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetLinearDamping();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetLinearDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetLinearDamping",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetLinearDamping" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_SetLinearDamping" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetLinearDamping(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetAngularDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetAngularDamping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (float32)((b2Body const *)arg1)->GetAngularDamping();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetAngularDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetAngularDamping",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetAngularDamping" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_SetAngularDamping" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetAngularDamping(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsBullet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsBullet" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsBullet();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetBullet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetBullet",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetBullet" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_SetBullet" "', argument " "2"" of type '" "bool""'"); }  
  arg2 = static_cast< bool >(val2); (arg1)->SetBullet(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsFixedRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsFixedRotation" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsFixedRotation();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetFixedRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_SetFixedRotation",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetFixedRotation" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_SetFixedRotation" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->SetFixedRotation(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsStatic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsStatic" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsStatic();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetStatic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetStatic" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); (arg1)->SetStatic(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsDynamic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsDynamic" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsDynamic();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsFrozen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsFrozen" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsFrozen();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsSleeping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsSleeping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsSleeping();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_IsAllowSleeping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_IsAllowSleeping" "', argument " "1"" of type '" "b2Body const *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (bool)((b2Body const *)arg1)->IsAllowSleeping();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_AllowSleeping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_AllowSleeping",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_AllowSleeping" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2Body_AllowSleeping" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->AllowSleeping(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_WakeUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_WakeUp" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); (arg1)->WakeUp(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_PutToSleep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_PutToSleep" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); (arg1)->PutToSleep(); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body__GetShapeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Shape *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body__GetShapeList" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2Shape *)(arg1)->GetShapeList(); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetJointList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2JointEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetJointList" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2JointEdge *)(arg1)->GetJointList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2JointEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetControllerList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2ControllerEdge *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetControllerList" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2ControllerEdge *)(arg1)->GetControllerList();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ControllerEdge, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetNext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetNext" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2Body *)(arg1)->GetNext();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetWorld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2World *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetWorld" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); result = (b2World *)(arg1)->GetWorld();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2World, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_DestroyShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2Shape *arg2 = (b2Shape *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2Body_DestroyShape",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_DestroyShape" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Shape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body_DestroyShape" "', argument " "2"" of type '" "b2Shape *""'");  }
   arg2 = reinterpret_cast< b2Shape * >(argp2); b2Body_DestroyShape(arg1,arg2); resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_CreateShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; b2ShapeDef *arg2 = (b2ShapeDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; b2Shape *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_CreateShape",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_CreateShape" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2ShapeDef, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2Body_CreateShape" "', argument " "2"" of type '" "b2ShapeDef *""'");  }
   arg2 = reinterpret_cast< b2ShapeDef * >(argp2); result = (b2Shape *)b2Body_CreateShape(arg1,arg2); { if (result) {
      switch ((result)->GetType()) { case e_circleShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2CircleShape, 0); break; case e_polygonShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PolygonShape, 0); break; case e_edgeShape:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2EdgeShape, 0); break; case e_unknownShape: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Shape, 0); break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_GetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; PyObject *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_GetUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); result = (PyObject *)b2Body_GetUserData(arg1); resultobj = result;
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_SetUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; PyObject *arg2 = (PyObject *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2Body_SetUserData",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_SetUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); arg2 = swig_obj[1]; b2Body_SetUserData(arg1,arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2Body_ClearUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body_ClearUserData" "', argument " "1"" of type '" "b2Body *""'");  }
   arg1 = reinterpret_cast< b2Body * >(argp1); b2Body_ClearUserData(arg1); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2Body___hash__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2Body *arg1 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; long result; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Body___hash__" "', argument " "1"" of type '" "b2Body *""'");  } 
  arg1 = reinterpret_cast< b2Body * >(argp1); result = (long)b2Body___hash__(arg1);
  resultobj = SWIG_From_long(static_cast< long >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *b2Body_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2Body, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2BuoyancyController_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_normal_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_normal_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_normal_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_offset_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_offset_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_offset_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->offset = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_offset_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (float32) ((arg1)->offset);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_density_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_density_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_density_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_density_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->density = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_density_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_density_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (float32) ((arg1)->density);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_velocity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_velocity_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_velocity_set" "', argument " "velocity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_velocity_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (b2Vec2 *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_linearDrag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_linearDrag_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_linearDrag_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_linearDrag_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->linearDrag = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_linearDrag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_linearDrag_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (float32) ((arg1)->linearDrag);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_angularDrag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_angularDrag_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_angularDrag_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_angularDrag_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularDrag = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_angularDrag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_angularDrag_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (float32) ((arg1)->angularDrag);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_useDensity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; bool arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_useDensity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_useDensity_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_useDensity_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->useDensity = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_useDensity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_useDensity_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (bool) ((arg1)->useDensity);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_useWorldGravity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; bool arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_useWorldGravity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_useWorldGravity_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyController_useWorldGravity_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->useWorldGravity = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_useWorldGravity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_useWorldGravity_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (bool) ((arg1)->useWorldGravity);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_gravity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyController_gravity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_gravity_set" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_gravity_set" "', argument " "gravity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->gravity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyController_gravity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyController_gravity_get" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); result = (b2Vec2 *)& ((arg1)->gravity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BuoyancyController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyController *arg1 = (b2BuoyancyController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyController, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BuoyancyController" "', argument " "1"" of type '" "b2BuoyancyController *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyController * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2BuoyancyController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BuoyancyController, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_normal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_normal_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_normal_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_normal_set" "', argument " "normal"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->normal = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_normal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_normal_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (b2Vec2 *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_offset_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_offset_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_offset_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->offset = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_offset_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (float32) ((arg1)->offset);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_density_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_density_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_density_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_density_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->density = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_density_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_density_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (float32) ((arg1)->density);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_velocity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_velocity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_velocity_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_velocity_set" "', argument " "velocity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->velocity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_velocity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_velocity_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (b2Vec2 *)& ((arg1)->velocity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_linearDrag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_linearDrag_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_linearDrag_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_linearDrag_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->linearDrag = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_linearDrag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_linearDrag_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (float32) ((arg1)->linearDrag);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_angularDrag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_angularDrag_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_angularDrag_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_angularDrag_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->angularDrag = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_angularDrag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_angularDrag_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (float32) ((arg1)->angularDrag);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_useDensity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; bool arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_useDensity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_useDensity_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_useDensity_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->useDensity = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_useDensity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_useDensity_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (bool) ((arg1)->useDensity);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_useWorldGravity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; bool arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_useWorldGravity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_useWorldGravity_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2BuoyancyControllerDef_useWorldGravity_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->useWorldGravity = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_useWorldGravity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_useWorldGravity_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (bool) ((arg1)->useWorldGravity);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_gravity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2BuoyancyControllerDef_gravity_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_gravity_set" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_gravity_set" "', argument " "gravity"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->gravity = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2BuoyancyControllerDef_gravity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2BuoyancyControllerDef_gravity_get" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); result = (b2Vec2 *)& ((arg1)->gravity);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2BuoyancyControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"new_b2BuoyancyControllerDef",0,0,0)) SWIG_fail;
  result = (b2BuoyancyControllerDef *)new b2BuoyancyControllerDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2BuoyancyControllerDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2BuoyancyControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2BuoyancyControllerDef *arg1 = (b2BuoyancyControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2BuoyancyControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2BuoyancyControllerDef" "', argument " "1"" of type '" "b2BuoyancyControllerDef *""'");  }
   arg1 = reinterpret_cast< b2BuoyancyControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2BuoyancyControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2BuoyancyControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2BuoyancyControllerDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ConstantAccelController_A_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelController *arg1 = (b2ConstantAccelController *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ConstantAccelController_A_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelController_A_set" "', argument " "1"" of type '" "b2ConstantAccelController *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelController * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelController_A_set" "', argument " "A"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->A = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ConstantAccelController_A_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelController *arg1 = (b2ConstantAccelController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelController_A_get" "', argument " "1"" of type '" "b2ConstantAccelController *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelController * >(argp1); result = (b2Vec2 *)& ((arg1)->A);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ConstantAccelController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelController *arg1 = (b2ConstantAccelController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelController, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ConstantAccelController" "', argument " "1"" of type '" "b2ConstantAccelController *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelController * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2ConstantAccelController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ConstantAccelController, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2ConstantAccelControllerDef_A_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelControllerDef *arg1 = (b2ConstantAccelControllerDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ConstantAccelControllerDef_A_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelControllerDef_A_set" "', argument " "1"" of type '" "b2ConstantAccelControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelControllerDef * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelControllerDef_A_set" "', argument " "A"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->A = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ConstantAccelControllerDef_A_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelControllerDef *arg1 = (b2ConstantAccelControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantAccelControllerDef_A_get" "', argument " "1"" of type '" "b2ConstantAccelControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelControllerDef * >(argp1); result = (b2Vec2 *)& ((arg1)->A);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ConstantAccelControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelControllerDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"new_b2ConstantAccelControllerDef",0,0,0)) SWIG_fail;
  result = (b2ConstantAccelControllerDef *)new b2ConstantAccelControllerDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ConstantAccelControllerDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ConstantAccelControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantAccelControllerDef *arg1 = (b2ConstantAccelControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantAccelControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ConstantAccelControllerDef" "', argument " "1"" of type '" "b2ConstantAccelControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantAccelControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2ConstantAccelControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ConstantAccelControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ConstantAccelControllerDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2ConstantForceController_F_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceController *arg1 = (b2ConstantForceController *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ConstantForceController_F_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceController_F_set" "', argument " "1"" of type '" "b2ConstantForceController *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceController * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceController_F_set" "', argument " "F"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->F = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ConstantForceController_F_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceController *arg1 = (b2ConstantForceController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceController_F_get" "', argument " "1"" of type '" "b2ConstantForceController *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceController * >(argp1); result = (b2Vec2 *)& ((arg1)->F);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ConstantForceController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceController *arg1 = (b2ConstantForceController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceController, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ConstantForceController" "', argument " "1"" of type '" "b2ConstantForceController *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceController * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2ConstantForceController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ConstantForceController, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2ConstantForceControllerDef_F_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceControllerDef *arg1 = (b2ConstantForceControllerDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2ConstantForceControllerDef_F_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceControllerDef_F_set" "', argument " "1"" of type '" "b2ConstantForceControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceControllerDef * >(argp1); { 
    if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceControllerDef_F_set" "', argument " "F"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->F = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2ConstantForceControllerDef_F_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceControllerDef *arg1 = (b2ConstantForceControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2ConstantForceControllerDef_F_get" "', argument " "1"" of type '" "b2ConstantForceControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceControllerDef * >(argp1); result = (b2Vec2 *)& ((arg1)->F);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2ConstantForceControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceControllerDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"new_b2ConstantForceControllerDef",0,0,0)) SWIG_fail;
  result = (b2ConstantForceControllerDef *)new b2ConstantForceControllerDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2ConstantForceControllerDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2ConstantForceControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2ConstantForceControllerDef *arg1 = (b2ConstantForceControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2ConstantForceControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2ConstantForceControllerDef" "', argument " "1"" of type '" "b2ConstantForceControllerDef *""'");  }
   arg1 = reinterpret_cast< b2ConstantForceControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2ConstantForceControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2ConstantForceControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2ConstantForceControllerDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2GravityController_G_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GravityController *arg1 = (b2GravityController *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GravityController_G_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityController_G_set" "', argument " "1"" of type '" "b2GravityController *""'");  }
   arg1 = reinterpret_cast< b2GravityController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GravityController_G_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->G = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityController_G_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GravityController *arg1 = (b2GravityController *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityController_G_get" "', argument " "1"" of type '" "b2GravityController *""'");  }
   arg1 = reinterpret_cast< b2GravityController * >(argp1); result = (float32) ((arg1)->G);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityController_invSqr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityController *arg1 = (b2GravityController *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GravityController_invSqr_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityController_invSqr_set" "', argument " "1"" of type '" "b2GravityController *""'");  }
   arg1 = reinterpret_cast< b2GravityController * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GravityController_invSqr_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->invSqr = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityController_invSqr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityController *arg1 = (b2GravityController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityController_invSqr_get" "', argument " "1"" of type '" "b2GravityController *""'");  }
   arg1 = reinterpret_cast< b2GravityController * >(argp1); result = (bool) ((arg1)->invSqr);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GravityController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GravityController *arg1 = (b2GravityController *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityController, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GravityController" "', argument " "1"" of type '" "b2GravityController *""'");  }
   arg1 = reinterpret_cast< b2GravityController * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2GravityController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GravityController, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2GravityControllerDef_G_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityControllerDef *arg1 = (b2GravityControllerDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GravityControllerDef_G_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityControllerDef_G_set" "', argument " "1"" of type '" "b2GravityControllerDef *""'");  }
   arg1 = reinterpret_cast< b2GravityControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GravityControllerDef_G_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->G = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityControllerDef_G_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityControllerDef *arg1 = (b2GravityControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityControllerDef_G_get" "', argument " "1"" of type '" "b2GravityControllerDef *""'");  }
   arg1 = reinterpret_cast< b2GravityControllerDef * >(argp1); result = (float32) ((arg1)->G);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityControllerDef_invSqr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityControllerDef *arg1 = (b2GravityControllerDef *) 0 ; bool arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GravityControllerDef_invSqr_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityControllerDef_invSqr_set" "', argument " "1"" of type '" "b2GravityControllerDef *""'");  }
   arg1 = reinterpret_cast< b2GravityControllerDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GravityControllerDef_invSqr_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->invSqr = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GravityControllerDef_invSqr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityControllerDef *arg1 = (b2GravityControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GravityControllerDef_invSqr_get" "', argument " "1"" of type '" "b2GravityControllerDef *""'");  }
   arg1 = reinterpret_cast< b2GravityControllerDef * >(argp1); result = (bool) ((arg1)->invSqr);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2GravityControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GravityControllerDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2GravityControllerDef",0,0,0)) SWIG_fail;
  result = (b2GravityControllerDef *)new b2GravityControllerDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GravityControllerDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GravityControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GravityControllerDef *arg1 = (b2GravityControllerDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GravityControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GravityControllerDef" "', argument " "1"" of type '" "b2GravityControllerDef *""'");  }
   arg1 = reinterpret_cast< b2GravityControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2GravityControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GravityControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2GravityControllerDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2TensorDampingController_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingController *arg1 = (b2TensorDampingController *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TensorDampingController_T_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingController_T_set" "', argument " "1"" of type '" "b2TensorDampingController *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingController * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TensorDampingController_T_set" "', argument " "2"" of type '" "b2Mat22 *""'");  }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->T = *arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingController_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingController *arg1 = (b2TensorDampingController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Mat22 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingController_T_get" "', argument " "1"" of type '" "b2TensorDampingController *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingController * >(argp1); result = (b2Mat22 *)& ((arg1)->T);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingController_maxTimestep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingController *arg1 = (b2TensorDampingController *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TensorDampingController_maxTimestep_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingController_maxTimestep_set" "', argument " "1"" of type '" "b2TensorDampingController *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingController * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TensorDampingController_maxTimestep_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxTimestep = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingController_maxTimestep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingController *arg1 = (b2TensorDampingController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingController, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingController_maxTimestep_get" "', argument " "1"" of type '" "b2TensorDampingController *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingController * >(argp1); result = (float32) ((arg1)->maxTimestep);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TensorDampingController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingController *arg1 = (b2TensorDampingController *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingController, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TensorDampingController" "', argument " "1"" of type '" "b2TensorDampingController *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingController * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2TensorDampingController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TensorDampingController, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_b2TensorDampingControllerDef_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ;
  b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TensorDampingControllerDef_T_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingControllerDef_T_set" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2TensorDampingControllerDef_T_set" "', argument " "2"" of type '" "b2Mat22 *""'");  }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->T = *arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingControllerDef_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingControllerDef_T_get" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1); result = (b2Mat22 *)& ((arg1)->T);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingControllerDef_maxTimestep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ; float32 arg2 ;
  void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TensorDampingControllerDef_maxTimestep_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingControllerDef_maxTimestep_set" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TensorDampingControllerDef_maxTimestep_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxTimestep = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingControllerDef_maxTimestep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingControllerDef_maxTimestep_get" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1); result = (float32) ((arg1)->maxTimestep);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2TensorDampingControllerDef_SetAxisAligned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ; float32 arg2 ;
  float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ; int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2TensorDampingControllerDef_SetAxisAligned",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2TensorDampingControllerDef_SetAxisAligned" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2TensorDampingControllerDef_SetAxisAligned" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2TensorDampingControllerDef_SetAxisAligned" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); (arg1)->SetAxisAligned(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_new_b2TensorDampingControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *result = 0 ;
  if (!SWIG_Python_UnpackTuple(args,"new_b2TensorDampingControllerDef",0,0,0)) SWIG_fail;
  result = (b2TensorDampingControllerDef *)new b2TensorDampingControllerDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2TensorDampingControllerDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2TensorDampingControllerDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2TensorDampingControllerDef *arg1 = (b2TensorDampingControllerDef *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2TensorDampingControllerDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2TensorDampingControllerDef" "', argument " "1"" of type '" "b2TensorDampingControllerDef *""'");  }
   arg1 = reinterpret_cast< b2TensorDampingControllerDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *b2TensorDampingControllerDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2TensorDampingControllerDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2TensorDampingControllerDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2DistanceJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2DistanceJointDef",0,0,0)) SWIG_fail;
  result = (b2DistanceJointDef *)new b2DistanceJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject *swig_obj[5] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_Initialize",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2DistanceJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "anchor1"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PyTuple_Check(swig_obj[4]) || PyList_Check(swig_obj[4])) {
      int sz = (PyList_Check(swig_obj[4]) ? PyList_Size(swig_obj[4]) : PyTuple_Size(swig_obj[4])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[4]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 0), &temp5.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 1), &temp5.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[4] == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[4], (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_Initialize" "', argument " "anchor2"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor1_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor1_set" "', argument " "localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor1_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor2_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor2_set" "', argument " "localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_localAnchor2_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_length_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_length_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_length_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->length = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_length_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->length);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_frequencyHz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_frequencyHz_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_frequencyHz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_dampingRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJointDef_dampingRatio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJointDef_dampingRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceJointDef" "', argument " "1"" of type '" "b2DistanceJointDef *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2DistanceJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2DistanceJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJointDef *arg1 = (b2DistanceJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2DistanceJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2DistanceJoint" "', argument " "1"" of type '" "b2DistanceJointDef const *""'");  }
   arg1 = reinterpret_cast< b2DistanceJointDef * >(argp1);
  result = (b2DistanceJoint *)new b2DistanceJoint((b2DistanceJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2DistanceJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DistanceJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2DistanceJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2DistanceJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor1_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor1_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor2_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_localAnchor2_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_u_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_u_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_u_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_u_set" "', argument " "m_u"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_u = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_u_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_u_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_u);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_frequencyHz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_frequencyHz_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_frequencyHz_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_frequencyHz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_frequencyHz_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_dampingRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_dampingRatio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_dampingRatio_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_dampingRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_dampingRatio_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_gamma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_gamma_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_gamma_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_gamma_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_gamma = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_gamma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_gamma_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_gamma);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_bias_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_bias_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_bias_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_bias_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_bias = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_bias_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_bias_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_bias);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_impulse_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_impulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_impulse = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_impulse_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_impulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_mass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_mass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_mass_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_mass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_mass = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_mass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_mass_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_mass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2DistanceJoint_length_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_length_set" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2DistanceJoint_length_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_length = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2DistanceJoint_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2DistanceJoint_length_get" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); result = (float32) ((arg1)->m_length);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2DistanceJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2DistanceJoint *arg1 = (b2DistanceJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2DistanceJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2DistanceJoint" "', argument " "1"" of type '" "b2DistanceJoint *""'");  }
   arg1 = reinterpret_cast< b2DistanceJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2DistanceJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2DistanceJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2DistanceJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2GearJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2GearJointDef",0,0,0)) SWIG_fail;
  result = (b2GearJointDef *)new b2GearJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GearJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJointDef_joint1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint1_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJointDef_joint1_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint1_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (b2Joint *) ((arg1)->joint1); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; b2Joint *arg2 = (b2Joint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJointDef_joint2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint2_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Joint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJointDef_joint2_set" "', argument " "2"" of type '" "b2Joint *""'");  }
   arg2 = reinterpret_cast< b2Joint * >(argp2); if (arg1) (arg1)->joint2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_joint2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Joint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_joint2_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (b2Joint *) ((arg1)->joint2); { if (result) {
      switch ((result)->GetType()) { case e_revoluteJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2RevoluteJoint, 0); break; case e_prismaticJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PrismaticJoint, 0); break; case e_distanceJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2DistanceJoint, 0); break; case e_pulleyJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2PulleyJoint, 0); break; case e_mouseJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2MouseJoint, 0); break; case e_gearJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2GearJoint, 0); break; case e_lineJoint:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2LineJoint, 0); break; case e_unknownJoint: default:
        resultobj=SWIG_NewPointerObj(result, SWIGTYPE_p_b2Joint, 0); break; break; }  }  else { resultobj=Py_None; 
      Py_INCREF(resultobj); }  }  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_ratio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJointDef_ratio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_ratio_set" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJointDef_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJointDef_ratio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJointDef_ratio_get" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (float32) ((arg1)->ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GearJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GearJointDef" "', argument " "1"" of type '" "b2GearJointDef *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2GearJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GearJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2GearJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2GearJoint_GetRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_GetRatio" "', argument " "1"" of type '" "b2GearJoint const *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (float32)((b2GearJoint const *)arg1)->GetRatio();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2GearJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJointDef *arg1 = (b2GearJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2GearJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2GearJoint" "', argument " "1"" of type '" "b2GearJointDef const *""'");  }
   arg1 = reinterpret_cast< b2GearJointDef * >(argp1); result = (b2GearJoint *)new b2GearJoint((b2GearJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2GearJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2GearJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2GearJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ground1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_ground1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ground1_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_ground1_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->m_ground1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ground1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ground1_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Body *) ((arg1)->m_ground1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ground2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_ground2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ground2_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_ground2_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->m_ground2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ground2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ground2_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Body *) ((arg1)->m_ground2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_revolute1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2RevoluteJoint *arg2 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_revolute1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_revolute1_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2RevoluteJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_revolute1_set" "', argument " "2"" of type '" "b2RevoluteJoint *""'");  }
   arg2 = reinterpret_cast< b2RevoluteJoint * >(argp2); if (arg1) (arg1)->m_revolute1 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_revolute1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2RevoluteJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_revolute1_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2RevoluteJoint *) ((arg1)->m_revolute1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_prismatic1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2PrismaticJoint *arg2 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_prismatic1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_prismatic1_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PrismaticJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_prismatic1_set" "', argument " "2"" of type '" "b2PrismaticJoint *""'");  }
   arg2 = reinterpret_cast< b2PrismaticJoint * >(argp2); if (arg1) (arg1)->m_prismatic1 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_prismatic1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PrismaticJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_prismatic1_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2PrismaticJoint *) ((arg1)->m_prismatic1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_revolute2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2RevoluteJoint *arg2 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_revolute2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_revolute2_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2RevoluteJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_revolute2_set" "', argument " "2"" of type '" "b2RevoluteJoint *""'");  }
   arg2 = reinterpret_cast< b2RevoluteJoint * >(argp2); if (arg1) (arg1)->m_revolute2 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_revolute2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2RevoluteJoint *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_revolute2_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2RevoluteJoint *) ((arg1)->m_revolute2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_prismatic2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2PrismaticJoint *arg2 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_prismatic2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_prismatic2_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2PrismaticJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_prismatic2_set" "', argument " "2"" of type '" "b2PrismaticJoint *""'");  }
   arg2 = reinterpret_cast< b2PrismaticJoint * >(argp2); if (arg1) (arg1)->m_prismatic2 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_prismatic2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PrismaticJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_prismatic2_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2PrismaticJoint *) ((arg1)->m_prismatic2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_groundAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_groundAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor1_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor1_set" "', argument " "m_groundAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_groundAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_groundAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor1_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_groundAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_groundAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_groundAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor2_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor2_set" "', argument " "m_groundAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_groundAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_groundAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_groundAnchor2_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_groundAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor1_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor1_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor2_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_localAnchor2_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_J_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; b2Jacobian *arg2 = (b2Jacobian *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_J_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_J_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Jacobian, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2GearJoint_J_set" "', argument " "2"" of type '" "b2Jacobian *""'");  }
   arg2 = reinterpret_cast< b2Jacobian * >(argp2); if (arg1) (arg1)->m_J = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_J_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Jacobian *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_J_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (b2Jacobian *)& ((arg1)->m_J);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Jacobian, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_constant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_constant_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_constant_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint_constant_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_constant = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_constant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_constant_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (float32) ((arg1)->m_constant);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ratio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_ratio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ratio_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_ratio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_ratio_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (float32) ((arg1)->m_ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_mass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_mass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_mass_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint_mass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_mass = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_mass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_mass_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (float32) ((arg1)->m_mass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2GearJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_impulse_set" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2GearJoint_impulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_impulse = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2GearJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2GearJoint_impulse_get" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); result = (float32) ((arg1)->m_impulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2GearJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2GearJoint *arg1 = (b2GearJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2GearJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2GearJoint" "', argument " "1"" of type '" "b2GearJoint *""'");  }
   arg1 = reinterpret_cast< b2GearJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2GearJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2GearJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2GearJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2LineJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2LineJointDef",0,0,0)) SWIG_fail;
  result = (b2LineJointDef *)new b2LineJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2LineJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ; b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ;
  b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ;
  b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject *swig_obj[5] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_Initialize",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_Initialize" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2LineJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2LineJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PyTuple_Check(swig_obj[4]) || PyList_Check(swig_obj[4])) {
      int sz = (PyList_Check(swig_obj[4]) ? PyList_Size(swig_obj[4]) : PyTuple_Size(swig_obj[4])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[4]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 0), &temp5.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 1), &temp5.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[4] == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[4], (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_Initialize" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor1_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor1_set" "', argument " "localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor1_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor2_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor2_set" "', argument " "localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAnchor2_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_localAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAxis1_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAxis1_set" "', argument " "localAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_localAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_localAxis1_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_enableLimit_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_enableLimit_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (bool) ((arg1)->enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_lowerTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_lowerTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_lowerTranslation_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_lowerTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lowerTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_lowerTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_lowerTranslation_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (float32) ((arg1)->lowerTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_upperTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_upperTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_upperTranslation_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_upperTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->upperTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_upperTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_upperTranslation_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (float32) ((arg1)->upperTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_enableMotor_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_enableMotor_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_maxMotorForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_maxMotorForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_maxMotorForce_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_maxMotorForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_maxMotorForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_maxMotorForce_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (float32) ((arg1)->maxMotorForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJointDef_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJointDef_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2LineJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2LineJointDef" "', argument " "1"" of type '" "b2LineJointDef *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2LineJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2LineJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2LineJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2LineJoint_GetJointTranslation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetJointTranslation" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetJointTranslation();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_GetJointSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetJointSpeed" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetJointSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_IsLimitEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_IsLimitEnabled" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (bool)((b2LineJoint const *)arg1)->IsLimitEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_EnableLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_EnableLimit",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_EnableLimit" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_EnableLimit" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableLimit(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_GetLowerLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetLowerLimit" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetLowerLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_GetUpperLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetUpperLimit" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetUpperLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_SetLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_SetLimits",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_SetLimits" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_SetLimits" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2LineJoint_SetLimits" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); (arg1)->SetLimits(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_IsMotorEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; bool result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_IsMotorEnabled" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (bool)((b2LineJoint const *)arg1)->IsMotorEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_EnableMotor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_EnableMotor",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_EnableMotor" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableMotor(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_SetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_SetMotorSpeed",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_SetMotorSpeed" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMotorSpeed(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_GetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetMotorSpeed" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetMotorSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_SetMaxMotorForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_SetMaxMotorForce",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_SetMaxMotorForce" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_SetMaxMotorForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMaxMotorForce(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_GetMotorForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_GetMotorForce" "', argument " "1"" of type '" "b2LineJoint const *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32)((b2LineJoint const *)arg1)->GetMotorForce();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2LineJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJointDef *arg1 = (b2LineJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2LineJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2LineJoint" "', argument " "1"" of type '" "b2LineJointDef const *""'");  }
   arg1 = reinterpret_cast< b2LineJointDef * >(argp1); result = (b2LineJoint *)new b2LineJoint((b2LineJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2LineJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2LineJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2LineJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2LineJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2LineJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor1_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor1_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor2_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localAnchor2_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localXAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_localXAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localXAxis1_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localXAxis1_set" "', argument " "m_localXAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localXAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localXAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localXAxis1_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localXAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localYAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_localYAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localYAxis1_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localYAxis1_set" "', argument " "m_localYAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localYAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_localYAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_localYAxis1_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localYAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_axis_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_axis_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_axis_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_axis_set" "', argument " "m_axis"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_axis = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_axis_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_axis_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_axis);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_perp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_perp_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_perp_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_perp_set" "', argument " "m_perp"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_perp = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_perp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_perp_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_perp);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_s1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_s1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_s1_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_s1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_s1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_s1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_s1_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_s1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_s2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_s2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_s2_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_s2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_s2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_s2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_s2_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_s2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_a1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_a1_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_a1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_a1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_a1_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_a1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_a2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_a2_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_a2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_a2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_a2_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_a2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_K_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_K_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_K_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2LineJoint_K_set" "', argument " "2"" of type '" "b2Mat22 *""'");  }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->m_K = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_K_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_K_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Mat22 *)& ((arg1)->m_K);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_impulse_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_impulse_set" "', argument " "m_impulse"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_impulse = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_impulse_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_impulse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorMass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_motorMass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorMass_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_motorMass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorMass = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorMass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorMass_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_motorMass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_motorImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorImpulse_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_motorImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorImpulse_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_motorImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_lowerTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_lowerTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_lowerTranslation_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_lowerTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_lowerTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_lowerTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_lowerTranslation_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_lowerTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_upperTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_upperTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_upperTranslation_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_upperTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_upperTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_upperTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_upperTranslation_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_upperTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_maxMotorForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_maxMotorForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_maxMotorForce_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_maxMotorForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxMotorForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_maxMotorForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_maxMotorForce_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_maxMotorForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorSpeed_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_motorSpeed_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (float32) ((arg1)->m_motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_enableLimit_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_enableLimit_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (bool) ((arg1)->m_enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ; bool val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_enableMotor_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_enableMotor_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (bool) ((arg1)->m_enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_limitState_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2LineJoint_limitState_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_limitState_set" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2LineJoint_limitState_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_limitState = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2LineJoint_limitState_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2LimitState result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2LineJoint_limitState_get" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); result = (b2LimitState) ((arg1)->m_limitState);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2LineJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2LineJoint *arg1 = (b2LineJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2LineJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2LineJoint" "', argument " "1"" of type '" "b2LineJoint *""'");  }
   arg1 = reinterpret_cast< b2LineJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2LineJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2LineJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2LineJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2MouseJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2MouseJointDef",0,0,0)) SWIG_fail;
  result = (b2MouseJointDef *)new b2MouseJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MouseJointDef, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_target_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJointDef_target_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_set" "', argument " "target"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->target = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_target_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_target_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->target);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_maxForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJointDef_maxForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_maxForce_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_maxForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxForce = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_maxForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_maxForce_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->maxForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_frequencyHz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJointDef_frequencyHz_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_frequencyHz_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_frequencyHz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_frequencyHz_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_dampingRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJointDef_dampingRatio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_dampingRatio_set" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJointDef_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJointDef_dampingRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJointDef_dampingRatio_get" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); result = (float32) ((arg1)->dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MouseJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MouseJointDef" "', argument " "1"" of type '" "b2MouseJointDef *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2MouseJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MouseJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MouseJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2MouseJoint_SetTarget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_SetTarget",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_SetTarget" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1] == Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_SetTarget" "', argument " "target"" of type '" "b2Vec2 const &""'");  }
       temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  (arg1)->SetTarget((b2Vec2 const &)*arg2); resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2MouseJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJointDef *arg1 = (b2MouseJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2MouseJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2MouseJoint" "', argument " "1"" of type '" "b2MouseJointDef const *""'");  }
   arg1 = reinterpret_cast< b2MouseJointDef * >(argp1);
  result = (b2MouseJoint *)new b2MouseJoint((b2MouseJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2MouseJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MouseJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MouseJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MouseJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2MouseJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_localAnchor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_localAnchor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_localAnchor_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_localAnchor_set" "', argument " "m_localAnchor"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_localAnchor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_localAnchor_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_target_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_target_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_target_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_target_set" "', argument " "m_target"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_target = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_target_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_target_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_target);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_impulse_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_impulse_set" "', argument " "m_impulse"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_impulse = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_impulse_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_impulse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_mass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Mat22 *arg2 = (b2Mat22 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_mass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_mass_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat22, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2MouseJoint_mass_set" "', argument " "2"" of type '" "b2Mat22 *""'");  }
   arg2 = reinterpret_cast< b2Mat22 * >(argp2); if (arg1) (arg1)->m_mass = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_mass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat22 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_mass_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (b2Mat22 *)& ((arg1)->m_mass);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat22, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_C_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_C_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_C_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_C_set" "', argument " "m_C"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_C = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_C_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_C_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_C);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_maxForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_maxForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_maxForce_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_maxForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_maxForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_maxForce_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (float32) ((arg1)->m_maxForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_frequencyHz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_frequencyHz_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_frequencyHz_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_frequencyHz_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_frequencyHz = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_frequencyHz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_frequencyHz_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (float32) ((arg1)->m_frequencyHz);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_dampingRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_dampingRatio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_dampingRatio_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_dampingRatio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_dampingRatio = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_dampingRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_dampingRatio_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (float32) ((arg1)->m_dampingRatio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_beta_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_beta_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_beta_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_beta = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_beta_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (float32) ((arg1)->m_beta);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_gamma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2MouseJoint_gamma_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_gamma_set" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2MouseJoint_gamma_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_gamma = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2MouseJoint_gamma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2MouseJoint_gamma_get" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); result = (float32) ((arg1)->m_gamma);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2MouseJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2MouseJoint *arg1 = (b2MouseJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2MouseJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2MouseJoint" "', argument " "1"" of type '" "b2MouseJoint *""'");  }
   arg1 = reinterpret_cast< b2MouseJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2MouseJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2MouseJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2MouseJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2PrismaticJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2PrismaticJointDef",0,0,0)) SWIG_fail;
  result = (b2PrismaticJointDef *)new b2PrismaticJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; b2Vec2 temp5 ; PyObject *swig_obj[5] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_Initialize",5,5,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PyTuple_Check(swig_obj[4]) || PyList_Check(swig_obj[4])) {
      int sz = (PyList_Check(swig_obj[4]) ? PyList_Size(swig_obj[4]) : PyTuple_Size(swig_obj[4])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[4]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 0), &temp5.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 1), &temp5.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[4] == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[4], (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_Initialize" "', argument " "axis"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor1_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor1_set" "', argument " "localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor1_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor2_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor2_set" "', argument " "localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAnchor2_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_localAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxis1_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxis1_set" "', argument " "localAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_localAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_localAxis1_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_referenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_referenceAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_referenceAngle_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->referenceAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_referenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_referenceAngle_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableLimit_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableLimit_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (bool) ((arg1)->enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_lowerTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_lowerTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_lowerTranslation_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_lowerTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lowerTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_lowerTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_lowerTranslation_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->lowerTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_upperTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_upperTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_upperTranslation_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_upperTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->upperTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_upperTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_upperTranslation_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->upperTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableMotor_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_enableMotor_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_maxMotorForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_maxMotorForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_maxMotorForce_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_maxMotorForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_maxMotorForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_maxMotorForce_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->maxMotorForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJointDef_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJointDef_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PrismaticJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PrismaticJointDef" "', argument " "1"" of type '" "b2PrismaticJointDef *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PrismaticJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PrismaticJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PrismaticJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetJointTranslation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetJointTranslation" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1);
  result = (float32)((b2PrismaticJoint const *)arg1)->GetJointTranslation();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetJointSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetJointSpeed" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32)((b2PrismaticJoint const *)arg1)->GetJointSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_IsLimitEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_IsLimitEnabled" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (bool)((b2PrismaticJoint const *)arg1)->IsLimitEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_EnableLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_EnableLimit",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_EnableLimit" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_EnableLimit" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableLimit(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetLowerLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetLowerLimit" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32)((b2PrismaticJoint const *)arg1)->GetLowerLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetUpperLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetUpperLimit" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32)((b2PrismaticJoint const *)arg1)->GetUpperLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SetLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_SetLimits",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2PrismaticJoint_SetLimits" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); (arg1)->SetLimits(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_IsMotorEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_IsMotorEnabled" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (bool)((b2PrismaticJoint const *)arg1)->IsMotorEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_EnableMotor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_EnableMotor",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_EnableMotor" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableMotor(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_SetMotorSpeed",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SetMotorSpeed" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMotorSpeed(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetMotorSpeed" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SetMaxMotorForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_SetMaxMotorForce",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SetMaxMotorForce" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_SetMaxMotorForce" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMaxMotorForce(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_GetMotorForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_GetMotorForce" "', argument " "1"" of type '" "b2PrismaticJoint const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32)((b2PrismaticJoint const *)arg1)->GetMotorForce();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2PrismaticJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJointDef *arg1 = (b2PrismaticJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PrismaticJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2PrismaticJoint" "', argument " "1"" of type '" "b2PrismaticJointDef const *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJointDef * >(argp1);
  result = (b2PrismaticJoint *)new b2PrismaticJoint((b2PrismaticJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PrismaticJoint, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PrismaticJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PrismaticJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor1_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor1_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor2_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localAnchor2_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localXAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_localXAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localXAxis1_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localXAxis1_set" "', argument " "m_localXAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localXAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localXAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localXAxis1_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localXAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localYAxis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_localYAxis1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localYAxis1_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localYAxis1_set" "', argument " "m_localYAxis1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localYAxis1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_localYAxis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_localYAxis1_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localYAxis1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_referenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_referenceAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_referenceAngle_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_refAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_referenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_referenceAngle_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_refAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_axis_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_axis_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_axis_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_axis_set" "', argument " "m_axis"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_axis = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_axis_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_axis_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_axis);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_perp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  b2Vec2 temp2 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_perp_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_perp_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_perp_set" "', argument " "m_perp"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_perp = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_perp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_perp_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_perp);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_s1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_s1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_s1_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_s1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_s1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_s1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_s1_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_s1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_s2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_s2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_s2_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_s2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_s2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_s2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_s2_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_s2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_a1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_a1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_a1_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_a1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_a1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_a1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_a1_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_a1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_a2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_a2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_a2_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_a2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_a2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_a2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_a2_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_a2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_K_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_K_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_K_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJoint_K_set" "', argument " "2"" of type '" "b2Mat33 *""'");  }
   arg2 = reinterpret_cast< b2Mat33 * >(argp2); if (arg1) (arg1)->m_K = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_K_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Mat33 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_K_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Mat33 *)& ((arg1)->m_K);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_impulse_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PrismaticJoint_impulse_set" "', argument " "2"" of type '" "b2Vec3 *""'");  }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); if (arg1) (arg1)->m_impulse = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec3 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_impulse_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2Vec3 *)& ((arg1)->m_impulse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorMass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_motorMass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorMass_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_motorMass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorMass = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorMass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorMass_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_motorMass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_motorImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorImpulse_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_motorImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorImpulse_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_motorImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_lowerTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_lowerTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_lowerTranslation_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_lowerTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_lowerTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_lowerTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_lowerTranslation_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_lowerTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_upperTranslation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_upperTranslation_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_upperTranslation_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_upperTranslation_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_upperTranslation = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_upperTranslation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_upperTranslation_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_upperTranslation);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_maxMotorForce_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_maxMotorForce_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_maxMotorForce_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_maxMotorForce_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxMotorForce = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_maxMotorForce_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_maxMotorForce_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_maxMotorForce);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorSpeed_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_motorSpeed_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (float32) ((arg1)->m_motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_enableLimit_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_enableLimit_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (bool) ((arg1)->m_enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_enableMotor_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_enableMotor_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (bool) ((arg1)->m_enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_limitState_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ;
  int res1 = 0 ; int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PrismaticJoint_limitState_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_limitState_set" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PrismaticJoint_limitState_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_limitState = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PrismaticJoint_limitState_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2LimitState result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PrismaticJoint_limitState_get" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); result = (b2LimitState) ((arg1)->m_limitState);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PrismaticJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PrismaticJoint *arg1 = (b2PrismaticJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PrismaticJoint, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PrismaticJoint" "', argument " "1"" of type '" "b2PrismaticJoint *""'");  }
   arg1 = reinterpret_cast< b2PrismaticJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PrismaticJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PrismaticJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PrismaticJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_b2_minPulleyLength_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable b2_minPulleyLength is read-only."); return 1; }
SWIGINTERN PyObject *Swig_var_b2_minPulleyLength_get(void) { PyObject *pyobj = 0;
  pyobj = SWIG_From_float(static_cast< float >(b2_minPulleyLength)); return pyobj; }
SWIGINTERN PyObject *_wrap_new_b2PulleyJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2PulleyJointDef",0,0,0)) SWIG_fail;
  result = (b2PulleyJointDef *)new b2PulleyJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PulleyJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; b2Vec2 *arg5 = 0 ; b2Vec2 *arg6 = 0 ; b2Vec2 *arg7 = 0 ; float32 arg8 ;
  void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ;
  b2Vec2 temp5 ; b2Vec2 temp6 ; b2Vec2 temp7 ; float val8 ; int ecode8 = 0 ; PyObject *swig_obj[8] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_Initialize",8,8,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PulleyJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2PulleyJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "groundAnchor1"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  {  if (PyTuple_Check(swig_obj[4]) || PyList_Check(swig_obj[4])) {
      int sz = (PyList_Check(swig_obj[4]) ? PyList_Size(swig_obj[4]) : PyTuple_Size(swig_obj[4])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[4]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 0), &temp5.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[4], 1), &temp5.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[4] == Py_None) { temp5.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[4], (void**)&arg5, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "groundAnchor2"" of type '" "b2Vec2 const &""'");  }
       temp5 =(b2Vec2&) *arg5; }  arg5 = &temp5; }  {  if (PyTuple_Check(swig_obj[5]) || PyList_Check(swig_obj[5])) {
      int sz = (PyList_Check(swig_obj[5]) ? PyList_Size(swig_obj[5]) : PyTuple_Size(swig_obj[5])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[5]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[5], 0), &temp6.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[5], 1), &temp6.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[5] == Py_None) { temp6.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[5], (void**)&arg6, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "anchor1"" of type '" "b2Vec2 const &""'");  }
       temp6 =(b2Vec2&) *arg6; }  arg6 = &temp6; }  {  if (PyTuple_Check(swig_obj[6]) || PyList_Check(swig_obj[6])) {
      int sz = (PyList_Check(swig_obj[6]) ? PyList_Size(swig_obj[6]) : PyTuple_Size(swig_obj[6])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[6]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[6], 0), &temp7.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[6], 1), &temp7.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[6] == Py_None) { temp7.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[6], (void**)&arg7, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_Initialize" "', argument " "anchor2"" of type '" "b2Vec2 const &""'");  }
       temp7 =(b2Vec2&) *arg7; }  arg7 = &temp7; }  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8); if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "b2PulleyJointDef_Initialize" "', argument " "8"" of type '" "float32""'"); }
    arg8 = static_cast< float32 >(val8);
  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4,(b2Vec2 const &)*arg5,(b2Vec2 const &)*arg6,(b2Vec2 const &)*arg7,arg8);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_groundAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor1_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor1_set" "', argument " "groundAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->groundAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor1_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->groundAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_groundAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor2_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor2_set" "', argument " "groundAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->groundAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_groundAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_groundAnchor2_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->groundAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor1_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor1_set" "', argument " "localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor1_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor2_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor2_set" "', argument " "localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_localAnchor2_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_length1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_length1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_length1_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_length1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->length1 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_length1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_length1_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->length1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_maxLength1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_maxLength1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_maxLength1_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_maxLength1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxLength1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_maxLength1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_maxLength1_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->maxLength1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_length2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_length2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_length2_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_length2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->length2 = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_length2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_length2_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->length2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_maxLength2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_maxLength2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_maxLength2_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_maxLength2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxLength2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_maxLength2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_maxLength2_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->maxLength2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_ratio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJointDef_ratio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_ratio_set" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJointDef_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJointDef_ratio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJointDef_ratio_get" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); result = (float32) ((arg1)->ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PulleyJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PulleyJointDef" "', argument " "1"" of type '" "b2PulleyJointDef *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PulleyJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PulleyJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PulleyJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetGroundAnchor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetGroundAnchor1" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = ((b2PulleyJoint const *)arg1)->GetGroundAnchor1();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetGroundAnchor2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetGroundAnchor2" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = ((b2PulleyJoint const *)arg1)->GetGroundAnchor2();
  resultobj = SWIG_NewPointerObj((new b2Vec2(static_cast< const b2Vec2& >(result))), SWIGTYPE_p_b2Vec2, SWIG_POINTER_OWN |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetLength1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetLength1" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32)((b2PulleyJoint const *)arg1)->GetLength1();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetLength2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetLength2" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32)((b2PulleyJoint const *)arg1)->GetLength2();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_GetRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_GetRatio" "', argument " "1"" of type '" "b2PulleyJoint const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32)((b2PulleyJoint const *)arg1)->GetRatio();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2PulleyJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJointDef *arg1 = (b2PulleyJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2PulleyJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2PulleyJoint" "', argument " "1"" of type '" "b2PulleyJointDef const *""'");  }
   arg1 = reinterpret_cast< b2PulleyJointDef * >(argp1);
  result = (b2PulleyJoint *)new b2PulleyJoint((b2PulleyJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2PulleyJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PulleyJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PulleyJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PulleyJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2PulleyJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_ground_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Body *arg2 = (b2Body *) 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ;
  int res2 = 0 ; PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_ground_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_ground_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2PulleyJoint_ground_set" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); if (arg1) (arg1)->m_ground = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_ground_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Body *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_ground_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Body *) ((arg1)->m_ground);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Body, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_groundAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_groundAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor1_set" "', argument " "m_groundAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_groundAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_groundAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_groundAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_groundAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_groundAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor2_set" "', argument " "m_groundAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_groundAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_groundAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_groundAnchor2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_groundAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_localAnchor2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_u1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_u1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u1_set" "', argument " "m_u1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_u1 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_u1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_u1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_u2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ; int res1 = 0 ; b2Vec2 temp2 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_u2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u2_set" "', argument " "m_u2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_u2 = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_u2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Vec2 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_u2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_u2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_constant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_constant_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_constant_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_constant_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_constant = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_constant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_constant_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_constant);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_ratio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_ratio_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_ratio_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_ratio_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_ratio = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_ratio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_ratio_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_ratio);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_maxLength1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_maxLength1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_maxLength1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_maxLength1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxLength1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_maxLength1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_maxLength1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_maxLength1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_maxLength2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_maxLength2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_maxLength2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_maxLength2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxLength2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_maxLength2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_maxLength2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_maxLength2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_pulleyMass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_pulleyMass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_pulleyMass_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_pulleyMass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_pulleyMass = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_pulleyMass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_pulleyMass_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_pulleyMass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitMass1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitMass1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitMass1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitMass1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_limitMass1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitMass1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitMass1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_limitMass1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitMass2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitMass2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitMass2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitMass2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_limitMass2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitMass2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitMass2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_limitMass2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_impulse_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_impulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_impulse = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; float32 result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_impulse_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_impulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitImpulse1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitImpulse1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitImpulse1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitImpulse1_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_limitImpulse1 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitImpulse1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitImpulse1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_limitImpulse1);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitImpulse2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitImpulse2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitImpulse2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitImpulse2_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_limitImpulse2 = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitImpulse2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitImpulse2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (float32) ((arg1)->m_limitImpulse2);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ; int res1 = 0 ; int val2 ; int ecode2 = 0 ;
  PyObject *swig_obj[2] ; if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_state_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_state_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_state_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_state = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2LimitState result;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_state_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2LimitState) ((arg1)->m_state);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitState1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitState1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitState1_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitState1_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_limitState1 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitState1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2LimitState result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitState1_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2LimitState) ((arg1)->m_limitState1);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitState2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2PulleyJoint_limitState2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitState2_set" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2PulleyJoint_limitState2_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_limitState2 = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2PulleyJoint_limitState2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2LimitState result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2PulleyJoint_limitState2_get" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); result = (b2LimitState) ((arg1)->m_limitState2);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2PulleyJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2PulleyJoint *arg1 = (b2PulleyJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2PulleyJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2PulleyJoint" "', argument " "1"" of type '" "b2PulleyJoint *""'");  }
   arg1 = reinterpret_cast< b2PulleyJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2PulleyJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2PulleyJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2PulleyJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_b2RevoluteJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *result = 0 ; if (!SWIG_Python_UnpackTuple(args,"new_b2RevoluteJointDef",0,0,0)) SWIG_fail;
  result = (b2RevoluteJointDef *)new b2RevoluteJointDef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJointDef, SWIG_POINTER_NEW |  0 );
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Body *arg2 = (b2Body *) 0 ;
  b2Body *arg3 = (b2Body *) 0 ; b2Vec2 *arg4 = 0 ; void *argp1 = 0 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ; b2Vec2 temp4 ; PyObject *swig_obj[4] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_Initialize",4,4,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Body, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "2"" of type '" "b2Body *""'");  }
   arg2 = reinterpret_cast< b2Body * >(argp2); res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_b2Body, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "3"" of type '" "b2Body *""'");  }
   arg3 = reinterpret_cast< b2Body * >(argp3); {  if (PyTuple_Check(swig_obj[3]) || PyList_Check(swig_obj[3])) {
      int sz = (PyList_Check(swig_obj[3]) ? PyList_Size(swig_obj[3]) : PyTuple_Size(swig_obj[3])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[3]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 0), &temp4.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[3], 1), &temp4.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[3] == Py_None) { temp4.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[3], (void**)&arg4, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_Initialize" "', argument " "anchor"" of type '" "b2Vec2 const &""'");  }
       temp4 =(b2Vec2&) *arg4; }  arg4 = &temp4; }  (arg1)->Initialize(arg2,arg3,(b2Vec2 const &)*arg4);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor1_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor1_set" "', argument " "localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor1_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor2_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor2_set" "', argument " "localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_localAnchor2_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (b2Vec2 *)& ((arg1)->localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_referenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_referenceAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_referenceAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->referenceAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_referenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_referenceAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableLimit_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableLimit_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (bool) ((arg1)->enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_lowerAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_lowerAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_lowerAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_lowerAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->lowerAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_lowerAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_lowerAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->lowerAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_upperAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_upperAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_upperAngle_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_upperAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->upperAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_upperAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_upperAngle_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->upperAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableMotor_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_enableMotor_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (bool) ((arg1)->enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_motorSpeed_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_motorSpeed_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_maxMotorTorque_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJointDef_maxMotorTorque_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_maxMotorTorque_set" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJointDef_maxMotorTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->maxMotorTorque = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJointDef_maxMotorTorque_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJointDef_maxMotorTorque_get" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); result = (float32) ((arg1)->maxMotorTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RevoluteJointDef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, SWIG_POINTER_DISOWN |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RevoluteJointDef" "', argument " "1"" of type '" "b2RevoluteJointDef *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2RevoluteJointDef_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RevoluteJointDef, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RevoluteJointDef_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetJointAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetJointAngle" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetJointAngle();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetJointSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetJointSpeed" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetJointSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_IsLimitEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_IsLimitEnabled" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (bool)((b2RevoluteJoint const *)arg1)->IsLimitEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_EnableLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_EnableLimit",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_EnableLimit" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_EnableLimit" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableLimit(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetLowerLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetLowerLimit" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetLowerLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetUpperLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetUpperLimit" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetUpperLimit();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SetLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; float32 arg3 ; void *argp1 = 0 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; PyObject *swig_obj[3] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_SetLimits",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); ecode3 = SWIG_AsVal_float(swig_obj[2], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "b2RevoluteJoint_SetLimits" "', argument " "3"" of type '" "float32""'"); }
    arg3 = static_cast< float32 >(val3); (arg1)->SetLimits(arg2,arg3); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_IsMotorEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_IsMotorEnabled" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (bool)((b2RevoluteJoint const *)arg1)->IsMotorEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_EnableMotor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_EnableMotor",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_EnableMotor" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_EnableMotor" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); (arg1)->EnableMotor(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_SetMotorSpeed",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SetMotorSpeed" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_SetMotorSpeed" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMotorSpeed(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetMotorSpeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetMotorSpeed" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorSpeed();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SetMaxMotorTorque(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_SetMaxMotorTorque",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SetMaxMotorTorque" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_SetMaxMotorTorque" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); (arg1)->SetMaxMotorTorque(arg2); resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_GetMotorTorque(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_GetMotorTorque" "', argument " "1"" of type '" "b2RevoluteJoint const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32)((b2RevoluteJoint const *)arg1)->GetMotorTorque();
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_new_b2RevoluteJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJointDef *arg1 = (b2RevoluteJointDef *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ;
  b2RevoluteJoint *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJointDef, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_b2RevoluteJoint" "', argument " "1"" of type '" "b2RevoluteJointDef const *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJointDef * >(argp1);
  result = (b2RevoluteJoint *)new b2RevoluteJoint((b2RevoluteJointDef const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2RevoluteJoint, SWIG_POINTER_NEW |  0 ); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_InitVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_InitVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_InitVelocityConstraints" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2RevoluteJoint_InitVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->InitVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SolveVelocityConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2TimeStep *arg2 = 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_SolveVelocityConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SolveVelocityConstraints" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_b2TimeStep,  0  | 0); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'");  }
   if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "b2RevoluteJoint_SolveVelocityConstraints" "', argument " "2"" of type '" "b2TimeStep const &""'"); }
   arg2 = reinterpret_cast< b2TimeStep * >(argp2); (arg1)->SolveVelocityConstraints((b2TimeStep const &)*arg2);
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_SolvePositionConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ; bool result;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_SolvePositionConstraints",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_SolvePositionConstraints" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_SolvePositionConstraints" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); result = (bool)(arg1)->SolvePositionConstraints(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_localAnchor1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_localAnchor1_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor1_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor1_set" "', argument " "m_localAnchor1"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor1 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_localAnchor1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor1_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_localAnchor2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2Vec2 *arg2 = (b2Vec2 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; b2Vec2 temp2 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_localAnchor2_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor2_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); {  if (PyTuple_Check(swig_obj[1]) || PyList_Check(swig_obj[1])) {
      int sz = (PyList_Check(swig_obj[1]) ? PyList_Size(swig_obj[1]) : PyTuple_Size(swig_obj[1])); if (sz != 2) {
        PyErr_Format(PyExc_TypeError, "Expected tuple or list of length 2, got length %d", PyTuple_Size(swig_obj[1]));
        SWIG_fail; }  int res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 0), &temp2.x); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }  
      res1 = SWIG_AsVal_float(PySequence_GetItem(swig_obj[1], 1), &temp2.y); if (!SWIG_IsOK(res1)) {
        PyErr_SetString(PyExc_TypeError,"Converting from sequence to b2Vec2, expected int/float arguments"); SWIG_fail; }   }
     else if (swig_obj[1]==Py_None) { temp2.Set(0.0f,0.0f); }  else {
      int res1 = SWIG_ConvertPtr(swig_obj[1], (void**)&arg2, SWIGTYPE_p_b2Vec2, 0); if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor2_set" "', argument " "m_localAnchor2"" of type '" "b2Vec2 *""'"); 
        SWIG_fail; }  temp2 =(b2Vec2&) *arg2; }  arg2 = &temp2; }  if (arg1) (arg1)->m_localAnchor2 = *arg2;
  resultobj = SWIG_Py_Void(); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_localAnchor2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec2 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_localAnchor2_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (b2Vec2 *)& ((arg1)->m_localAnchor2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec2, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_impulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2Vec3 *arg2 = (b2Vec3 *) 0 ; void *argp1 = 0 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_impulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_impulse_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Vec3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJoint_impulse_set" "', argument " "2"" of type '" "b2Vec3 *""'");  }
   arg2 = reinterpret_cast< b2Vec3 * >(argp2); if (arg1) (arg1)->m_impulse = *arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_impulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2Vec3 *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_impulse_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (b2Vec3 *)& ((arg1)->m_impulse);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Vec3, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorImpulse_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_motorImpulse_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorImpulse_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_motorImpulse_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorImpulse = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorImpulse_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorImpulse_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_motorImpulse);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_mass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2Mat33 *arg2 = (b2Mat33 *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  void *argp2 = 0 ; int res2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_mass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_mass_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_b2Mat33, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "b2RevoluteJoint_mass_set" "', argument " "2"" of type '" "b2Mat33 *""'");  }
   arg2 = reinterpret_cast< b2Mat33 * >(argp2); if (arg1) (arg1)->m_mass = *arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_mass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; b2Mat33 *result = 0 ;
  if (!args) SWIG_fail; swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_mass_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (b2Mat33 *)& ((arg1)->m_mass);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_b2Mat33, 0 |  0 ); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorMass_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_motorMass_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorMass_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_motorMass_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorMass = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorMass_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorMass_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_motorMass);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_enableMotor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_enableMotor_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_enableMotor_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_enableMotor_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableMotor = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_enableMotor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_enableMotor_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (bool) ((arg1)->m_enableMotor);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_maxMotorTorque_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_maxMotorTorque_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_maxMotorTorque_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_maxMotorTorque_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_maxMotorTorque = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_maxMotorTorque_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_maxMotorTorque_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_maxMotorTorque);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorSpeed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_motorSpeed_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorSpeed_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_motorSpeed_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_motorSpeed = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_motorSpeed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_motorSpeed_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_motorSpeed);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_enableLimit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; bool arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  bool val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_enableLimit_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_enableLimit_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_enableLimit_set" "', argument " "2"" of type '" "bool""'"); }
    arg2 = static_cast< bool >(val2); if (arg1) (arg1)->m_enableLimit = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_enableLimit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; bool result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_enableLimit_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (bool) ((arg1)->m_enableLimit);
  resultobj = SWIG_From_bool(static_cast< bool >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_referenceAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_referenceAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_referenceAngle_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_referenceAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_referenceAngle = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_referenceAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_referenceAngle_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_referenceAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_lowerAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_lowerAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_lowerAngle_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_lowerAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_lowerAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_lowerAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_lowerAngle_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_lowerAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_upperAngle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; float32 arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  float val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_upperAngle_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_upperAngle_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_float(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_upperAngle_set" "', argument " "2"" of type '" "float32""'"); }
    arg2 = static_cast< float32 >(val2); if (arg1) (arg1)->m_upperAngle = arg2; resultobj = SWIG_Py_Void(); return resultobj;
  fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_upperAngle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; float32 result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_upperAngle_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (float32) ((arg1)->m_upperAngle);
  resultobj = SWIG_From_float(static_cast< float >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_limitState_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; b2LimitState arg2 ; void *argp1 = 0 ; int res1 = 0 ;
  int val2 ; int ecode2 = 0 ; PyObject *swig_obj[2] ;
  if (!SWIG_Python_UnpackTuple(args,"b2RevoluteJoint_limitState_set",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_limitState_set" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); ecode2 = SWIG_AsVal_int(swig_obj[1], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "b2RevoluteJoint_limitState_set" "', argument " "2"" of type '" "b2LimitState""'"); }
    arg2 = static_cast< b2LimitState >(val2); if (arg1) (arg1)->m_limitState = arg2; resultobj = SWIG_Py_Void();
  return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_b2RevoluteJoint_limitState_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0; b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ;
  PyObject *swig_obj[1] ; b2LimitState result; if (!args) SWIG_fail; swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, 0 |  0 ); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2RevoluteJoint_limitState_get" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); result = (b2LimitState) ((arg1)->m_limitState);
  resultobj = SWIG_From_int(static_cast< int >(result)); return resultobj; fail: return NULL; }
SWIGINTERN PyObject *_wrap_delete_b2RevoluteJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) { PyObject *resultobj = 0;
  b2RevoluteJoint *arg1 = (b2RevoluteJoint *) 0 ; void *argp1 = 0 ; int res1 = 0 ; PyObject *swig_obj[1] ; if (!args) SWIG_fail;
  swig_obj[0] = args; res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_b2RevoluteJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_b2RevoluteJoint" "', argument " "1"" of type '" "b2RevoluteJoint *""'");  }
   arg1 = reinterpret_cast< b2RevoluteJoint * >(argp1); delete arg1; resultobj = SWIG_Py_Void(); return resultobj; fail:
  return NULL; }
SWIGINTERN PyObject *b2RevoluteJoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_b2RevoluteJoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *b2RevoluteJoint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"__b2PythonJointPointerEquals__", _wrap___b2PythonJointPointerEquals__, METH_VARARGS, NULL},
	 { (char *)"__b2PythonBodyPointerEquals__", _wrap___b2PythonBodyPointerEquals__, METH_VARARGS, NULL},
	 { (char *)"__b2PythonShapePointerEquals__", _wrap___b2PythonShapePointerEquals__, METH_VARARGS, NULL},
	 { (char *)"__b2PythonControllerPointerEquals__", _wrap___b2PythonControllerPointerEquals__, METH_VARARGS, NULL},
	 { (char *)"b2Alloc", (PyCFunction)_wrap_b2Alloc, METH_O, (char *)"\n"
		"b2Alloc(int32 size) -> void\n"
		"\n"
		"Implement this function to use your own memory allocator.\n"
		""},
	 { (char *)"b2Free", (PyCFunction)_wrap_b2Free, METH_O, (char *)"\n"
		"b2Free(void mem)\n"
		"\n"
		"If you implement b2Alloc, you should also implement this function.\n"
		""},
	 { (char *)"b2Version_major_set", _wrap_b2Version_major_set, METH_VARARGS, (char *)"b2Version_major_set(b2Version self, int32 major)"},
	 { (char *)"b2Version_major_get", (PyCFunction)_wrap_b2Version_major_get, METH_O, (char *)"b2Version_major_get(b2Version self) -> int32"},
	 { (char *)"b2Version_minor_set", _wrap_b2Version_minor_set, METH_VARARGS, (char *)"b2Version_minor_set(b2Version self, int32 minor)"},
	 { (char *)"b2Version_minor_get", (PyCFunction)_wrap_b2Version_minor_get, METH_O, (char *)"b2Version_minor_get(b2Version self) -> int32"},
	 { (char *)"b2Version_revision_set", _wrap_b2Version_revision_set, METH_VARARGS, (char *)"b2Version_revision_set(b2Version self, int32 revision)"},
	 { (char *)"b2Version_revision_get", (PyCFunction)_wrap_b2Version_revision_get, METH_O, (char *)"b2Version_revision_get(b2Version self) -> int32"},
	 { (char *)"new_b2Version", (PyCFunction)_wrap_new_b2Version, METH_NOARGS, (char *)"new_b2Version() -> b2Version"},
	 { (char *)"delete_b2Version", (PyCFunction)_wrap_delete_b2Version, METH_O, (char *)"delete_b2Version(b2Version self)"},
	 { (char *)"b2Version_swigregister", b2Version_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Version_swiginit", b2Version_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2MixFriction", _wrap_b2MixFriction, METH_VARARGS, (char *)"\n"
		"b2MixFriction(float32 friction1, float32 friction2) -> float32\n"
		"\n"
		"Friction mixing law. Feel free to customize this.\n"
		""},
	 { (char *)"b2MixRestitution", _wrap_b2MixRestitution, METH_VARARGS, (char *)"\n"
		"b2MixRestitution(float32 restitution1, float32 restitution2) -> float32\n"
		"\n"
		"Restitution mixing law. Feel free to customize this.\n"
		""},
	 { (char *)"b2IsValid", (PyCFunction)_wrap_b2IsValid, METH_O, (char *)"\n"
		"b2IsValid(float32 x) -> bool\n"
		"\n"
		"This function is used to ensure that a floating point number is not a NaN or infinity.\n"
		""},
	 { (char *)"b2InvSqrt", (PyCFunction)_wrap_b2InvSqrt, METH_O, (char *)"\n"
		"b2InvSqrt(float32 x) -> float32\n"
		"\n"
		"This is a approximate yet fast inverse square-root.\n"
		""},
	 { (char *)"b2Vec2_SetZero", (PyCFunction)_wrap_b2Vec2_SetZero, METH_O, (char *)"\n"
		"b2Vec2_SetZero(b2Vec2 self)\n"
		"\n"
		"Set this vector to all zeros.\n"
		""},
	 { (char *)"b2Vec2_Set", _wrap_b2Vec2_Set, METH_VARARGS, (char *)"\n"
		"b2Vec2_Set(b2Vec2 self, float32 x_, float32 y_)\n"
		"\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { (char *)"b2Vec2___neg__", (PyCFunction)_wrap_b2Vec2___neg__, METH_O, (char *)"b2Vec2___neg__(b2Vec2 self) -> b2Vec2"},
	 { (char *)"b2Vec2_add_vector", _wrap_b2Vec2_add_vector, METH_VARARGS, (char *)"b2Vec2_add_vector(b2Vec2 self, b2Vec2 v)"},
	 { (char *)"b2Vec2_sub_vector", _wrap_b2Vec2_sub_vector, METH_VARARGS, (char *)"b2Vec2_sub_vector(b2Vec2 self, b2Vec2 v)"},
	 { (char *)"b2Vec2_mul_float", _wrap_b2Vec2_mul_float, METH_VARARGS, (char *)"b2Vec2_mul_float(b2Vec2 self, float32 a)"},
	 { (char *)"b2Vec2_Length", (PyCFunction)_wrap_b2Vec2_Length, METH_O, (char *)"\n"
		"b2Vec2_Length(b2Vec2 self) -> float32\n"
		"\n"
		"Get the length of this vector (the norm).\n"
		""},
	 { (char *)"b2Vec2_LengthSquared", (PyCFunction)_wrap_b2Vec2_LengthSquared, METH_O, (char *)"\n"
		"b2Vec2_LengthSquared(b2Vec2 self) -> float32\n"
		"\n"
		"Get the length squared. For performance, use this instead of  b2Vec2::Length(if possible).\n"
		""},
	 { (char *)"b2Vec2_Normalize", (PyCFunction)_wrap_b2Vec2_Normalize, METH_O, (char *)"\n"
		"b2Vec2_Normalize(b2Vec2 self) -> float32\n"
		"\n"
		"Convert this vector into a unit vector. Returns the length.\n"
		""},
	 { (char *)"b2Vec2_IsValid", (PyCFunction)_wrap_b2Vec2_IsValid, METH_O, (char *)"\n"
		"b2Vec2_IsValid(b2Vec2 self) -> bool\n"
		"\n"
		"Does this vector contain finite coordinates?\n"
		""},
	 { (char *)"b2Vec2_x_set", _wrap_b2Vec2_x_set, METH_VARARGS, (char *)"b2Vec2_x_set(b2Vec2 self, float32 x)"},
	 { (char *)"b2Vec2_x_get", (PyCFunction)_wrap_b2Vec2_x_get, METH_O, (char *)"b2Vec2_x_get(b2Vec2 self) -> float32"},
	 { (char *)"b2Vec2_y_set", _wrap_b2Vec2_y_set, METH_VARARGS, (char *)"b2Vec2_y_set(b2Vec2 self, float32 y)"},
	 { (char *)"b2Vec2_y_get", (PyCFunction)_wrap_b2Vec2_y_get, METH_O, (char *)"b2Vec2_y_get(b2Vec2 self) -> float32"},
	 { (char *)"new_b2Vec2", _wrap_new_b2Vec2, METH_VARARGS, (char *)"\n"
		"b2Vec2()\n"
		"b2Vec2(float32 x, float32 y)\n"
		"new_b2Vec2(b2Vec2 other) -> b2Vec2\n"
		"\n"
		"Construct using coordinates.\n"
		""},
	 { (char *)"b2Vec2_cross", _wrap_b2Vec2_cross, METH_VARARGS, (char *)"\n"
		"cross(b2Vec2 other) -> float32\n"
		"b2Vec2_cross(b2Vec2 self, float32 s) -> b2Vec2\n"
		""},
	 { (char *)"b2Vec2___getitem__", _wrap_b2Vec2___getitem__, METH_VARARGS, (char *)"b2Vec2___getitem__(b2Vec2 self, int i) -> float32"},
	 { (char *)"b2Vec2___setitem__", _wrap_b2Vec2___setitem__, METH_VARARGS, (char *)"b2Vec2___setitem__(b2Vec2 self, int i, float32 value)"},
	 { (char *)"b2Vec2___equ", _wrap_b2Vec2___equ, METH_VARARGS, (char *)"b2Vec2___equ(b2Vec2 self, b2Vec2 other) -> bool"},
	 { (char *)"b2Vec2_dot", _wrap_b2Vec2_dot, METH_VARARGS, (char *)"b2Vec2_dot(b2Vec2 self, b2Vec2 other) -> float32"},
	 { (char *)"b2Vec2___truediv__", _wrap_b2Vec2___truediv__, METH_VARARGS, (char *)"b2Vec2___truediv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { (char *)"b2Vec2___div__", _wrap_b2Vec2___div__, METH_VARARGS, (char *)"b2Vec2___div__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { (char *)"b2Vec2___mul__", _wrap_b2Vec2___mul__, METH_VARARGS, (char *)"b2Vec2___mul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { (char *)"b2Vec2___add__", _wrap_b2Vec2___add__, METH_VARARGS, (char *)"b2Vec2___add__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { (char *)"b2Vec2___sub__", _wrap_b2Vec2___sub__, METH_VARARGS, (char *)"b2Vec2___sub__(b2Vec2 self, b2Vec2 other) -> b2Vec2"},
	 { (char *)"b2Vec2___rmul__", _wrap_b2Vec2___rmul__, METH_VARARGS, (char *)"b2Vec2___rmul__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { (char *)"b2Vec2___rdiv__", _wrap_b2Vec2___rdiv__, METH_VARARGS, (char *)"b2Vec2___rdiv__(b2Vec2 self, float32 a) -> b2Vec2"},
	 { (char *)"b2Vec2___div_float", _wrap_b2Vec2___div_float, METH_VARARGS, (char *)"b2Vec2___div_float(b2Vec2 self, float32 a)"},
	 { (char *)"delete_b2Vec2", (PyCFunction)_wrap_delete_b2Vec2, METH_O, (char *)"delete_b2Vec2(b2Vec2 self)"},
	 { (char *)"b2Vec2_swigregister", b2Vec2_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Vec2_swiginit", b2Vec2_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2Vec3", _wrap_new_b2Vec3, METH_VARARGS, (char *)"\n"
		"b2Vec3()\n"
		"new_b2Vec3(float32 x, float32 y, float32 z) -> b2Vec3\n"
		"\n"
		"Construct using coordinates.\n"
		""},
	 { (char *)"b2Vec3_SetZero", (PyCFunction)_wrap_b2Vec3_SetZero, METH_O, (char *)"\n"
		"b2Vec3_SetZero(b2Vec3 self)\n"
		"\n"
		"Set this vector to all zeros.\n"
		""},
	 { (char *)"b2Vec3_Set", _wrap_b2Vec3_Set, METH_VARARGS, (char *)"\n"
		"b2Vec3_Set(b2Vec3 self, float32 x_, float32 y_, float32 z_)\n"
		"\n"
		"Set this vector to some specified coordinates.\n"
		""},
	 { (char *)"b2Vec3___neg__", (PyCFunction)_wrap_b2Vec3___neg__, METH_O, (char *)"b2Vec3___neg__(b2Vec3 self) -> b2Vec3"},
	 { (char *)"b2Vec3___iadd__", _wrap_b2Vec3___iadd__, METH_VARARGS, (char *)"b2Vec3___iadd__(b2Vec3 self, b2Vec3 v)"},
	 { (char *)"b2Vec3___isub__", _wrap_b2Vec3___isub__, METH_VARARGS, (char *)"b2Vec3___isub__(b2Vec3 self, b2Vec3 v)"},
	 { (char *)"b2Vec3___imul__", _wrap_b2Vec3___imul__, METH_VARARGS, (char *)"b2Vec3___imul__(b2Vec3 self, float32 s)"},
	 { (char *)"b2Vec3_x_set", _wrap_b2Vec3_x_set, METH_VARARGS, (char *)"b2Vec3_x_set(b2Vec3 self, float32 x)"},
	 { (char *)"b2Vec3_x_get", (PyCFunction)_wrap_b2Vec3_x_get, METH_O, (char *)"b2Vec3_x_get(b2Vec3 self) -> float32"},
	 { (char *)"b2Vec3_y_set", _wrap_b2Vec3_y_set, METH_VARARGS, (char *)"b2Vec3_y_set(b2Vec3 self, float32 y)"},
	 { (char *)"b2Vec3_y_get", (PyCFunction)_wrap_b2Vec3_y_get, METH_O, (char *)"b2Vec3_y_get(b2Vec3 self) -> float32"},
	 { (char *)"b2Vec3_z_set", _wrap_b2Vec3_z_set, METH_VARARGS, (char *)"b2Vec3_z_set(b2Vec3 self, float32 z)"},
	 { (char *)"b2Vec3_z_get", (PyCFunction)_wrap_b2Vec3_z_get, METH_O, (char *)"b2Vec3_z_get(b2Vec3 self) -> float32"},
	 { (char *)"delete_b2Vec3", (PyCFunction)_wrap_delete_b2Vec3, METH_O, (char *)"delete_b2Vec3(b2Vec3 self)"},
	 { (char *)"b2Vec3_swigregister", b2Vec3_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Vec3_swiginit", b2Vec3_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2Mat22", _wrap_new_b2Mat22, METH_VARARGS, (char *)"\n"
		"b2Mat22()\n"
		"b2Mat22(b2Vec2 c1, b2Vec2 c2)\n"
		"b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)\n"
		"new_b2Mat22(float32 angle) -> b2Mat22\n"
		"\n"
		"Construct this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { (char *)"b2Mat22_Set", _wrap_b2Mat22_Set, METH_VARARGS, (char *)"\n"
		"Set(b2Vec2 c1, b2Vec2 c2)\n"
		"b2Mat22_Set(b2Mat22 self, float32 angle)\n"
		"\n"
		"Initialize this matrix using an angle. This matrix becomes an orthonormal rotation matrix.\n"
		""},
	 { (char *)"b2Mat22_SetIdentity", (PyCFunction)_wrap_b2Mat22_SetIdentity, METH_O, (char *)"\n"
		"b2Mat22_SetIdentity(b2Mat22 self)\n"
		"\n"
		"Set this to the identity matrix.\n"
		""},
	 { (char *)"b2Mat22_SetZero", (PyCFunction)_wrap_b2Mat22_SetZero, METH_O, (char *)"\n"
		"b2Mat22_SetZero(b2Mat22 self)\n"
		"\n"
		"Set this matrix to all zeros.\n"
		""},
	 { (char *)"b2Mat22_GetAngle", (PyCFunction)_wrap_b2Mat22_GetAngle, METH_O, (char *)"\n"
		"b2Mat22_GetAngle(b2Mat22 self) -> float32\n"
		"\n"
		"Extract the angle from this matrix (assumed to be a rotation matrix).\n"
		""},
	 { (char *)"b2Mat22_GetInverse", (PyCFunction)_wrap_b2Mat22_GetInverse, METH_O, (char *)"b2Mat22_GetInverse(b2Mat22 self) -> b2Mat22"},
	 { (char *)"b2Mat22_Solve", _wrap_b2Mat22_Solve, METH_VARARGS, (char *)"\n"
		"b2Mat22_Solve(b2Mat22 self, b2Vec2 b) -> b2Vec2\n"
		"\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { (char *)"b2Mat22_col1_set", _wrap_b2Mat22_col1_set, METH_VARARGS, (char *)"b2Mat22_col1_set(b2Mat22 self, b2Vec2 col1)"},
	 { (char *)"b2Mat22_col1_get", (PyCFunction)_wrap_b2Mat22_col1_get, METH_O, (char *)"b2Mat22_col1_get(b2Mat22 self) -> b2Vec2"},
	 { (char *)"b2Mat22_col2_set", _wrap_b2Mat22_col2_set, METH_VARARGS, (char *)"b2Mat22_col2_set(b2Mat22 self, b2Vec2 col2)"},
	 { (char *)"b2Mat22_col2_get", (PyCFunction)_wrap_b2Mat22_col2_get, METH_O, (char *)"b2Mat22_col2_get(b2Mat22 self) -> b2Vec2"},
	 { (char *)"delete_b2Mat22", (PyCFunction)_wrap_delete_b2Mat22, METH_O, (char *)"delete_b2Mat22(b2Mat22 self)"},
	 { (char *)"b2Mat22_swigregister", b2Mat22_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Mat22_swiginit", b2Mat22_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2Mat33", _wrap_new_b2Mat33, METH_VARARGS, (char *)"\n"
		"b2Mat33()\n"
		"new_b2Mat33(b2Vec3 c1, b2Vec3 c2, b2Vec3 c3) -> b2Mat33\n"
		"\n"
		"Construct this matrix using columns.\n"
		""},
	 { (char *)"b2Mat33_SetZero", (PyCFunction)_wrap_b2Mat33_SetZero, METH_O, (char *)"\n"
		"b2Mat33_SetZero(b2Mat33 self)\n"
		"\n"
		"Set this matrix to all zeros.\n"
		""},
	 { (char *)"b2Mat33_Solve33", _wrap_b2Mat33_Solve33, METH_VARARGS, (char *)"\n"
		"b2Mat33_Solve33(b2Mat33 self, b2Vec3 b) -> b2Vec3\n"
		"\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		"\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { (char *)"b2Mat33_Solve22", _wrap_b2Mat33_Solve22, METH_VARARGS, (char *)"\n"
		"b2Mat33_Solve22(b2Mat33 self, b2Vec2 b) -> b2Vec2\n"
		"\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix equation.\n"
		"\n"
		"Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot cases.\n"
		""},
	 { (char *)"b2Mat33_col1_set", _wrap_b2Mat33_col1_set, METH_VARARGS, (char *)"b2Mat33_col1_set(b2Mat33 self, b2Vec3 col1)"},
	 { (char *)"b2Mat33_col1_get", (PyCFunction)_wrap_b2Mat33_col1_get, METH_O, (char *)"b2Mat33_col1_get(b2Mat33 self) -> b2Vec3"},
	 { (char *)"b2Mat33_col2_set", _wrap_b2Mat33_col2_set, METH_VARARGS, (char *)"b2Mat33_col2_set(b2Mat33 self, b2Vec3 col2)"},
	 { (char *)"b2Mat33_col2_get", (PyCFunction)_wrap_b2Mat33_col2_get, METH_O, (char *)"b2Mat33_col2_get(b2Mat33 self) -> b2Vec3"},
	 { (char *)"b2Mat33_col3_set", _wrap_b2Mat33_col3_set, METH_VARARGS, (char *)"b2Mat33_col3_set(b2Mat33 self, b2Vec3 col3)"},
	 { (char *)"b2Mat33_col3_get", (PyCFunction)_wrap_b2Mat33_col3_get, METH_O, (char *)"b2Mat33_col3_get(b2Mat33 self) -> b2Vec3"},
	 { (char *)"delete_b2Mat33", (PyCFunction)_wrap_delete_b2Mat33, METH_O, (char *)"delete_b2Mat33(b2Mat33 self)"},
	 { (char *)"b2Mat33_swigregister", b2Mat33_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Mat33_swiginit", b2Mat33_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2XForm", _wrap_new_b2XForm, METH_VARARGS, (char *)"\n"
		"b2XForm()\n"
		"new_b2XForm(b2Vec2 position, b2Mat22 R) -> b2XForm\n"
		"\n"
		"Initialize using a position vector and a rotation matrix.\n"
		""},
	 { (char *)"b2XForm_SetIdentity", (PyCFunction)_wrap_b2XForm_SetIdentity, METH_O, (char *)"\n"
		"b2XForm_SetIdentity(b2XForm self)\n"
		"\n"
		"Set this to the identity transform.\n"
		""},
	 { (char *)"b2XForm_position_set", _wrap_b2XForm_position_set, METH_VARARGS, (char *)"b2XForm_position_set(b2XForm self, b2Vec2 position)"},
	 { (char *)"b2XForm_position_get", (PyCFunction)_wrap_b2XForm_position_get, METH_O, (char *)"b2XForm_position_get(b2XForm self) -> b2Vec2"},
	 { (char *)"b2XForm_R_set", _wrap_b2XForm_R_set, METH_VARARGS, (char *)"b2XForm_R_set(b2XForm self, b2Mat22 R)"},
	 { (char *)"b2XForm_R_get", (PyCFunction)_wrap_b2XForm_R_get, METH_O, (char *)"b2XForm_R_get(b2XForm self) -> b2Mat22"},
	 { (char *)"delete_b2XForm", (PyCFunction)_wrap_delete_b2XForm, METH_O, (char *)"delete_b2XForm(b2XForm self)"},
	 { (char *)"b2XForm_swigregister", b2XForm_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2XForm_swiginit", b2XForm_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Sweep_GetXForm", _wrap_b2Sweep_GetXForm, METH_VARARGS, (char *)"\n"
		"b2Sweep_GetXForm(b2Sweep self, b2XForm xf, float32 t)\n"
		"\n"
		"Get the interpolated transform at a specific time.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"t: the normalized time in [0,1].\n"
		""},
	 { (char *)"b2Sweep_Advance", _wrap_b2Sweep_Advance, METH_VARARGS, (char *)"\n"
		"b2Sweep_Advance(b2Sweep self, float32 t)\n"
		"\n"
		"Advance the sweep forward, yielding a new initial state.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"t: the new initial time.\n"
		""},
	 { (char *)"b2Sweep_localCenter_set", _wrap_b2Sweep_localCenter_set, METH_VARARGS, (char *)"b2Sweep_localCenter_set(b2Sweep self, b2Vec2 localCenter)"},
	 { (char *)"b2Sweep_localCenter_get", (PyCFunction)_wrap_b2Sweep_localCenter_get, METH_O, (char *)"b2Sweep_localCenter_get(b2Sweep self) -> b2Vec2"},
	 { (char *)"b2Sweep_c0_set", _wrap_b2Sweep_c0_set, METH_VARARGS, (char *)"b2Sweep_c0_set(b2Sweep self, b2Vec2 c0)"},
	 { (char *)"b2Sweep_c0_get", (PyCFunction)_wrap_b2Sweep_c0_get, METH_O, (char *)"b2Sweep_c0_get(b2Sweep self) -> b2Vec2"},
	 { (char *)"b2Sweep_c_set", _wrap_b2Sweep_c_set, METH_VARARGS, (char *)"b2Sweep_c_set(b2Sweep self, b2Vec2 c)"},
	 { (char *)"b2Sweep_c_get", (PyCFunction)_wrap_b2Sweep_c_get, METH_O, (char *)"b2Sweep_c_get(b2Sweep self) -> b2Vec2"},
	 { (char *)"b2Sweep_a0_set", _wrap_b2Sweep_a0_set, METH_VARARGS, (char *)"b2Sweep_a0_set(b2Sweep self, float32 a0)"},
	 { (char *)"b2Sweep_a0_get", (PyCFunction)_wrap_b2Sweep_a0_get, METH_O, (char *)"b2Sweep_a0_get(b2Sweep self) -> float32"},
	 { (char *)"b2Sweep_a_set", _wrap_b2Sweep_a_set, METH_VARARGS, (char *)"b2Sweep_a_set(b2Sweep self, float32 a)"},
	 { (char *)"b2Sweep_a_get", (PyCFunction)_wrap_b2Sweep_a_get, METH_O, (char *)"b2Sweep_a_get(b2Sweep self) -> float32"},
	 { (char *)"b2Sweep_t0_set", _wrap_b2Sweep_t0_set, METH_VARARGS, (char *)"b2Sweep_t0_set(b2Sweep self, float32 t0)"},
	 { (char *)"b2Sweep_t0_get", (PyCFunction)_wrap_b2Sweep_t0_get, METH_O, (char *)"b2Sweep_t0_get(b2Sweep self) -> float32"},
	 { (char *)"new_b2Sweep", (PyCFunction)_wrap_new_b2Sweep, METH_NOARGS, (char *)"new_b2Sweep() -> b2Sweep"},
	 { (char *)"delete_b2Sweep", (PyCFunction)_wrap_delete_b2Sweep, METH_O, (char *)"delete_b2Sweep(b2Sweep self)"},
	 { (char *)"b2Sweep_swigregister", b2Sweep_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Sweep_swiginit", b2Sweep_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2equ", _wrap_b2equ, METH_VARARGS, (char *)"b2equ(b2Vec2 a, b2Vec2 b) -> bool"},
	 { (char *)"b2DistanceSquared", _wrap_b2DistanceSquared, METH_VARARGS, (char *)"b2DistanceSquared(b2Vec2 a, b2Vec2 b) -> float32"},
	 { (char *)"b2mul", _wrap_b2mul, METH_VARARGS, (char *)"\n"
		"b2mul(float32 s, b2Vec2 a) -> b2Vec2\n"
		"b2mul(float32 s, b2Vec3 a) -> b2Vec3\n"
		""},
	 { (char *)"b2sub", _wrap_b2sub, METH_VARARGS, (char *)"\n"
		"b2sub(b2Vec2 a, b2Vec2 b) -> b2Vec2\n"
		"b2sub(b2Vec3 a, b2Vec3 b) -> b2Vec3\n"
		""},
	 { (char *)"b2Dot", _wrap_b2Dot, METH_VARARGS, (char *)"\n"
		"b2Dot(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Dot(b2Vec3 a, b2Vec3 b) -> float32\n"
		"\n"
		"Perform the dot product on two vectors.\n"
		""},
	 { (char *)"b2Cross", _wrap_b2Cross, METH_VARARGS, (char *)"\n"
		"b2Cross(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Cross(b2Vec2 a, float32 s) -> b2Vec2\n"
		"b2Cross(float32 s, b2Vec2 a) -> b2Vec2\n"
		"b2Cross(b2Vec3 a, b2Vec3 b) -> b2Vec3\n"
		"\n"
		"Perform the cross product on two vectors.\n"
		""},
	 { (char *)"b2add", _wrap_b2add, METH_VARARGS, (char *)"\n"
		"b2add(b2Vec2 a, b2Vec2 b) -> b2Vec2\n"
		"b2add(b2Vec3 a, b2Vec3 b) -> b2Vec3\n"
		"b2add(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		""},
	 { (char *)"b2Mul", _wrap_b2Mul, METH_VARARGS, (char *)"\n"
		"b2Mul(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2Mul(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2Mul(b2Mat33 A, b2Vec3 v) -> b2Vec3\n"
		"b2Mul(b2XForm T, b2Vec2 v) -> b2Vec2\n"
		"\n"
		"Multiply a matrix times a vector.\n"
		""},
	 { (char *)"b2MulT", _wrap_b2MulT, METH_VARARGS, (char *)"\n"
		"b2MulT(b2Mat22 A, b2Vec2 v) -> b2Vec2\n"
		"b2MulT(b2Mat22 A, b2Mat22 B) -> b2Mat22\n"
		"b2MulT(b2XForm T, b2Vec2 v) -> b2Vec2\n"
		"\n"
		"Multiply a matrix transpose times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another (inverse transform).\n"
		""},
	 { (char *)"b2Abs", _wrap_b2Abs, METH_VARARGS, (char *)"\n"
		"b2Abs(float32 a) -> float32\n"
		"b2Abs(b2Vec2 a) -> b2Vec2\n"
		"b2Abs(b2Mat22 A) -> b2Mat22\n"
		""},
	 { (char *)"b2Min", _wrap_b2Min, METH_VARARGS, (char *)"b2Min(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { (char *)"b2Max", _wrap_b2Max, METH_VARARGS, (char *)"b2Max(b2Vec2 a, b2Vec2 b) -> b2Vec2"},
	 { (char *)"b2Clamp", _wrap_b2Clamp, METH_VARARGS, (char *)"b2Clamp(b2Vec2 a, b2Vec2 low, b2Vec2 high) -> b2Vec2"},
	 { (char *)"b2NextPowerOfTwo", (PyCFunction)_wrap_b2NextPowerOfTwo, METH_O, (char *)"\n"
		"b2NextPowerOfTwo(uint32 x) -> uint32\n"
		"\n"
		"\"Next Largest Power of 2 Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the upper bits into the lower bits. This process yields a bit vector with the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next largest power of 2. For a 32-bit value:\"\n"
		""},
	 { (char *)"b2IsPowerOfTwo", (PyCFunction)_wrap_b2IsPowerOfTwo, METH_O, (char *)"b2IsPowerOfTwo(uint32 x) -> bool"},
	 { (char *)"b2Jacobian_linear1_set", _wrap_b2Jacobian_linear1_set, METH_VARARGS, (char *)"b2Jacobian_linear1_set(b2Jacobian self, b2Vec2 linear1)"},
	 { (char *)"b2Jacobian_linear1_get", (PyCFunction)_wrap_b2Jacobian_linear1_get, METH_O, (char *)"b2Jacobian_linear1_get(b2Jacobian self) -> b2Vec2"},
	 { (char *)"b2Jacobian_angular1_set", _wrap_b2Jacobian_angular1_set, METH_VARARGS, (char *)"b2Jacobian_angular1_set(b2Jacobian self, float32 angular1)"},
	 { (char *)"b2Jacobian_angular1_get", (PyCFunction)_wrap_b2Jacobian_angular1_get, METH_O, (char *)"b2Jacobian_angular1_get(b2Jacobian self) -> float32"},
	 { (char *)"b2Jacobian_linear2_set", _wrap_b2Jacobian_linear2_set, METH_VARARGS, (char *)"b2Jacobian_linear2_set(b2Jacobian self, b2Vec2 linear2)"},
	 { (char *)"b2Jacobian_linear2_get", (PyCFunction)_wrap_b2Jacobian_linear2_get, METH_O, (char *)"b2Jacobian_linear2_get(b2Jacobian self) -> b2Vec2"},
	 { (char *)"b2Jacobian_angular2_set", _wrap_b2Jacobian_angular2_set, METH_VARARGS, (char *)"b2Jacobian_angular2_set(b2Jacobian self, float32 angular2)"},
	 { (char *)"b2Jacobian_angular2_get", (PyCFunction)_wrap_b2Jacobian_angular2_get, METH_O, (char *)"b2Jacobian_angular2_get(b2Jacobian self) -> float32"},
	 { (char *)"b2Jacobian_SetZero", (PyCFunction)_wrap_b2Jacobian_SetZero, METH_O, (char *)"b2Jacobian_SetZero(b2Jacobian self)"},
	 { (char *)"b2Jacobian_Set", _wrap_b2Jacobian_Set, METH_VARARGS, (char *)"\n"
		"b2Jacobian_Set(b2Jacobian self, b2Vec2 x1, float32 a1, b2Vec2 x2, \n"
		"    float32 a2)\n"
		""},
	 { (char *)"b2Jacobian_Compute", _wrap_b2Jacobian_Compute, METH_VARARGS, (char *)"\n"
		"b2Jacobian_Compute(b2Jacobian self, b2Vec2 x1, float32 a1, b2Vec2 x2, \n"
		"    float32 a2) -> float32\n"
		""},
	 { (char *)"new_b2Jacobian", (PyCFunction)_wrap_new_b2Jacobian, METH_NOARGS, (char *)"new_b2Jacobian() -> b2Jacobian"},
	 { (char *)"delete_b2Jacobian", (PyCFunction)_wrap_delete_b2Jacobian, METH_O, (char *)"delete_b2Jacobian(b2Jacobian self)"},
	 { (char *)"b2Jacobian_swigregister", b2Jacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Jacobian_swiginit", b2Jacobian_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2JointEdge_other_set", _wrap_b2JointEdge_other_set, METH_VARARGS, (char *)"b2JointEdge_other_set(b2JointEdge self, b2Body other)"},
	 { (char *)"b2JointEdge_other_get", (PyCFunction)_wrap_b2JointEdge_other_get, METH_O, (char *)"b2JointEdge_other_get(b2JointEdge self) -> b2Body"},
	 { (char *)"b2JointEdge_joint_set", _wrap_b2JointEdge_joint_set, METH_VARARGS, (char *)"b2JointEdge_joint_set(b2JointEdge self, b2Joint joint)"},
	 { (char *)"b2JointEdge_joint_get", (PyCFunction)_wrap_b2JointEdge_joint_get, METH_O, (char *)"b2JointEdge_joint_get(b2JointEdge self) -> b2Joint"},
	 { (char *)"b2JointEdge_prev_set", _wrap_b2JointEdge_prev_set, METH_VARARGS, (char *)"b2JointEdge_prev_set(b2JointEdge self, b2JointEdge prev)"},
	 { (char *)"b2JointEdge_prev_get", (PyCFunction)_wrap_b2JointEdge_prev_get, METH_O, (char *)"b2JointEdge_prev_get(b2JointEdge self) -> b2JointEdge"},
	 { (char *)"b2JointEdge_next_set", _wrap_b2JointEdge_next_set, METH_VARARGS, (char *)"b2JointEdge_next_set(b2JointEdge self, b2JointEdge next)"},
	 { (char *)"b2JointEdge_next_get", (PyCFunction)_wrap_b2JointEdge_next_get, METH_O, (char *)"b2JointEdge_next_get(b2JointEdge self) -> b2JointEdge"},
	 { (char *)"new_b2JointEdge", (PyCFunction)_wrap_new_b2JointEdge, METH_NOARGS, (char *)"new_b2JointEdge() -> b2JointEdge"},
	 { (char *)"delete_b2JointEdge", (PyCFunction)_wrap_delete_b2JointEdge, METH_O, (char *)"delete_b2JointEdge(b2JointEdge self)"},
	 { (char *)"b2JointEdge_swigregister", b2JointEdge_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2JointEdge_swiginit", b2JointEdge_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2JointDef", (PyCFunction)_wrap_new_b2JointDef, METH_NOARGS, (char *)"\n"
		"new_b2JointDef() -> b2JointDef\n"
		"\n"
		"Joint definitions are used to construct joints.\n"
		""},
	 { (char *)"b2JointDef_type_set", _wrap_b2JointDef_type_set, METH_VARARGS, (char *)"b2JointDef_type_set(b2JointDef self, b2JointType type)"},
	 { (char *)"b2JointDef_type_get", (PyCFunction)_wrap_b2JointDef_type_get, METH_O, (char *)"b2JointDef_type_get(b2JointDef self) -> b2JointType"},
	 { (char *)"b2JointDef_body1_set", _wrap_b2JointDef_body1_set, METH_VARARGS, (char *)"b2JointDef_body1_set(b2JointDef self, b2Body body1)"},
	 { (char *)"b2JointDef_body1_get", (PyCFunction)_wrap_b2JointDef_body1_get, METH_O, (char *)"b2JointDef_body1_get(b2JointDef self) -> b2Body"},
	 { (char *)"b2JointDef_body2_set", _wrap_b2JointDef_body2_set, METH_VARARGS, (char *)"b2JointDef_body2_set(b2JointDef self, b2Body body2)"},
	 { (char *)"b2JointDef_body2_get", (PyCFunction)_wrap_b2JointDef_body2_get, METH_O, (char *)"b2JointDef_body2_get(b2JointDef self) -> b2Body"},
	 { (char *)"b2JointDef_collideConnected_set", _wrap_b2JointDef_collideConnected_set, METH_VARARGS, (char *)"b2JointDef_collideConnected_set(b2JointDef self, bool collideConnected)"},
	 { (char *)"b2JointDef_collideConnected_get", (PyCFunction)_wrap_b2JointDef_collideConnected_get, METH_O, (char *)"b2JointDef_collideConnected_get(b2JointDef self) -> bool"},
	 { (char *)"b2JointDef_GetUserData", (PyCFunction)_wrap_b2JointDef_GetUserData, METH_O, (char *)"b2JointDef_GetUserData(b2JointDef self) -> PyObject"},
	 { (char *)"b2JointDef_SetUserData", _wrap_b2JointDef_SetUserData, METH_VARARGS, (char *)"b2JointDef_SetUserData(b2JointDef self, PyObject data)"},
	 { (char *)"b2JointDef_ClearUserData", (PyCFunction)_wrap_b2JointDef_ClearUserData, METH_O, (char *)"b2JointDef_ClearUserData(b2JointDef self)"},
	 { (char *)"delete_b2JointDef", (PyCFunction)_wrap_delete_b2JointDef, METH_O, (char *)"delete_b2JointDef(b2JointDef self)"},
	 { (char *)"b2JointDef_swigregister", b2JointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2JointDef_swiginit", b2JointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Joint_GetType", (PyCFunction)_wrap_b2Joint_GetType, METH_O, (char *)"\n"
		"b2Joint_GetType(b2Joint self) -> b2JointType\n"
		"\n"
		"Get the type of the concrete joint.\n"
		""},
	 { (char *)"b2Joint_GetBody1", (PyCFunction)_wrap_b2Joint_GetBody1, METH_O, (char *)"\n"
		"b2Joint_GetBody1(b2Joint self) -> b2Body\n"
		"\n"
		"Get the first body attached to this joint.\n"
		""},
	 { (char *)"b2Joint_GetBody2", (PyCFunction)_wrap_b2Joint_GetBody2, METH_O, (char *)"\n"
		"b2Joint_GetBody2(b2Joint self) -> b2Body\n"
		"\n"
		"Get the second body attached to this joint.\n"
		""},
	 { (char *)"b2Joint_GetAnchor1", (PyCFunction)_wrap_b2Joint_GetAnchor1, METH_O, (char *)"\n"
		"b2Joint_GetAnchor1(b2Joint self) -> b2Vec2\n"
		"\n"
		"Get the anchor point on body1 in world coordinates.\n"
		""},
	 { (char *)"b2Joint_GetAnchor2", (PyCFunction)_wrap_b2Joint_GetAnchor2, METH_O, (char *)"\n"
		"b2Joint_GetAnchor2(b2Joint self) -> b2Vec2\n"
		"\n"
		"Get the anchor point on body2 in world coordinates.\n"
		""},
	 { (char *)"b2Joint_GetReactionForce", _wrap_b2Joint_GetReactionForce, METH_VARARGS, (char *)"\n"
		"b2Joint_GetReactionForce(b2Joint self, float32 inv_dt) -> b2Vec2\n"
		"\n"
		"Get the reaction force on body2 at the joint anchor.\n"
		""},
	 { (char *)"b2Joint_GetReactionTorque", _wrap_b2Joint_GetReactionTorque, METH_VARARGS, (char *)"\n"
		"b2Joint_GetReactionTorque(b2Joint self, float32 inv_dt) -> float32\n"
		"\n"
		"Get the reaction torque on body2.\n"
		""},
	 { (char *)"b2Joint_GetNext", (PyCFunction)_wrap_b2Joint_GetNext, METH_O, (char *)"\n"
		"b2Joint_GetNext(b2Joint self) -> b2Joint\n"
		"\n"
		"Get the next joint the world joint list.\n"
		""},
	 { (char *)"b2Joint_GetCollideConnected", (PyCFunction)_wrap_b2Joint_GetCollideConnected, METH_O, (char *)"\n"
		"b2Joint_GetCollideConnected(b2Joint self) -> bool\n"
		"\n"
		"Get whether or not joint bodies can collide.\n"
		""},
	 { (char *)"b2Joint_GetUserData", (PyCFunction)_wrap_b2Joint_GetUserData, METH_O, (char *)"\n"
		"b2Joint_GetUserData(b2Joint self) -> PyObject\n"
		"\n"
		"Get the user data pointer.\n"
		""},
	 { (char *)"b2Joint_SetUserData", _wrap_b2Joint_SetUserData, METH_VARARGS, (char *)"\n"
		"b2Joint_SetUserData(b2Joint self, PyObject data)\n"
		"\n"
		"Set the user data pointer.\n"
		""},
	 { (char *)"b2Joint_ClearUserData", (PyCFunction)_wrap_b2Joint_ClearUserData, METH_O, (char *)"b2Joint_ClearUserData(b2Joint self)"},
	 { (char *)"b2Joint___hash__", (PyCFunction)_wrap_b2Joint___hash__, METH_O, (char *)"b2Joint___hash__(b2Joint self) -> long"},
	 { (char *)"b2Joint_asMouseJoint", (PyCFunction)_wrap_b2Joint_asMouseJoint, METH_O, (char *)"b2Joint_asMouseJoint(b2Joint self) -> b2MouseJoint"},
	 { (char *)"b2Joint_asGearJoint", (PyCFunction)_wrap_b2Joint_asGearJoint, METH_O, (char *)"b2Joint_asGearJoint(b2Joint self) -> b2GearJoint"},
	 { (char *)"b2Joint_asDistanceJoint", (PyCFunction)_wrap_b2Joint_asDistanceJoint, METH_O, (char *)"b2Joint_asDistanceJoint(b2Joint self) -> b2DistanceJoint"},
	 { (char *)"b2Joint_asPrismaticJoint", (PyCFunction)_wrap_b2Joint_asPrismaticJoint, METH_O, (char *)"b2Joint_asPrismaticJoint(b2Joint self) -> b2PrismaticJoint"},
	 { (char *)"b2Joint_asPulleyJoint", (PyCFunction)_wrap_b2Joint_asPulleyJoint, METH_O, (char *)"b2Joint_asPulleyJoint(b2Joint self) -> b2PulleyJoint"},
	 { (char *)"b2Joint_asRevoluteJoint", (PyCFunction)_wrap_b2Joint_asRevoluteJoint, METH_O, (char *)"b2Joint_asRevoluteJoint(b2Joint self) -> b2RevoluteJoint"},
	 { (char *)"b2Joint_asLineJoint", (PyCFunction)_wrap_b2Joint_asLineJoint, METH_O, (char *)"b2Joint_asLineJoint(b2Joint self) -> b2LineJoint"},
	 { (char *)"b2Joint_swigregister", b2Joint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Distance", _wrap_b2Distance, METH_VARARGS, (char *)"\n"
		"b2Distance(b2Vec2 a, b2Vec2 b) -> float32\n"
		"b2Distance(b2Shape shape1, b2XForm xf1, b2Shape shape2, b2XForm xf2) -> PyObject\n"
		"\n"
		"Compute the distance between two shapes and the closest points. \n"
		"the distance between the shapes or zero if they are overlapped/touching.\n"
		""},
	 { (char *)"_downcasted_shape", (PyCFunction)_wrap__downcasted_shape, METH_O, (char *)"_downcasted_shape(b2Shape shape) -> PyObject"},
	 { (char *)"b2AABBOverlaps", _wrap_b2AABBOverlaps, METH_VARARGS, (char *)"\n"
		"b2AABBOverlaps(b2AABB aabb, b2Vec2 point) -> bool\n"
		"b2AABBOverlaps(b2AABB aabb, b2AABB aabb2) -> bool\n"
		"\n"
		"Checks if two AABBs overlap, or if a point\n"
		"    lies in an AABB\n"
		"    \n"
		"    b2AABBOverlaps(AABB1, [AABB2/point])\n"
		"    \n"
		""},
	 { (char *)"__b2ComputeCentroid", _wrap___b2ComputeCentroid, METH_VARARGS, (char *)"__b2ComputeCentroid(b2Vec2 vs, int32 count) -> b2Vec2"},
	 { (char *)"__b2ComputeOBB", _wrap___b2ComputeOBB, METH_VARARGS, (char *)"__b2ComputeOBB(b2OBB obb, b2Vec2 vs, int32 count) -> bool"},
	 { (char *)"b2CheckPolygonDef", _wrap_b2CheckPolygonDef, METH_VARARGS, (char *)"\n"
		"b2CheckPolygonDef(b2PolygonDef poly, bool additional_checks = True) -> bool\n"
		"b2CheckPolygonDef(b2PolygonDef poly) -> bool\n"
		"\n"
		"Checks the Polygon definition to see if upon creation it will cause an assertion.\n"
		"Raises ValueError if an assertion would be raised.\n"
		"\n"
		"b2PolygonDef* poly     - the polygon definition\n"
		"bool additional_checks - whether or not to run additional checks\n"
		"\n"
		"Additional checking: usually only in DEBUG mode on the C++ code.\n"
		"\n"
		"While shapes that pass this test can be created without assertions,\n"
		"they will ultimately create unexpected behavior. It's recommended\n"
		"to _not_ use any polygon that fails this test.\n"
		"\n"
		""},
	 { (char *)"b2Random", _wrap_b2Random, METH_VARARGS, (char *)"\n"
		"b2Random() -> float32\n"
		"b2Random(float32 lo, float32 hi) -> float32\n"
		"\n"
		"Random floating point number in range [lo, hi]. With no arguments, returns one in -1,1.\n"
		""},
	 { (char *)"collideCircleParticle", _wrap_collideCircleParticle, METH_VARARGS, (char *)"\n"
		"collideCircleParticle(b2CircleShape circle, b2Vec2 ppos) -> PyObject\n"
		"\n"
		"For liquid simulation. Checks if a particle\n"
		"would collide with the specified circle.\n"
		"\n"
		""},
	 { (char *)"b2CollidePolyParticle", _wrap_b2CollidePolyParticle, METH_VARARGS, (char *)"\n"
		"b2CollidePolyParticle(b2PolygonShape polygon, b2Vec2 ppos, float32 pradius) -> PyObject\n"
		"\n"
		"For liquid simulation. Checks if a particle\n"
		"would collide with the specified polygon.\n"
		"\n"
		""},
	 { (char *)"b2ContactID_features_set", _wrap_b2ContactID_features_set, METH_VARARGS, (char *)"b2ContactID_features_set(b2ContactID self, Features features)"},
	 { (char *)"b2ContactID_features_get", (PyCFunction)_wrap_b2ContactID_features_get, METH_O, (char *)"b2ContactID_features_get(b2ContactID self) -> Features"},
	 { (char *)"b2ContactID_key_set", _wrap_b2ContactID_key_set, METH_VARARGS, (char *)"b2ContactID_key_set(b2ContactID self, uint32 key)"},
	 { (char *)"b2ContactID_key_get", (PyCFunction)_wrap_b2ContactID_key_get, METH_O, (char *)"b2ContactID_key_get(b2ContactID self) -> uint32"},
	 { (char *)"new_b2ContactID", (PyCFunction)_wrap_new_b2ContactID, METH_NOARGS, (char *)"new_b2ContactID() -> b2ContactID"},
	 { (char *)"delete_b2ContactID", (PyCFunction)_wrap_delete_b2ContactID, METH_O, (char *)"delete_b2ContactID(b2ContactID self)"},
	 { (char *)"b2ContactID_swigregister", b2ContactID_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactID_swiginit", b2ContactID_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ManifoldPoint_localPoint1_set", _wrap_b2ManifoldPoint_localPoint1_set, METH_VARARGS, (char *)"b2ManifoldPoint_localPoint1_set(b2ManifoldPoint self, b2Vec2 localPoint1)"},
	 { (char *)"b2ManifoldPoint_localPoint1_get", (PyCFunction)_wrap_b2ManifoldPoint_localPoint1_get, METH_O, (char *)"b2ManifoldPoint_localPoint1_get(b2ManifoldPoint self) -> b2Vec2"},
	 { (char *)"b2ManifoldPoint_localPoint2_set", _wrap_b2ManifoldPoint_localPoint2_set, METH_VARARGS, (char *)"b2ManifoldPoint_localPoint2_set(b2ManifoldPoint self, b2Vec2 localPoint2)"},
	 { (char *)"b2ManifoldPoint_localPoint2_get", (PyCFunction)_wrap_b2ManifoldPoint_localPoint2_get, METH_O, (char *)"b2ManifoldPoint_localPoint2_get(b2ManifoldPoint self) -> b2Vec2"},
	 { (char *)"b2ManifoldPoint_separation_set", _wrap_b2ManifoldPoint_separation_set, METH_VARARGS, (char *)"b2ManifoldPoint_separation_set(b2ManifoldPoint self, float32 separation)"},
	 { (char *)"b2ManifoldPoint_separation_get", (PyCFunction)_wrap_b2ManifoldPoint_separation_get, METH_O, (char *)"b2ManifoldPoint_separation_get(b2ManifoldPoint self) -> float32"},
	 { (char *)"b2ManifoldPoint_normalImpulse_set", _wrap_b2ManifoldPoint_normalImpulse_set, METH_VARARGS, (char *)"b2ManifoldPoint_normalImpulse_set(b2ManifoldPoint self, float32 normalImpulse)"},
	 { (char *)"b2ManifoldPoint_normalImpulse_get", (PyCFunction)_wrap_b2ManifoldPoint_normalImpulse_get, METH_O, (char *)"b2ManifoldPoint_normalImpulse_get(b2ManifoldPoint self) -> float32"},
	 { (char *)"b2ManifoldPoint_tangentImpulse_set", _wrap_b2ManifoldPoint_tangentImpulse_set, METH_VARARGS, (char *)"b2ManifoldPoint_tangentImpulse_set(b2ManifoldPoint self, float32 tangentImpulse)"},
	 { (char *)"b2ManifoldPoint_tangentImpulse_get", (PyCFunction)_wrap_b2ManifoldPoint_tangentImpulse_get, METH_O, (char *)"b2ManifoldPoint_tangentImpulse_get(b2ManifoldPoint self) -> float32"},
	 { (char *)"b2ManifoldPoint_id_set", _wrap_b2ManifoldPoint_id_set, METH_VARARGS, (char *)"b2ManifoldPoint_id_set(b2ManifoldPoint self, b2ContactID id)"},
	 { (char *)"b2ManifoldPoint_id_get", (PyCFunction)_wrap_b2ManifoldPoint_id_get, METH_O, (char *)"b2ManifoldPoint_id_get(b2ManifoldPoint self) -> b2ContactID"},
	 { (char *)"new_b2ManifoldPoint", (PyCFunction)_wrap_new_b2ManifoldPoint, METH_NOARGS, (char *)"new_b2ManifoldPoint() -> b2ManifoldPoint"},
	 { (char *)"delete_b2ManifoldPoint", (PyCFunction)_wrap_delete_b2ManifoldPoint, METH_O, (char *)"delete_b2ManifoldPoint(b2ManifoldPoint self)"},
	 { (char *)"b2ManifoldPoint_swigregister", b2ManifoldPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ManifoldPoint_swiginit", b2ManifoldPoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Manifold_points_set", _wrap_b2Manifold_points_set, METH_VARARGS, (char *)"b2Manifold_points_set(b2Manifold self, b2ManifoldPoint points)"},
	 { (char *)"b2Manifold_points_get", (PyCFunction)_wrap_b2Manifold_points_get, METH_O, (char *)"b2Manifold_points_get(b2Manifold self) -> b2ManifoldPoint"},
	 { (char *)"b2Manifold_normal_set", _wrap_b2Manifold_normal_set, METH_VARARGS, (char *)"b2Manifold_normal_set(b2Manifold self, b2Vec2 normal)"},
	 { (char *)"b2Manifold_normal_get", (PyCFunction)_wrap_b2Manifold_normal_get, METH_O, (char *)"b2Manifold_normal_get(b2Manifold self) -> b2Vec2"},
	 { (char *)"b2Manifold_pointCount_set", _wrap_b2Manifold_pointCount_set, METH_VARARGS, (char *)"b2Manifold_pointCount_set(b2Manifold self, int32 pointCount)"},
	 { (char *)"b2Manifold_pointCount_get", (PyCFunction)_wrap_b2Manifold_pointCount_get, METH_O, (char *)"b2Manifold_pointCount_get(b2Manifold self) -> int32"},
	 { (char *)"new_b2Manifold", (PyCFunction)_wrap_new_b2Manifold, METH_NOARGS, (char *)"new_b2Manifold() -> b2Manifold"},
	 { (char *)"delete_b2Manifold", (PyCFunction)_wrap_delete_b2Manifold, METH_O, (char *)"delete_b2Manifold(b2Manifold self)"},
	 { (char *)"b2Manifold_swigregister", b2Manifold_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Manifold_swiginit", b2Manifold_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Segment_TestSegment", _wrap_b2Segment_TestSegment, METH_VARARGS, (char *)"\n"
		"b2Segment_TestSegment(b2Segment self, float32 _lambda, b2Vec2 normal, b2Segment segment, \n"
		"    float32 maxLambda) -> bool\n"
		"\n"
		"Ray cast against this segment with another segment.\n"
		""},
	 { (char *)"b2Segment_p1_set", _wrap_b2Segment_p1_set, METH_VARARGS, (char *)"b2Segment_p1_set(b2Segment self, b2Vec2 p1)"},
	 { (char *)"b2Segment_p1_get", (PyCFunction)_wrap_b2Segment_p1_get, METH_O, (char *)"b2Segment_p1_get(b2Segment self) -> b2Vec2"},
	 { (char *)"b2Segment_p2_set", _wrap_b2Segment_p2_set, METH_VARARGS, (char *)"b2Segment_p2_set(b2Segment self, b2Vec2 p2)"},
	 { (char *)"b2Segment_p2_get", (PyCFunction)_wrap_b2Segment_p2_get, METH_O, (char *)"b2Segment_p2_get(b2Segment self) -> b2Vec2"},
	 { (char *)"new_b2Segment", (PyCFunction)_wrap_new_b2Segment, METH_NOARGS, (char *)"new_b2Segment() -> b2Segment"},
	 { (char *)"delete_b2Segment", (PyCFunction)_wrap_delete_b2Segment, METH_O, (char *)"delete_b2Segment(b2Segment self)"},
	 { (char *)"b2Segment_swigregister", b2Segment_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Segment_swiginit", b2Segment_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2AABB_IsValid", (PyCFunction)_wrap_b2AABB_IsValid, METH_O, (char *)"\n"
		"b2AABB_IsValid(b2AABB self) -> bool\n"
		"\n"
		"Verify that the bounds are sorted.\n"
		""},
	 { (char *)"b2AABB_lowerBound_set", _wrap_b2AABB_lowerBound_set, METH_VARARGS, (char *)"b2AABB_lowerBound_set(b2AABB self, b2Vec2 lowerBound)"},
	 { (char *)"b2AABB_lowerBound_get", (PyCFunction)_wrap_b2AABB_lowerBound_get, METH_O, (char *)"b2AABB_lowerBound_get(b2AABB self) -> b2Vec2"},
	 { (char *)"b2AABB_upperBound_set", _wrap_b2AABB_upperBound_set, METH_VARARGS, (char *)"b2AABB_upperBound_set(b2AABB self, b2Vec2 upperBound)"},
	 { (char *)"b2AABB_upperBound_get", (PyCFunction)_wrap_b2AABB_upperBound_get, METH_O, (char *)"b2AABB_upperBound_get(b2AABB self) -> b2Vec2"},
	 { (char *)"new_b2AABB", (PyCFunction)_wrap_new_b2AABB, METH_NOARGS, (char *)"new_b2AABB() -> b2AABB"},
	 { (char *)"delete_b2AABB", (PyCFunction)_wrap_delete_b2AABB, METH_O, (char *)"delete_b2AABB(b2AABB self)"},
	 { (char *)"b2AABB_swigregister", b2AABB_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2AABB_swiginit", b2AABB_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2OBB_R_set", _wrap_b2OBB_R_set, METH_VARARGS, (char *)"b2OBB_R_set(b2OBB self, b2Mat22 R)"},
	 { (char *)"b2OBB_R_get", (PyCFunction)_wrap_b2OBB_R_get, METH_O, (char *)"b2OBB_R_get(b2OBB self) -> b2Mat22"},
	 { (char *)"b2OBB_center_set", _wrap_b2OBB_center_set, METH_VARARGS, (char *)"b2OBB_center_set(b2OBB self, b2Vec2 center)"},
	 { (char *)"b2OBB_center_get", (PyCFunction)_wrap_b2OBB_center_get, METH_O, (char *)"b2OBB_center_get(b2OBB self) -> b2Vec2"},
	 { (char *)"b2OBB_extents_set", _wrap_b2OBB_extents_set, METH_VARARGS, (char *)"b2OBB_extents_set(b2OBB self, b2Vec2 extents)"},
	 { (char *)"b2OBB_extents_get", (PyCFunction)_wrap_b2OBB_extents_get, METH_O, (char *)"b2OBB_extents_get(b2OBB self) -> b2Vec2"},
	 { (char *)"new_b2OBB", (PyCFunction)_wrap_new_b2OBB, METH_NOARGS, (char *)"new_b2OBB() -> b2OBB"},
	 { (char *)"delete_b2OBB", (PyCFunction)_wrap_delete_b2OBB, METH_O, (char *)"delete_b2OBB(b2OBB self)"},
	 { (char *)"b2OBB_swigregister", b2OBB_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2OBB_swiginit", b2OBB_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2CollideCircles", _wrap_b2CollideCircles, METH_VARARGS, (char *)"\n"
		"b2CollideCircles(b2Manifold manifold, b2CircleShape circle1, b2XForm xf1, \n"
		"    b2CircleShape circle2, b2XForm xf2)\n"
		"\n"
		"Compute the collision manifold between two circles.\n"
		""},
	 { (char *)"b2CollidePolygonAndCircle", _wrap_b2CollidePolygonAndCircle, METH_VARARGS, (char *)"\n"
		"b2CollidePolygonAndCircle(b2Manifold manifold, b2PolygonShape polygon, b2XForm xf1, \n"
		"    b2CircleShape circle, b2XForm xf2)\n"
		"\n"
		"Compute the collision manifold between a polygon and a circle.\n"
		""},
	 { (char *)"b2CollidePolygons", _wrap_b2CollidePolygons, METH_VARARGS, (char *)"\n"
		"b2CollidePolygons(b2Manifold manifold, b2PolygonShape polygon1, b2XForm xf1, \n"
		"    b2PolygonShape polygon2, b2XForm xf2)\n"
		"\n"
		"Compute the collision manifold between two circles.\n"
		""},
	 { (char *)"__b2Distance__", _wrap___b2Distance__, METH_VARARGS, (char *)"\n"
		"__b2Distance__(b2Vec2 x1, b2Vec2 x2, b2Shape shape1, b2XForm xf1, \n"
		"    b2Shape shape2, b2XForm xf2) -> float32\n"
		"\n"
		"Compute the distance between two shapes and the closest points. \n"
		"the distance between the shapes or zero if they are overlapped/touching.\n"
		""},
	 { (char *)"b2TimeOfImpact", _wrap_b2TimeOfImpact, METH_VARARGS, (char *)"\n"
		"b2TimeOfImpact(b2Shape shape1, b2Sweep sweep1, b2Shape shape2, b2Sweep sweep2) -> float32\n"
		"\n"
		"Compute the time when two shapes begin to touch or touch at a closer distance. \n"
		"WARNING: \n"
		"the sweeps must have the same time interval.\n"
		"\n"
		"the fraction between [0,1] in which the shapes first touch. fraction=0 means the shapes begin touching/overlapped, and fraction=1 means the shapes don't touch.\n"
		""},
	 { (char *)"b2TestOverlap", _wrap_b2TestOverlap, METH_VARARGS, (char *)"b2TestOverlap(b2AABB a, b2AABB b) -> bool"},
	 { (char *)"b2MassData_mass_set", _wrap_b2MassData_mass_set, METH_VARARGS, (char *)"b2MassData_mass_set(b2MassData self, float32 mass)"},
	 { (char *)"b2MassData_mass_get", (PyCFunction)_wrap_b2MassData_mass_get, METH_O, (char *)"b2MassData_mass_get(b2MassData self) -> float32"},
	 { (char *)"b2MassData_center_set", _wrap_b2MassData_center_set, METH_VARARGS, (char *)"b2MassData_center_set(b2MassData self, b2Vec2 center)"},
	 { (char *)"b2MassData_center_get", (PyCFunction)_wrap_b2MassData_center_get, METH_O, (char *)"b2MassData_center_get(b2MassData self) -> b2Vec2"},
	 { (char *)"b2MassData_I_set", _wrap_b2MassData_I_set, METH_VARARGS, (char *)"b2MassData_I_set(b2MassData self, float32 I)"},
	 { (char *)"b2MassData_I_get", (PyCFunction)_wrap_b2MassData_I_get, METH_O, (char *)"b2MassData_I_get(b2MassData self) -> float32"},
	 { (char *)"new_b2MassData", (PyCFunction)_wrap_new_b2MassData, METH_NOARGS, (char *)"new_b2MassData() -> b2MassData"},
	 { (char *)"delete_b2MassData", (PyCFunction)_wrap_delete_b2MassData, METH_O, (char *)"delete_b2MassData(b2MassData self)"},
	 { (char *)"b2MassData_swigregister", b2MassData_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2MassData_swiginit", b2MassData_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2FilterData_categoryBits_set", _wrap_b2FilterData_categoryBits_set, METH_VARARGS, (char *)"b2FilterData_categoryBits_set(b2FilterData self, uint16 categoryBits)"},
	 { (char *)"b2FilterData_categoryBits_get", (PyCFunction)_wrap_b2FilterData_categoryBits_get, METH_O, (char *)"b2FilterData_categoryBits_get(b2FilterData self) -> uint16"},
	 { (char *)"b2FilterData_maskBits_set", _wrap_b2FilterData_maskBits_set, METH_VARARGS, (char *)"b2FilterData_maskBits_set(b2FilterData self, uint16 maskBits)"},
	 { (char *)"b2FilterData_maskBits_get", (PyCFunction)_wrap_b2FilterData_maskBits_get, METH_O, (char *)"b2FilterData_maskBits_get(b2FilterData self) -> uint16"},
	 { (char *)"b2FilterData_groupIndex_set", _wrap_b2FilterData_groupIndex_set, METH_VARARGS, (char *)"b2FilterData_groupIndex_set(b2FilterData self, int16 groupIndex)"},
	 { (char *)"b2FilterData_groupIndex_get", (PyCFunction)_wrap_b2FilterData_groupIndex_get, METH_O, (char *)"b2FilterData_groupIndex_get(b2FilterData self) -> int16"},
	 { (char *)"new_b2FilterData", (PyCFunction)_wrap_new_b2FilterData, METH_NOARGS, (char *)"new_b2FilterData() -> b2FilterData"},
	 { (char *)"delete_b2FilterData", (PyCFunction)_wrap_delete_b2FilterData, METH_O, (char *)"delete_b2FilterData(b2FilterData self)"},
	 { (char *)"b2FilterData_swigregister", b2FilterData_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2FilterData_swiginit", b2FilterData_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2ShapeDef", (PyCFunction)_wrap_new_b2ShapeDef, METH_NOARGS, (char *)"\n"
		"new_b2ShapeDef() -> b2ShapeDef\n"
		"\n"
		"The constructor sets the default shape definition values.\n"
		""},
	 { (char *)"delete_b2ShapeDef", (PyCFunction)_wrap_delete_b2ShapeDef, METH_O, (char *)"delete_b2ShapeDef(b2ShapeDef self)"},
	 { (char *)"b2ShapeDef_type_set", _wrap_b2ShapeDef_type_set, METH_VARARGS, (char *)"b2ShapeDef_type_set(b2ShapeDef self, b2ShapeType type)"},
	 { (char *)"b2ShapeDef_type_get", (PyCFunction)_wrap_b2ShapeDef_type_get, METH_O, (char *)"b2ShapeDef_type_get(b2ShapeDef self) -> b2ShapeType"},
	 { (char *)"b2ShapeDef_friction_set", _wrap_b2ShapeDef_friction_set, METH_VARARGS, (char *)"b2ShapeDef_friction_set(b2ShapeDef self, float32 friction)"},
	 { (char *)"b2ShapeDef_friction_get", (PyCFunction)_wrap_b2ShapeDef_friction_get, METH_O, (char *)"b2ShapeDef_friction_get(b2ShapeDef self) -> float32"},
	 { (char *)"b2ShapeDef_restitution_set", _wrap_b2ShapeDef_restitution_set, METH_VARARGS, (char *)"b2ShapeDef_restitution_set(b2ShapeDef self, float32 restitution)"},
	 { (char *)"b2ShapeDef_restitution_get", (PyCFunction)_wrap_b2ShapeDef_restitution_get, METH_O, (char *)"b2ShapeDef_restitution_get(b2ShapeDef self) -> float32"},
	 { (char *)"b2ShapeDef_density_set", _wrap_b2ShapeDef_density_set, METH_VARARGS, (char *)"b2ShapeDef_density_set(b2ShapeDef self, float32 density)"},
	 { (char *)"b2ShapeDef_density_get", (PyCFunction)_wrap_b2ShapeDef_density_get, METH_O, (char *)"b2ShapeDef_density_get(b2ShapeDef self) -> float32"},
	 { (char *)"b2ShapeDef_isSensor_set", _wrap_b2ShapeDef_isSensor_set, METH_VARARGS, (char *)"b2ShapeDef_isSensor_set(b2ShapeDef self, bool isSensor)"},
	 { (char *)"b2ShapeDef_isSensor_get", (PyCFunction)_wrap_b2ShapeDef_isSensor_get, METH_O, (char *)"b2ShapeDef_isSensor_get(b2ShapeDef self) -> bool"},
	 { (char *)"b2ShapeDef_filter_set", _wrap_b2ShapeDef_filter_set, METH_VARARGS, (char *)"b2ShapeDef_filter_set(b2ShapeDef self, b2FilterData filter)"},
	 { (char *)"b2ShapeDef_filter_get", (PyCFunction)_wrap_b2ShapeDef_filter_get, METH_O, (char *)"b2ShapeDef_filter_get(b2ShapeDef self) -> b2FilterData"},
	 { (char *)"b2ShapeDef_GetUserData", (PyCFunction)_wrap_b2ShapeDef_GetUserData, METH_O, (char *)"b2ShapeDef_GetUserData(b2ShapeDef self) -> PyObject"},
	 { (char *)"b2ShapeDef_SetUserData", _wrap_b2ShapeDef_SetUserData, METH_VARARGS, (char *)"b2ShapeDef_SetUserData(b2ShapeDef self, PyObject data)"},
	 { (char *)"b2ShapeDef_ClearUserData", (PyCFunction)_wrap_b2ShapeDef_ClearUserData, METH_O, (char *)"b2ShapeDef_ClearUserData(b2ShapeDef self)"},
	 { (char *)"b2ShapeDef_swigregister", b2ShapeDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ShapeDef_swiginit", b2ShapeDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Shape_GetType", (PyCFunction)_wrap_b2Shape_GetType, METH_O, (char *)"\n"
		"b2Shape_GetType(b2Shape self) -> b2ShapeType\n"
		"\n"
		"Get the type of this shape. You can use this to down cast to the concrete shape. \n"
		"the shape type.\n"
		""},
	 { (char *)"b2Shape_IsSensor", (PyCFunction)_wrap_b2Shape_IsSensor, METH_O, (char *)"\n"
		"b2Shape_IsSensor(b2Shape self) -> bool\n"
		"\n"
		"Is this shape a sensor (non-solid)? \n"
		"the true if the shape is a sensor.\n"
		""},
	 { (char *)"b2Shape_SetSensor", _wrap_b2Shape_SetSensor, METH_VARARGS, (char *)"b2Shape_SetSensor(b2Shape self, bool sensor)"},
	 { (char *)"b2Shape_SetFilterData", _wrap_b2Shape_SetFilterData, METH_VARARGS, (char *)"\n"
		"b2Shape_SetFilterData(b2Shape self, b2FilterData filter)\n"
		"\n"
		"Set the contact filtering data. You must call  b2World::Refilterto correct existing contacts/non-contacts.\n"
		""},
	 { (char *)"b2Shape_GetFilterData", (PyCFunction)_wrap_b2Shape_GetFilterData, METH_O, (char *)"\n"
		"b2Shape_GetFilterData(b2Shape self) -> b2FilterData\n"
		"\n"
		"Get the contact filtering data.\n"
		""},
	 { (char *)"b2Shape_GetBody", (PyCFunction)_wrap_b2Shape_GetBody, METH_O, (char *)"\n"
		"b2Shape_GetBody(b2Shape self) -> b2Body\n"
		"\n"
		"Get the parent body of this shape. This is NULL if the shape is not attached. \n"
		"the parent body.\n"
		""},
	 { (char *)"b2Shape_GetNext", (PyCFunction)_wrap_b2Shape_GetNext, METH_O, (char *)"\n"
		"b2Shape_GetNext(b2Shape self) -> b2Shape\n"
		"\n"
		"Get the next shape in the parent body's shape list. \n"
		"the next shape.\n"
		""},
	 { (char *)"b2Shape_TestPoint", _wrap_b2Shape_TestPoint, METH_VARARGS, (char *)"\n"
		"b2Shape_TestPoint(b2Shape self, b2XForm xf, b2Vec2 p) -> bool\n"
		"\n"
		"Test a point for containment in this shape. This only works for convex shapes.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: the shape world transform.\n"
		"\n"
		"p: a point in world coordinates.\n"
		""},
	 { (char *)"b2Shape_ComputeAABB", _wrap_b2Shape_ComputeAABB, METH_VARARGS, (char *)"\n"
		"b2Shape_ComputeAABB(b2Shape self, b2AABB aabb, b2XForm xf)\n"
		"\n"
		"Given a transform, compute the associated axis aligned bounding box for this shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"aabb: returns the axis aligned box.\n"
		"\n"
		"xf: the world transform of the shape.\n"
		""},
	 { (char *)"b2Shape_ComputeSweptAABB", _wrap_b2Shape_ComputeSweptAABB, METH_VARARGS, (char *)"\n"
		"b2Shape_ComputeSweptAABB(b2Shape self, b2AABB aabb, b2XForm xf1, b2XForm xf2)\n"
		"\n"
		"Given two transforms, compute the associated swept axis aligned bounding box for this shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"aabb: returns the axis aligned box.\n"
		"\n"
		"xf1: the starting shape world transform.\n"
		"\n"
		"xf2: the ending shape world transform.\n"
		""},
	 { (char *)"b2Shape_ComputeMass", _wrap_b2Shape_ComputeMass, METH_VARARGS, (char *)"\n"
		"b2Shape_ComputeMass(b2Shape self, b2MassData massData)\n"
		"\n"
		"Compute the mass properties of this shape using its dimensions and density. The inertia tensor is computed about the local origin, not the centroid.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: returns the mass data for this shape.\n"
		""},
	 { (char *)"b2Shape_ComputeSubmergedArea", _wrap_b2Shape_ComputeSubmergedArea, METH_VARARGS, (char *)"\n"
		"b2Shape_ComputeSubmergedArea(b2Shape self, b2Vec2 normal, float32 offset, b2XForm xf, \n"
		"    b2Vec2 c) -> float32\n"
		"\n"
		"Compute the volume and centroid of this shape intersected with a half plane\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"normal: the surface normal\n"
		"\n"
		"offset: the surface offset along normal\n"
		"\n"
		"xf: the shape transform\n"
		"\n"
		"c: returns the centroid\n"
		"\n"
		"the total volume less than offset along normal\n"
		""},
	 { (char *)"b2Shape_GetSweepRadius", (PyCFunction)_wrap_b2Shape_GetSweepRadius, METH_O, (char *)"\n"
		"b2Shape_GetSweepRadius(b2Shape self) -> float32\n"
		"\n"
		"Get the maximum radius about the parent body's center of mass.\n"
		""},
	 { (char *)"b2Shape_GetFriction", (PyCFunction)_wrap_b2Shape_GetFriction, METH_O, (char *)"\n"
		"b2Shape_GetFriction(b2Shape self) -> float32\n"
		"\n"
		"Get the coefficient of friction.\n"
		""},
	 { (char *)"b2Shape_SetFriction", _wrap_b2Shape_SetFriction, METH_VARARGS, (char *)"\n"
		"b2Shape_SetFriction(b2Shape self, float32 friction)\n"
		"\n"
		"Set the coefficient of friction.\n"
		""},
	 { (char *)"b2Shape_GetRestitution", (PyCFunction)_wrap_b2Shape_GetRestitution, METH_O, (char *)"\n"
		"b2Shape_GetRestitution(b2Shape self) -> float32\n"
		"\n"
		"Get the coefficient of restitution.\n"
		""},
	 { (char *)"b2Shape_SetRestitution", _wrap_b2Shape_SetRestitution, METH_VARARGS, (char *)"\n"
		"b2Shape_SetRestitution(b2Shape self, float32 restitution)\n"
		"\n"
		"Set the coefficient of restitution.\n"
		""},
	 { (char *)"b2Shape_GetDensity", (PyCFunction)_wrap_b2Shape_GetDensity, METH_O, (char *)"\n"
		"b2Shape_GetDensity(b2Shape self) -> float32\n"
		"\n"
		"Get the density of the shape.\n"
		""},
	 { (char *)"b2Shape_SetDensity", _wrap_b2Shape_SetDensity, METH_VARARGS, (char *)"\n"
		"b2Shape_SetDensity(b2Shape self, float32 density)\n"
		"\n"
		"Set the density of the shape.\n"
		""},
	 { (char *)"b2Shape_GetUserData", (PyCFunction)_wrap_b2Shape_GetUserData, METH_O, (char *)"\n"
		"b2Shape_GetUserData(b2Shape self) -> PyObject\n"
		"\n"
		"Get the user data that was assigned in the shape definition. Use this to store your application specific data.\n"
		""},
	 { (char *)"b2Shape_SetUserData", _wrap_b2Shape_SetUserData, METH_VARARGS, (char *)"\n"
		"b2Shape_SetUserData(b2Shape self, PyObject data)\n"
		"\n"
		"Set the user data. Use this to store your application specific data.\n"
		""},
	 { (char *)"b2Shape_ClearUserData", (PyCFunction)_wrap_b2Shape_ClearUserData, METH_O, (char *)"b2Shape_ClearUserData(b2Shape self)"},
	 { (char *)"b2Shape___hash__", (PyCFunction)_wrap_b2Shape___hash__, METH_O, (char *)"b2Shape___hash__(b2Shape self) -> long"},
	 { (char *)"b2Shape_TestSegment", _wrap_b2Shape_TestSegment, METH_VARARGS, (char *)"\n"
		"TestSegment(b2XForm xf, float32 _lambda, b2Vec2 normal, b2Segment segment, \n"
		"    float32 maxLambda) -> b2SegmentCollide\n"
		"b2Shape_TestSegment(b2Shape self, b2XForm xf, b2Segment segment, float32 maxLambda) -> PyObject\n"
		"\n"
		"Perform a ray cast against this shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: \n"
		"the shape world transform.\n"
		"\n"
		"lambda: \n"
		"returns the hit fraction. You can use this to compute the contact point p = (1 - lambda) * segment.p1 + lambda * segment.p2.\n"
		"\n"
		"normal: \n"
		"returns the normal at the contact point. If there is no intersection, the normal is not set.\n"
		"\n"
		"segment: \n"
		"defines the begin and end point of the ray cast.\n"
		"\n"
		"maxLambda: \n"
		"a number typically in the range [0,1].\n"
		""},
	 { (char *)"b2Shape_asCircle", (PyCFunction)_wrap_b2Shape_asCircle, METH_O, (char *)"b2Shape_asCircle(b2Shape self) -> b2CircleShape"},
	 { (char *)"b2Shape_asPolygon", (PyCFunction)_wrap_b2Shape_asPolygon, METH_O, (char *)"b2Shape_asPolygon(b2Shape self) -> b2PolygonShape"},
	 { (char *)"b2Shape_asEdge", (PyCFunction)_wrap_b2Shape_asEdge, METH_O, (char *)"b2Shape_asEdge(b2Shape self) -> b2EdgeShape"},
	 { (char *)"b2Shape_swigregister", b2Shape_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2CircleDef", (PyCFunction)_wrap_new_b2CircleDef, METH_NOARGS, (char *)"\n"
		"new_b2CircleDef() -> b2CircleDef\n"
		"\n"
		"This structure is used to build circle shapes.\n"
		""},
	 { (char *)"b2CircleDef_localPosition_set", _wrap_b2CircleDef_localPosition_set, METH_VARARGS, (char *)"b2CircleDef_localPosition_set(b2CircleDef self, b2Vec2 localPosition)"},
	 { (char *)"b2CircleDef_localPosition_get", (PyCFunction)_wrap_b2CircleDef_localPosition_get, METH_O, (char *)"b2CircleDef_localPosition_get(b2CircleDef self) -> b2Vec2"},
	 { (char *)"b2CircleDef_radius_set", _wrap_b2CircleDef_radius_set, METH_VARARGS, (char *)"b2CircleDef_radius_set(b2CircleDef self, float32 radius)"},
	 { (char *)"b2CircleDef_radius_get", (PyCFunction)_wrap_b2CircleDef_radius_get, METH_O, (char *)"b2CircleDef_radius_get(b2CircleDef self) -> float32"},
	 { (char *)"delete_b2CircleDef", (PyCFunction)_wrap_delete_b2CircleDef, METH_O, (char *)"delete_b2CircleDef(b2CircleDef self)"},
	 { (char *)"b2CircleDef_swigregister", b2CircleDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2CircleDef_swiginit", b2CircleDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2CircleShape_GetLocalPosition", (PyCFunction)_wrap_b2CircleShape_GetLocalPosition, METH_O, (char *)"\n"
		"b2CircleShape_GetLocalPosition(b2CircleShape self) -> b2Vec2\n"
		"\n"
		"Get the local position of this circle in its parent body.\n"
		""},
	 { (char *)"b2CircleShape_GetRadius", (PyCFunction)_wrap_b2CircleShape_GetRadius, METH_O, (char *)"\n"
		"b2CircleShape_GetRadius(b2CircleShape self) -> float32\n"
		"\n"
		"Get the radius of this circle.\n"
		""},
	 { (char *)"delete_b2CircleShape", (PyCFunction)_wrap_delete_b2CircleShape, METH_O, (char *)"delete_b2CircleShape(b2CircleShape self)"},
	 { (char *)"b2CircleShape_swigregister", b2CircleShape_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2PolygonDef", (PyCFunction)_wrap_new_b2PolygonDef, METH_NOARGS, (char *)"\n"
		"new_b2PolygonDef() -> b2PolygonDef\n"
		"\n"
		"Convex polygon. The vertices must be in CCW order for a right-handed coordinate system with the z-axis coming out of the screen.\n"
		""},
	 { (char *)"b2PolygonDef_SetAsBox", _wrap_b2PolygonDef_SetAsBox, METH_VARARGS, (char *)"\n"
		"SetAsBox(float32 hx, float32 hy)\n"
		"b2PolygonDef_SetAsBox(b2PolygonDef self, float32 hx, float32 hy, b2Vec2 center, \n"
		"    float32 angle)\n"
		"\n"
		"Build vertices to represent an oriented box.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"hx: the half-width.\n"
		"\n"
		"hy: the half-height.\n"
		"\n"
		"center: \n"
		"the center of the box in local coordinates.\n"
		"\n"
		"angle: \n"
		"the rotation of the box in local coordinates.\n"
		""},
	 { (char *)"b2PolygonDef_vertexCount_set", _wrap_b2PolygonDef_vertexCount_set, METH_VARARGS, (char *)"b2PolygonDef_vertexCount_set(b2PolygonDef self, int32 vertexCount)"},
	 { (char *)"b2PolygonDef_vertexCount_get", (PyCFunction)_wrap_b2PolygonDef_vertexCount_get, METH_O, (char *)"b2PolygonDef_vertexCount_get(b2PolygonDef self) -> int32"},
	 { (char *)"b2PolygonDef_getVertex", _wrap_b2PolygonDef_getVertex, METH_VARARGS, (char *)"b2PolygonDef_getVertex(b2PolygonDef self, uint16 vnum) -> b2Vec2"},
	 { (char *)"b2PolygonDef_setVertex", _wrap_b2PolygonDef_setVertex, METH_VARARGS, (char *)"\n"
		"setVertex(uint16 vnum, b2Vec2 value)\n"
		"b2PolygonDef_setVertex(b2PolygonDef self, uint16 vnum, float32 x, float32 y)\n"
		""},
	 { (char *)"delete_b2PolygonDef", (PyCFunction)_wrap_delete_b2PolygonDef, METH_O, (char *)"delete_b2PolygonDef(b2PolygonDef self)"},
	 { (char *)"b2PolygonDef_swigregister", b2PolygonDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PolygonDef_swiginit", b2PolygonDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2PolygonShape_GetOBB", (PyCFunction)_wrap_b2PolygonShape_GetOBB, METH_O, (char *)"\n"
		"b2PolygonShape_GetOBB(b2PolygonShape self) -> b2OBB\n"
		"\n"
		"Get the oriented bounding box relative to the parent body.\n"
		""},
	 { (char *)"b2PolygonShape_GetCentroid", (PyCFunction)_wrap_b2PolygonShape_GetCentroid, METH_O, (char *)"\n"
		"b2PolygonShape_GetCentroid(b2PolygonShape self) -> b2Vec2\n"
		"\n"
		"Get local centroid relative to the parent body.\n"
		""},
	 { (char *)"b2PolygonShape_GetVertexCount", (PyCFunction)_wrap_b2PolygonShape_GetVertexCount, METH_O, (char *)"\n"
		"b2PolygonShape_GetVertexCount(b2PolygonShape self) -> int32\n"
		"\n"
		"Get the vertex count.\n"
		""},
	 { (char *)"b2PolygonShape_GetCoreVertices", (PyCFunction)_wrap_b2PolygonShape_GetCoreVertices, METH_O, (char *)"\n"
		"b2PolygonShape_GetCoreVertices(b2PolygonShape self) -> b2Vec2\n"
		"\n"
		"Get the core vertices in local coordinates. These vertices represent a smaller polygon that is used for time of impact computations.\n"
		""},
	 { (char *)"b2PolygonShape_GetFirstVertex", _wrap_b2PolygonShape_GetFirstVertex, METH_VARARGS, (char *)"\n"
		"b2PolygonShape_GetFirstVertex(b2PolygonShape self, b2XForm xf) -> b2Vec2\n"
		"\n"
		"Get the first vertex and apply the supplied transform.\n"
		""},
	 { (char *)"b2PolygonShape_Centroid", _wrap_b2PolygonShape_Centroid, METH_VARARGS, (char *)"\n"
		"b2PolygonShape_Centroid(b2PolygonShape self, b2XForm xf) -> b2Vec2\n"
		"\n"
		"Get the centroid and apply the supplied transform.\n"
		""},
	 { (char *)"b2PolygonShape_Support", _wrap_b2PolygonShape_Support, METH_VARARGS, (char *)"\n"
		"b2PolygonShape_Support(b2PolygonShape self, b2XForm xf, b2Vec2 d) -> b2Vec2\n"
		"\n"
		"Get the support point in the given world direction. Use the supplied transform.\n"
		""},
	 { (char *)"b2PolygonShape_getVertex", _wrap_b2PolygonShape_getVertex, METH_VARARGS, (char *)"b2PolygonShape_getVertex(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { (char *)"b2PolygonShape_getCoreVertex", _wrap_b2PolygonShape_getCoreVertex, METH_VARARGS, (char *)"b2PolygonShape_getCoreVertex(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { (char *)"b2PolygonShape_getNormal", _wrap_b2PolygonShape_getNormal, METH_VARARGS, (char *)"b2PolygonShape_getNormal(b2PolygonShape self, uint16 vnum) -> b2Vec2"},
	 { (char *)"delete_b2PolygonShape", (PyCFunction)_wrap_delete_b2PolygonShape, METH_O, (char *)"delete_b2PolygonShape(b2PolygonShape self)"},
	 { (char *)"b2PolygonShape_swigregister", b2PolygonShape_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2EdgeChainDef", (PyCFunction)_wrap_new_b2EdgeChainDef, METH_NOARGS, (char *)"\n"
		"new_b2EdgeChainDef() -> b2EdgeChainDef\n"
		"\n"
		"This structure is used to build edge shapes.\n"
		""},
	 { (char *)"b2EdgeChainDef_vertexCount_set", _wrap_b2EdgeChainDef_vertexCount_set, METH_VARARGS, (char *)"b2EdgeChainDef_vertexCount_set(b2EdgeChainDef self, int32 vertexCount)"},
	 { (char *)"b2EdgeChainDef_vertexCount_get", (PyCFunction)_wrap_b2EdgeChainDef_vertexCount_get, METH_O, (char *)"b2EdgeChainDef_vertexCount_get(b2EdgeChainDef self) -> int32"},
	 { (char *)"b2EdgeChainDef_isALoop_set", _wrap_b2EdgeChainDef_isALoop_set, METH_VARARGS, (char *)"b2EdgeChainDef_isALoop_set(b2EdgeChainDef self, bool isALoop)"},
	 { (char *)"b2EdgeChainDef_isALoop_get", (PyCFunction)_wrap_b2EdgeChainDef_isALoop_get, METH_O, (char *)"b2EdgeChainDef_isALoop_get(b2EdgeChainDef self) -> bool"},
	 { (char *)"b2EdgeChainDef__cleanUp", (PyCFunction)_wrap_b2EdgeChainDef__cleanUp, METH_O, (char *)"b2EdgeChainDef__cleanUp(b2EdgeChainDef self)"},
	 { (char *)"b2EdgeChainDef__allocateVertices", _wrap_b2EdgeChainDef__allocateVertices, METH_VARARGS, (char *)"b2EdgeChainDef__allocateVertices(b2EdgeChainDef self, uint16 _count)"},
	 { (char *)"b2EdgeChainDef_getVertex", _wrap_b2EdgeChainDef_getVertex, METH_VARARGS, (char *)"b2EdgeChainDef_getVertex(b2EdgeChainDef self, uint16 vnum) -> b2Vec2"},
	 { (char *)"b2EdgeChainDef_setVertex", _wrap_b2EdgeChainDef_setVertex, METH_VARARGS, (char *)"\n"
		"setVertex(uint16 vnum, b2Vec2 value)\n"
		"b2EdgeChainDef_setVertex(b2EdgeChainDef self, uint16 vnum, float32 x, float32 y)\n"
		""},
	 { (char *)"delete_b2EdgeChainDef", (PyCFunction)_wrap_delete_b2EdgeChainDef, METH_O, (char *)"delete_b2EdgeChainDef(b2EdgeChainDef self)"},
	 { (char *)"b2EdgeChainDef_swigregister", b2EdgeChainDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2EdgeChainDef_swiginit", b2EdgeChainDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2EdgeShape_GetLength", (PyCFunction)_wrap_b2EdgeShape_GetLength, METH_O, (char *)"\n"
		"b2EdgeShape_GetLength(b2EdgeShape self) -> float32\n"
		"\n"
		"Linear distance from vertex1 to vertex2:.\n"
		""},
	 { (char *)"b2EdgeShape_GetVertex1", (PyCFunction)_wrap_b2EdgeShape_GetVertex1, METH_O, (char *)"\n"
		"b2EdgeShape_GetVertex1(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"Local position of vertex in parent body.\n"
		""},
	 { (char *)"b2EdgeShape_GetVertex2", (PyCFunction)_wrap_b2EdgeShape_GetVertex2, METH_O, (char *)"\n"
		"b2EdgeShape_GetVertex2(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"Local position of vertex in parent body.\n"
		""},
	 { (char *)"b2EdgeShape_GetCoreVertex1", (PyCFunction)_wrap_b2EdgeShape_GetCoreVertex1, METH_O, (char *)"\n"
		"b2EdgeShape_GetCoreVertex1(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"\"Core\" vertex with TOI slop for b2Distance functions:\n"
		""},
	 { (char *)"b2EdgeShape_GetCoreVertex2", (PyCFunction)_wrap_b2EdgeShape_GetCoreVertex2, METH_O, (char *)"\n"
		"b2EdgeShape_GetCoreVertex2(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"\"Core\" vertex with TOI slop for b2Distance functions:\n"
		""},
	 { (char *)"b2EdgeShape_GetNormalVector", (PyCFunction)_wrap_b2EdgeShape_GetNormalVector, METH_O, (char *)"\n"
		"b2EdgeShape_GetNormalVector(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"Perpendicular unit vector point, pointing from the solid side to the empty side:.\n"
		""},
	 { (char *)"b2EdgeShape_GetDirectionVector", (PyCFunction)_wrap_b2EdgeShape_GetDirectionVector, METH_O, (char *)"\n"
		"b2EdgeShape_GetDirectionVector(b2EdgeShape self) -> b2Vec2\n"
		"\n"
		"Parallel unit vector, pointing from vertex1 to vertex2:.\n"
		""},
	 { (char *)"b2EdgeShape_GetCorner1Vector", (PyCFunction)_wrap_b2EdgeShape_GetCorner1Vector, METH_O, (char *)"b2EdgeShape_GetCorner1Vector(b2EdgeShape self) -> b2Vec2"},
	 { (char *)"b2EdgeShape_GetCorner2Vector", (PyCFunction)_wrap_b2EdgeShape_GetCorner2Vector, METH_O, (char *)"b2EdgeShape_GetCorner2Vector(b2EdgeShape self) -> b2Vec2"},
	 { (char *)"b2EdgeShape_Corner1IsConvex", (PyCFunction)_wrap_b2EdgeShape_Corner1IsConvex, METH_O, (char *)"b2EdgeShape_Corner1IsConvex(b2EdgeShape self) -> bool"},
	 { (char *)"b2EdgeShape_Corner2IsConvex", (PyCFunction)_wrap_b2EdgeShape_Corner2IsConvex, METH_O, (char *)"b2EdgeShape_Corner2IsConvex(b2EdgeShape self) -> bool"},
	 { (char *)"b2EdgeShape_GetFirstVertex", _wrap_b2EdgeShape_GetFirstVertex, METH_VARARGS, (char *)"b2EdgeShape_GetFirstVertex(b2EdgeShape self, b2XForm xf) -> b2Vec2"},
	 { (char *)"b2EdgeShape_Support", _wrap_b2EdgeShape_Support, METH_VARARGS, (char *)"b2EdgeShape_Support(b2EdgeShape self, b2XForm xf, b2Vec2 d) -> b2Vec2"},
	 { (char *)"b2EdgeShape_GetNextEdge", (PyCFunction)_wrap_b2EdgeShape_GetNextEdge, METH_O, (char *)"\n"
		"b2EdgeShape_GetNextEdge(b2EdgeShape self) -> b2EdgeShape\n"
		"\n"
		"Get the next edge in the chain.\n"
		""},
	 { (char *)"b2EdgeShape_GetPrevEdge", (PyCFunction)_wrap_b2EdgeShape_GetPrevEdge, METH_O, (char *)"\n"
		"b2EdgeShape_GetPrevEdge(b2EdgeShape self) -> b2EdgeShape\n"
		"\n"
		"Get the previous edge in the chain.\n"
		""},
	 { (char *)"b2EdgeShape_SetPrevEdge", _wrap_b2EdgeShape_SetPrevEdge, METH_VARARGS, (char *)"\n"
		"b2EdgeShape_SetPrevEdge(b2EdgeShape self, b2EdgeShape edge, b2Vec2 core, b2Vec2 cornerDir, \n"
		"    bool convex)\n"
		""},
	 { (char *)"b2EdgeShape_SetNextEdge", _wrap_b2EdgeShape_SetNextEdge, METH_VARARGS, (char *)"\n"
		"b2EdgeShape_SetNextEdge(b2EdgeShape self, b2EdgeShape edge, b2Vec2 core, b2Vec2 cornerDir, \n"
		"    bool convex)\n"
		""},
	 { (char *)"delete_b2EdgeShape", (PyCFunction)_wrap_delete_b2EdgeShape, METH_O, (char *)"delete_b2EdgeShape(b2EdgeShape self)"},
	 { (char *)"b2EdgeShape_swigregister", b2EdgeShape_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Pair_SetBuffered", (PyCFunction)_wrap_b2Pair_SetBuffered, METH_O, (char *)"b2Pair_SetBuffered(b2Pair self)"},
	 { (char *)"b2Pair_ClearBuffered", (PyCFunction)_wrap_b2Pair_ClearBuffered, METH_O, (char *)"b2Pair_ClearBuffered(b2Pair self)"},
	 { (char *)"b2Pair_IsBuffered", (PyCFunction)_wrap_b2Pair_IsBuffered, METH_O, (char *)"b2Pair_IsBuffered(b2Pair self) -> bool"},
	 { (char *)"b2Pair_SetRemoved", (PyCFunction)_wrap_b2Pair_SetRemoved, METH_O, (char *)"b2Pair_SetRemoved(b2Pair self)"},
	 { (char *)"b2Pair_ClearRemoved", (PyCFunction)_wrap_b2Pair_ClearRemoved, METH_O, (char *)"b2Pair_ClearRemoved(b2Pair self)"},
	 { (char *)"b2Pair_IsRemoved", (PyCFunction)_wrap_b2Pair_IsRemoved, METH_O, (char *)"b2Pair_IsRemoved(b2Pair self) -> bool"},
	 { (char *)"b2Pair_SetFinal", (PyCFunction)_wrap_b2Pair_SetFinal, METH_O, (char *)"b2Pair_SetFinal(b2Pair self)"},
	 { (char *)"b2Pair_IsFinal", (PyCFunction)_wrap_b2Pair_IsFinal, METH_O, (char *)"b2Pair_IsFinal(b2Pair self) -> bool"},
	 { (char *)"b2Pair_proxyId1_set", _wrap_b2Pair_proxyId1_set, METH_VARARGS, (char *)"b2Pair_proxyId1_set(b2Pair self, uint16 proxyId1)"},
	 { (char *)"b2Pair_proxyId1_get", (PyCFunction)_wrap_b2Pair_proxyId1_get, METH_O, (char *)"b2Pair_proxyId1_get(b2Pair self) -> uint16"},
	 { (char *)"b2Pair_proxyId2_set", _wrap_b2Pair_proxyId2_set, METH_VARARGS, (char *)"b2Pair_proxyId2_set(b2Pair self, uint16 proxyId2)"},
	 { (char *)"b2Pair_proxyId2_get", (PyCFunction)_wrap_b2Pair_proxyId2_get, METH_O, (char *)"b2Pair_proxyId2_get(b2Pair self) -> uint16"},
	 { (char *)"b2Pair_next_set", _wrap_b2Pair_next_set, METH_VARARGS, (char *)"b2Pair_next_set(b2Pair self, uint16 next)"},
	 { (char *)"b2Pair_next_get", (PyCFunction)_wrap_b2Pair_next_get, METH_O, (char *)"b2Pair_next_get(b2Pair self) -> uint16"},
	 { (char *)"b2Pair_status_set", _wrap_b2Pair_status_set, METH_VARARGS, (char *)"b2Pair_status_set(b2Pair self, uint16 status)"},
	 { (char *)"b2Pair_status_get", (PyCFunction)_wrap_b2Pair_status_get, METH_O, (char *)"b2Pair_status_get(b2Pair self) -> uint16"},
	 { (char *)"new_b2Pair", (PyCFunction)_wrap_new_b2Pair, METH_NOARGS, (char *)"new_b2Pair() -> b2Pair"},
	 { (char *)"delete_b2Pair", (PyCFunction)_wrap_delete_b2Pair, METH_O, (char *)"delete_b2Pair(b2Pair self)"},
	 { (char *)"b2Pair_swigregister", b2Pair_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Pair_swiginit", b2Pair_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2BufferedPair_proxyId1_set", _wrap_b2BufferedPair_proxyId1_set, METH_VARARGS, (char *)"b2BufferedPair_proxyId1_set(b2BufferedPair self, uint16 proxyId1)"},
	 { (char *)"b2BufferedPair_proxyId1_get", (PyCFunction)_wrap_b2BufferedPair_proxyId1_get, METH_O, (char *)"b2BufferedPair_proxyId1_get(b2BufferedPair self) -> uint16"},
	 { (char *)"b2BufferedPair_proxyId2_set", _wrap_b2BufferedPair_proxyId2_set, METH_VARARGS, (char *)"b2BufferedPair_proxyId2_set(b2BufferedPair self, uint16 proxyId2)"},
	 { (char *)"b2BufferedPair_proxyId2_get", (PyCFunction)_wrap_b2BufferedPair_proxyId2_get, METH_O, (char *)"b2BufferedPair_proxyId2_get(b2BufferedPair self) -> uint16"},
	 { (char *)"new_b2BufferedPair", (PyCFunction)_wrap_new_b2BufferedPair, METH_NOARGS, (char *)"new_b2BufferedPair() -> b2BufferedPair"},
	 { (char *)"delete_b2BufferedPair", (PyCFunction)_wrap_delete_b2BufferedPair, METH_O, (char *)"delete_b2BufferedPair(b2BufferedPair self)"},
	 { (char *)"b2BufferedPair_swigregister", b2BufferedPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BufferedPair_swiginit", b2BufferedPair_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2PairCallback", (PyCFunction)_wrap_delete_b2PairCallback, METH_O, (char *)"delete_b2PairCallback(b2PairCallback self)"},
	 { (char *)"b2PairCallback_PairAdded", _wrap_b2PairCallback_PairAdded, METH_VARARGS, (char *)"b2PairCallback_PairAdded(b2PairCallback self, void proxyUserData1, void proxyUserData2) -> void"},
	 { (char *)"b2PairCallback_PairRemoved", _wrap_b2PairCallback_PairRemoved, METH_VARARGS, (char *)"\n"
		"b2PairCallback_PairRemoved(b2PairCallback self, void proxyUserData1, void proxyUserData2, \n"
		"    void pairUserData)\n"
		""},
	 { (char *)"b2PairCallback_swigregister", b2PairCallback_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2PairManager", (PyCFunction)_wrap_new_b2PairManager, METH_NOARGS, (char *)"new_b2PairManager() -> b2PairManager"},
	 { (char *)"b2PairManager_Initialize", _wrap_b2PairManager_Initialize, METH_VARARGS, (char *)"b2PairManager_Initialize(b2PairManager self, b2BroadPhase broadPhase, b2PairCallback callback)"},
	 { (char *)"b2PairManager_AddBufferedPair", _wrap_b2PairManager_AddBufferedPair, METH_VARARGS, (char *)"b2PairManager_AddBufferedPair(b2PairManager self, int32 proxyId1, int32 proxyId2)"},
	 { (char *)"b2PairManager_RemoveBufferedPair", _wrap_b2PairManager_RemoveBufferedPair, METH_VARARGS, (char *)"b2PairManager_RemoveBufferedPair(b2PairManager self, int32 proxyId1, int32 proxyId2)"},
	 { (char *)"b2PairManager_Commit", (PyCFunction)_wrap_b2PairManager_Commit, METH_O, (char *)"b2PairManager_Commit(b2PairManager self)"},
	 { (char *)"b2PairManager_broadPhase_set", _wrap_b2PairManager_broadPhase_set, METH_VARARGS, (char *)"b2PairManager_broadPhase_set(b2PairManager self, b2BroadPhase m_broadPhase)"},
	 { (char *)"b2PairManager_broadPhase_get", (PyCFunction)_wrap_b2PairManager_broadPhase_get, METH_O, (char *)"b2PairManager_broadPhase_get(b2PairManager self) -> b2BroadPhase"},
	 { (char *)"b2PairManager_callback_set", _wrap_b2PairManager_callback_set, METH_VARARGS, (char *)"b2PairManager_callback_set(b2PairManager self, b2PairCallback m_callback)"},
	 { (char *)"b2PairManager_callback_get", (PyCFunction)_wrap_b2PairManager_callback_get, METH_O, (char *)"b2PairManager_callback_get(b2PairManager self) -> b2PairCallback"},
	 { (char *)"b2PairManager_pairs_set", _wrap_b2PairManager_pairs_set, METH_VARARGS, (char *)"b2PairManager_pairs_set(b2PairManager self, b2Pair m_pairs)"},
	 { (char *)"b2PairManager_pairs_get", (PyCFunction)_wrap_b2PairManager_pairs_get, METH_O, (char *)"b2PairManager_pairs_get(b2PairManager self) -> b2Pair"},
	 { (char *)"b2PairManager_freePair_set", _wrap_b2PairManager_freePair_set, METH_VARARGS, (char *)"b2PairManager_freePair_set(b2PairManager self, uint16 m_freePair)"},
	 { (char *)"b2PairManager_freePair_get", (PyCFunction)_wrap_b2PairManager_freePair_get, METH_O, (char *)"b2PairManager_freePair_get(b2PairManager self) -> uint16"},
	 { (char *)"b2PairManager_pairCount_set", _wrap_b2PairManager_pairCount_set, METH_VARARGS, (char *)"b2PairManager_pairCount_set(b2PairManager self, int32 m_pairCount)"},
	 { (char *)"b2PairManager_pairCount_get", (PyCFunction)_wrap_b2PairManager_pairCount_get, METH_O, (char *)"b2PairManager_pairCount_get(b2PairManager self) -> int32"},
	 { (char *)"b2PairManager_pairBuffer_set", _wrap_b2PairManager_pairBuffer_set, METH_VARARGS, (char *)"b2PairManager_pairBuffer_set(b2PairManager self, b2BufferedPair m_pairBuffer)"},
	 { (char *)"b2PairManager_pairBuffer_get", (PyCFunction)_wrap_b2PairManager_pairBuffer_get, METH_O, (char *)"b2PairManager_pairBuffer_get(b2PairManager self) -> b2BufferedPair"},
	 { (char *)"b2PairManager_pairBufferCount_set", _wrap_b2PairManager_pairBufferCount_set, METH_VARARGS, (char *)"b2PairManager_pairBufferCount_set(b2PairManager self, int32 m_pairBufferCount)"},
	 { (char *)"b2PairManager_pairBufferCount_get", (PyCFunction)_wrap_b2PairManager_pairBufferCount_get, METH_O, (char *)"b2PairManager_pairBufferCount_get(b2PairManager self) -> int32"},
	 { (char *)"b2PairManager_hashTable_set", _wrap_b2PairManager_hashTable_set, METH_VARARGS, (char *)"b2PairManager_hashTable_set(b2PairManager self, uint16 m_hashTable)"},
	 { (char *)"b2PairManager_hashTable_get", (PyCFunction)_wrap_b2PairManager_hashTable_get, METH_O, (char *)"b2PairManager_hashTable_get(b2PairManager self) -> uint16"},
	 { (char *)"delete_b2PairManager", (PyCFunction)_wrap_delete_b2PairManager, METH_O, (char *)"delete_b2PairManager(b2PairManager self)"},
	 { (char *)"b2PairManager_swigregister", b2PairManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PairManager_swiginit", b2PairManager_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Bound_IsLower", (PyCFunction)_wrap_b2Bound_IsLower, METH_O, (char *)"b2Bound_IsLower(b2Bound self) -> bool"},
	 { (char *)"b2Bound_IsUpper", (PyCFunction)_wrap_b2Bound_IsUpper, METH_O, (char *)"b2Bound_IsUpper(b2Bound self) -> bool"},
	 { (char *)"b2Bound_value_set", _wrap_b2Bound_value_set, METH_VARARGS, (char *)"b2Bound_value_set(b2Bound self, uint16 value)"},
	 { (char *)"b2Bound_value_get", (PyCFunction)_wrap_b2Bound_value_get, METH_O, (char *)"b2Bound_value_get(b2Bound self) -> uint16"},
	 { (char *)"b2Bound_proxyId_set", _wrap_b2Bound_proxyId_set, METH_VARARGS, (char *)"b2Bound_proxyId_set(b2Bound self, uint16 proxyId)"},
	 { (char *)"b2Bound_proxyId_get", (PyCFunction)_wrap_b2Bound_proxyId_get, METH_O, (char *)"b2Bound_proxyId_get(b2Bound self) -> uint16"},
	 { (char *)"b2Bound_stabbingCount_set", _wrap_b2Bound_stabbingCount_set, METH_VARARGS, (char *)"b2Bound_stabbingCount_set(b2Bound self, uint16 stabbingCount)"},
	 { (char *)"b2Bound_stabbingCount_get", (PyCFunction)_wrap_b2Bound_stabbingCount_get, METH_O, (char *)"b2Bound_stabbingCount_get(b2Bound self) -> uint16"},
	 { (char *)"new_b2Bound", (PyCFunction)_wrap_new_b2Bound, METH_NOARGS, (char *)"new_b2Bound() -> b2Bound"},
	 { (char *)"delete_b2Bound", (PyCFunction)_wrap_delete_b2Bound, METH_O, (char *)"delete_b2Bound(b2Bound self)"},
	 { (char *)"b2Bound_swigregister", b2Bound_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Bound_swiginit", b2Bound_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Proxy_GetNext", (PyCFunction)_wrap_b2Proxy_GetNext, METH_O, (char *)"b2Proxy_GetNext(b2Proxy self) -> uint16"},
	 { (char *)"b2Proxy_SetNext", _wrap_b2Proxy_SetNext, METH_VARARGS, (char *)"b2Proxy_SetNext(b2Proxy self, uint16 next)"},
	 { (char *)"b2Proxy_IsValid", (PyCFunction)_wrap_b2Proxy_IsValid, METH_O, (char *)"b2Proxy_IsValid(b2Proxy self) -> bool"},
	 { (char *)"b2Proxy_lowerBounds_set", _wrap_b2Proxy_lowerBounds_set, METH_VARARGS, (char *)"b2Proxy_lowerBounds_set(b2Proxy self, uint16 lowerBounds)"},
	 { (char *)"b2Proxy_lowerBounds_get", (PyCFunction)_wrap_b2Proxy_lowerBounds_get, METH_O, (char *)"b2Proxy_lowerBounds_get(b2Proxy self) -> uint16"},
	 { (char *)"b2Proxy_upperBounds_set", _wrap_b2Proxy_upperBounds_set, METH_VARARGS, (char *)"b2Proxy_upperBounds_set(b2Proxy self, uint16 upperBounds)"},
	 { (char *)"b2Proxy_upperBounds_get", (PyCFunction)_wrap_b2Proxy_upperBounds_get, METH_O, (char *)"b2Proxy_upperBounds_get(b2Proxy self) -> uint16"},
	 { (char *)"b2Proxy_overlapCount_set", _wrap_b2Proxy_overlapCount_set, METH_VARARGS, (char *)"b2Proxy_overlapCount_set(b2Proxy self, uint16 overlapCount)"},
	 { (char *)"b2Proxy_overlapCount_get", (PyCFunction)_wrap_b2Proxy_overlapCount_get, METH_O, (char *)"b2Proxy_overlapCount_get(b2Proxy self) -> uint16"},
	 { (char *)"b2Proxy_timeStamp_set", _wrap_b2Proxy_timeStamp_set, METH_VARARGS, (char *)"b2Proxy_timeStamp_set(b2Proxy self, uint16 timeStamp)"},
	 { (char *)"b2Proxy_timeStamp_get", (PyCFunction)_wrap_b2Proxy_timeStamp_get, METH_O, (char *)"b2Proxy_timeStamp_get(b2Proxy self) -> uint16"},
	 { (char *)"new_b2Proxy", (PyCFunction)_wrap_new_b2Proxy, METH_NOARGS, (char *)"new_b2Proxy() -> b2Proxy"},
	 { (char *)"delete_b2Proxy", (PyCFunction)_wrap_delete_b2Proxy, METH_O, (char *)"delete_b2Proxy(b2Proxy self)"},
	 { (char *)"b2Proxy_swigregister", b2Proxy_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Proxy_swiginit", b2Proxy_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2BroadPhase", _wrap_new_b2BroadPhase, METH_VARARGS, (char *)"new_b2BroadPhase(b2AABB worldAABB, b2PairCallback callback) -> b2BroadPhase"},
	 { (char *)"delete_b2BroadPhase", (PyCFunction)_wrap_delete_b2BroadPhase, METH_O, (char *)"delete_b2BroadPhase(b2BroadPhase self)"},
	 { (char *)"b2BroadPhase_InRange", _wrap_b2BroadPhase_InRange, METH_VARARGS, (char *)"b2BroadPhase_InRange(b2BroadPhase self, b2AABB aabb) -> bool"},
	 { (char *)"b2BroadPhase_CreateProxy", _wrap_b2BroadPhase_CreateProxy, METH_VARARGS, (char *)"b2BroadPhase_CreateProxy(b2BroadPhase self, b2AABB aabb, void $ignore) -> uint16"},
	 { (char *)"b2BroadPhase_DestroyProxy", _wrap_b2BroadPhase_DestroyProxy, METH_VARARGS, (char *)"b2BroadPhase_DestroyProxy(b2BroadPhase self, int32 proxyId)"},
	 { (char *)"b2BroadPhase_MoveProxy", _wrap_b2BroadPhase_MoveProxy, METH_VARARGS, (char *)"b2BroadPhase_MoveProxy(b2BroadPhase self, int32 proxyId, b2AABB aabb)"},
	 { (char *)"b2BroadPhase_Commit", (PyCFunction)_wrap_b2BroadPhase_Commit, METH_O, (char *)"b2BroadPhase_Commit(b2BroadPhase self)"},
	 { (char *)"b2BroadPhase_GetProxy", _wrap_b2BroadPhase_GetProxy, METH_VARARGS, (char *)"b2BroadPhase_GetProxy(b2BroadPhase self, int32 proxyId) -> b2Proxy"},
	 { (char *)"b2BroadPhase_Query", _wrap_b2BroadPhase_Query, METH_VARARGS, (char *)"b2BroadPhase_Query(b2BroadPhase self, b2AABB aabb, void $ignore, int32 maxCount) -> int32"},
	 { (char *)"b2BroadPhase_QuerySegment", _wrap_b2BroadPhase_QuerySegment, METH_VARARGS, (char *)"\n"
		"b2BroadPhase_QuerySegment(b2BroadPhase self, b2Segment segment, void $ignore, \n"
		"    int32 maxCount, SortKeyFunc sortKey) -> int32\n"
		""},
	 { (char *)"b2BroadPhase_Validate", (PyCFunction)_wrap_b2BroadPhase_Validate, METH_O, (char *)"b2BroadPhase_Validate(b2BroadPhase self)"},
	 { (char *)"b2BroadPhase_ValidatePairs", (PyCFunction)_wrap_b2BroadPhase_ValidatePairs, METH_O, (char *)"b2BroadPhase_ValidatePairs(b2BroadPhase self)"},
	 { (char *)"b2BroadPhase_pairManager_set", _wrap_b2BroadPhase_pairManager_set, METH_VARARGS, (char *)"b2BroadPhase_pairManager_set(b2BroadPhase self, b2PairManager m_pairManager)"},
	 { (char *)"b2BroadPhase_pairManager_get", (PyCFunction)_wrap_b2BroadPhase_pairManager_get, METH_O, (char *)"b2BroadPhase_pairManager_get(b2BroadPhase self) -> b2PairManager"},
	 { (char *)"b2BroadPhase_proxyPool_set", _wrap_b2BroadPhase_proxyPool_set, METH_VARARGS, (char *)"b2BroadPhase_proxyPool_set(b2BroadPhase self, b2Proxy m_proxyPool)"},
	 { (char *)"b2BroadPhase_proxyPool_get", (PyCFunction)_wrap_b2BroadPhase_proxyPool_get, METH_O, (char *)"b2BroadPhase_proxyPool_get(b2BroadPhase self) -> b2Proxy"},
	 { (char *)"b2BroadPhase_freeProxy_set", _wrap_b2BroadPhase_freeProxy_set, METH_VARARGS, (char *)"b2BroadPhase_freeProxy_set(b2BroadPhase self, uint16 m_freeProxy)"},
	 { (char *)"b2BroadPhase_freeProxy_get", (PyCFunction)_wrap_b2BroadPhase_freeProxy_get, METH_O, (char *)"b2BroadPhase_freeProxy_get(b2BroadPhase self) -> uint16"},
	 { (char *)"b2BroadPhase_bounds_set", _wrap_b2BroadPhase_bounds_set, METH_VARARGS, (char *)"b2BroadPhase_bounds_set(b2BroadPhase self, b2Bound m_bounds)"},
	 { (char *)"b2BroadPhase_bounds_get", (PyCFunction)_wrap_b2BroadPhase_bounds_get, METH_O, (char *)"b2BroadPhase_bounds_get(b2BroadPhase self) -> b2Bound"},
	 { (char *)"b2BroadPhase_queryResults_set", _wrap_b2BroadPhase_queryResults_set, METH_VARARGS, (char *)"b2BroadPhase_queryResults_set(b2BroadPhase self, uint16 m_queryResults)"},
	 { (char *)"b2BroadPhase_queryResults_get", (PyCFunction)_wrap_b2BroadPhase_queryResults_get, METH_O, (char *)"b2BroadPhase_queryResults_get(b2BroadPhase self) -> uint16"},
	 { (char *)"b2BroadPhase_querySortKeys_set", _wrap_b2BroadPhase_querySortKeys_set, METH_VARARGS, (char *)"b2BroadPhase_querySortKeys_set(b2BroadPhase self, float32 m_querySortKeys)"},
	 { (char *)"b2BroadPhase_querySortKeys_get", (PyCFunction)_wrap_b2BroadPhase_querySortKeys_get, METH_O, (char *)"b2BroadPhase_querySortKeys_get(b2BroadPhase self) -> float32"},
	 { (char *)"b2BroadPhase_queryResultCount_set", _wrap_b2BroadPhase_queryResultCount_set, METH_VARARGS, (char *)"b2BroadPhase_queryResultCount_set(b2BroadPhase self, int32 m_queryResultCount)"},
	 { (char *)"b2BroadPhase_queryResultCount_get", (PyCFunction)_wrap_b2BroadPhase_queryResultCount_get, METH_O, (char *)"b2BroadPhase_queryResultCount_get(b2BroadPhase self) -> int32"},
	 { (char *)"b2BroadPhase_worldAABB_set", _wrap_b2BroadPhase_worldAABB_set, METH_VARARGS, (char *)"b2BroadPhase_worldAABB_set(b2BroadPhase self, b2AABB m_worldAABB)"},
	 { (char *)"b2BroadPhase_worldAABB_get", (PyCFunction)_wrap_b2BroadPhase_worldAABB_get, METH_O, (char *)"b2BroadPhase_worldAABB_get(b2BroadPhase self) -> b2AABB"},
	 { (char *)"b2BroadPhase_quantizationFactor_set", _wrap_b2BroadPhase_quantizationFactor_set, METH_VARARGS, (char *)"b2BroadPhase_quantizationFactor_set(b2BroadPhase self, b2Vec2 m_quantizationFactor)"},
	 { (char *)"b2BroadPhase_quantizationFactor_get", (PyCFunction)_wrap_b2BroadPhase_quantizationFactor_get, METH_O, (char *)"b2BroadPhase_quantizationFactor_get(b2BroadPhase self) -> b2Vec2"},
	 { (char *)"b2BroadPhase_proxyCount_set", _wrap_b2BroadPhase_proxyCount_set, METH_VARARGS, (char *)"b2BroadPhase_proxyCount_set(b2BroadPhase self, int32 m_proxyCount)"},
	 { (char *)"b2BroadPhase_proxyCount_get", (PyCFunction)_wrap_b2BroadPhase_proxyCount_get, METH_O, (char *)"b2BroadPhase_proxyCount_get(b2BroadPhase self) -> int32"},
	 { (char *)"b2BroadPhase_timeStamp_set", _wrap_b2BroadPhase_timeStamp_set, METH_VARARGS, (char *)"b2BroadPhase_timeStamp_set(b2BroadPhase self, uint16 m_timeStamp)"},
	 { (char *)"b2BroadPhase_timeStamp_get", (PyCFunction)_wrap_b2BroadPhase_timeStamp_get, METH_O, (char *)"b2BroadPhase_timeStamp_get(b2BroadPhase self) -> uint16"},
	 { (char *)"b2BroadPhase_s_validate_get", _wrap_b2BroadPhase_s_validate_get, METH_VARARGS, NULL},
	 { (char *)"b2BroadPhase_s_validate_set", _wrap_b2BroadPhase_s_validate_set, METH_VARARGS, NULL},
	 { (char *)"b2BroadPhase_swigregister", b2BroadPhase_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BroadPhase_swiginit", b2BroadPhase_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2DestructionListener", (PyCFunction)_wrap_delete_b2DestructionListener, METH_O, (char *)"delete_b2DestructionListener(b2DestructionListener self)"},
	 { (char *)"b2DestructionListener_SayGoodbye", _wrap_b2DestructionListener_SayGoodbye, METH_VARARGS, (char *)"\n"
		"SayGoodbye(b2Joint joint)\n"
		"b2DestructionListener_SayGoodbye(b2DestructionListener self, b2Shape shape)\n"
		"\n"
		"Called when any shape is about to be destroyed due to the destruction of its parent body.\n"
		""},
	 { (char *)"new_b2DestructionListener", (PyCFunction)_wrap_new_b2DestructionListener, METH_O, (char *)"new_b2DestructionListener(PyObject self) -> b2DestructionListener"},
	 { (char *)"disown_b2DestructionListener", (PyCFunction)_wrap_disown_b2DestructionListener, METH_O, NULL},
	 { (char *)"b2DestructionListener_swigregister", b2DestructionListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2DestructionListener_swiginit", b2DestructionListener_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2BoundaryListener", (PyCFunction)_wrap_delete_b2BoundaryListener, METH_O, (char *)"delete_b2BoundaryListener(b2BoundaryListener self)"},
	 { (char *)"b2BoundaryListener_Violation", _wrap_b2BoundaryListener_Violation, METH_VARARGS, (char *)"\n"
		"b2BoundaryListener_Violation(b2BoundaryListener self, b2Body body)\n"
		"\n"
		"This is called for each body that leaves the world boundary. \n"
		"WARNING: \n"
		"you can't modify the world inside this callback.\n"
		""},
	 { (char *)"new_b2BoundaryListener", (PyCFunction)_wrap_new_b2BoundaryListener, METH_O, (char *)"new_b2BoundaryListener(PyObject self) -> b2BoundaryListener"},
	 { (char *)"disown_b2BoundaryListener", (PyCFunction)_wrap_disown_b2BoundaryListener, METH_O, NULL},
	 { (char *)"b2BoundaryListener_swigregister", b2BoundaryListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BoundaryListener_swiginit", b2BoundaryListener_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2ContactFilter", (PyCFunction)_wrap_delete_b2ContactFilter, METH_O, (char *)"delete_b2ContactFilter(b2ContactFilter self)"},
	 { (char *)"b2ContactFilter_ShouldCollide", _wrap_b2ContactFilter_ShouldCollide, METH_VARARGS, (char *)"\n"
		"b2ContactFilter_ShouldCollide(b2ContactFilter self, b2Shape shape1, b2Shape shape2) -> bool\n"
		"\n"
		"Return true if contact calculations should be performed between these two shapes. \n"
		"WARNING: \n"
		"for performance reasons this is only called when the AABBs begin to overlap.\n"
		""},
	 { (char *)"b2ContactFilter_RayCollide", _wrap_b2ContactFilter_RayCollide, METH_VARARGS, (char *)"\n"
		"b2ContactFilter_RayCollide(b2ContactFilter self, void $ignore, b2Shape b2Shape) -> bool\n"
		"\n"
		"Return true if the given shape should be considered for ray intersection.\n"
		""},
	 { (char *)"new_b2ContactFilter", (PyCFunction)_wrap_new_b2ContactFilter, METH_O, (char *)"new_b2ContactFilter(PyObject self) -> b2ContactFilter"},
	 { (char *)"disown_b2ContactFilter", (PyCFunction)_wrap_disown_b2ContactFilter, METH_O, NULL},
	 { (char *)"b2ContactFilter_swigregister", b2ContactFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactFilter_swiginit", b2ContactFilter_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2ContactListener", (PyCFunction)_wrap_delete_b2ContactListener, METH_O, (char *)"delete_b2ContactListener(b2ContactListener self)"},
	 { (char *)"b2ContactListener_Add", _wrap_b2ContactListener_Add, METH_VARARGS, (char *)"\n"
		"b2ContactListener_Add(b2ContactListener self, b2ContactPoint point)\n"
		"\n"
		"Called when a contact point is added. This includes the geometry and the forces.\n"
		""},
	 { (char *)"b2ContactListener_Persist", _wrap_b2ContactListener_Persist, METH_VARARGS, (char *)"\n"
		"b2ContactListener_Persist(b2ContactListener self, b2ContactPoint point)\n"
		"\n"
		"Called when a contact point persists. This includes the geometry and the forces.\n"
		""},
	 { (char *)"b2ContactListener_Remove", _wrap_b2ContactListener_Remove, METH_VARARGS, (char *)"\n"
		"b2ContactListener_Remove(b2ContactListener self, b2ContactPoint point)\n"
		"\n"
		"Called when a contact point is removed. This includes the last computed geometry and forces.\n"
		""},
	 { (char *)"b2ContactListener_Result", _wrap_b2ContactListener_Result, METH_VARARGS, (char *)"\n"
		"b2ContactListener_Result(b2ContactListener self, b2ContactResult point)\n"
		"\n"
		"Called after a contact point is solved.\n"
		""},
	 { (char *)"new_b2ContactListener", (PyCFunction)_wrap_new_b2ContactListener, METH_O, (char *)"new_b2ContactListener(PyObject self) -> b2ContactListener"},
	 { (char *)"disown_b2ContactListener", (PyCFunction)_wrap_disown_b2ContactListener, METH_O, NULL},
	 { (char *)"b2ContactListener_swigregister", b2ContactListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactListener_swiginit", b2ContactListener_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2Color", _wrap_new_b2Color, METH_VARARGS, (char *)"\n"
		"b2Color()\n"
		"new_b2Color(float32 r, float32 g, float32 b) -> b2Color\n"
		"\n"
		"Color for debug drawing. Each value has the range [0,1].\n"
		""},
	 { (char *)"b2Color_r_set", _wrap_b2Color_r_set, METH_VARARGS, (char *)"b2Color_r_set(b2Color self, float32 r)"},
	 { (char *)"b2Color_r_get", (PyCFunction)_wrap_b2Color_r_get, METH_O, (char *)"b2Color_r_get(b2Color self) -> float32"},
	 { (char *)"b2Color_g_set", _wrap_b2Color_g_set, METH_VARARGS, (char *)"b2Color_g_set(b2Color self, float32 g)"},
	 { (char *)"b2Color_g_get", (PyCFunction)_wrap_b2Color_g_get, METH_O, (char *)"b2Color_g_get(b2Color self) -> float32"},
	 { (char *)"b2Color_b_set", _wrap_b2Color_b_set, METH_VARARGS, (char *)"b2Color_b_set(b2Color self, float32 b)"},
	 { (char *)"b2Color_b_get", (PyCFunction)_wrap_b2Color_b_get, METH_O, (char *)"b2Color_b_get(b2Color self) -> float32"},
	 { (char *)"delete_b2Color", (PyCFunction)_wrap_delete_b2Color, METH_O, (char *)"delete_b2Color(b2Color self)"},
	 { (char *)"b2Color_swigregister", b2Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2Color_swiginit", b2Color_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2DebugDraw", (PyCFunction)_wrap_new_b2DebugDraw, METH_O, (char *)"\n"
		"new_b2DebugDraw(PyObject self) -> b2DebugDraw\n"
		"\n"
		"Implement and register this class with a  b2Worldto provide debug drawing of physics entities in your game.\n"
		""},
	 { (char *)"delete_b2DebugDraw", (PyCFunction)_wrap_delete_b2DebugDraw, METH_O, (char *)"delete_b2DebugDraw(b2DebugDraw self)"},
	 { (char *)"b2DebugDraw_SetFlags", _wrap_b2DebugDraw_SetFlags, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_SetFlags(b2DebugDraw self, uint32 flags)\n"
		"\n"
		"Set the drawing flags.\n"
		""},
	 { (char *)"b2DebugDraw_GetFlags", (PyCFunction)_wrap_b2DebugDraw_GetFlags, METH_O, (char *)"\n"
		"b2DebugDraw_GetFlags(b2DebugDraw self) -> uint32\n"
		"\n"
		"Get the drawing flags.\n"
		""},
	 { (char *)"b2DebugDraw_AppendFlags", _wrap_b2DebugDraw_AppendFlags, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_AppendFlags(b2DebugDraw self, uint32 flags)\n"
		"\n"
		"Append flags to the current flags.\n"
		""},
	 { (char *)"b2DebugDraw_ClearFlags", _wrap_b2DebugDraw_ClearFlags, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_ClearFlags(b2DebugDraw self, uint32 flags)\n"
		"\n"
		"Clear flags from the current flags.\n"
		""},
	 { (char *)"b2DebugDraw_DrawPolygon", _wrap_b2DebugDraw_DrawPolygon, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawPolygon(b2DebugDraw self, b2Vec2 vertices, int32 vertexCount, \n"
		"    b2Color color)\n"
		"\n"
		"Draw a closed polygon provided in CCW order.\n"
		""},
	 { (char *)"b2DebugDraw_DrawSolidPolygon", _wrap_b2DebugDraw_DrawSolidPolygon, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawSolidPolygon(b2DebugDraw self, b2Vec2 vertices, int32 vertexCount, \n"
		"    b2Color color)\n"
		"\n"
		"Draw a solid closed polygon provided in CCW order.\n"
		""},
	 { (char *)"b2DebugDraw_DrawCircle", _wrap_b2DebugDraw_DrawCircle, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawCircle(b2DebugDraw self, b2Vec2 center, float32 radius, b2Color color)\n"
		"\n"
		"Draw a circle.\n"
		""},
	 { (char *)"b2DebugDraw_DrawSolidCircle", _wrap_b2DebugDraw_DrawSolidCircle, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawSolidCircle(b2DebugDraw self, b2Vec2 center, float32 radius, b2Vec2 axis, \n"
		"    b2Color color)\n"
		"\n"
		"Draw a solid circle.\n"
		""},
	 { (char *)"b2DebugDraw_DrawSegment", _wrap_b2DebugDraw_DrawSegment, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawSegment(b2DebugDraw self, b2Vec2 p1, b2Vec2 p2, b2Color color)\n"
		"\n"
		"Draw a line segment.\n"
		""},
	 { (char *)"b2DebugDraw_DrawXForm", _wrap_b2DebugDraw_DrawXForm, METH_VARARGS, (char *)"\n"
		"b2DebugDraw_DrawXForm(b2DebugDraw self, b2XForm xf)\n"
		"\n"
		"Draw a transform. Choose your own length scale.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"xf: a transform.\n"
		""},
	 { (char *)"disown_b2DebugDraw", (PyCFunction)_wrap_disown_b2DebugDraw, METH_O, NULL},
	 { (char *)"b2DebugDraw_swigregister", b2DebugDraw_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2DebugDraw_swiginit", b2DebugDraw_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2BlockAllocator", (PyCFunction)_wrap_new_b2BlockAllocator, METH_NOARGS, (char *)"new_b2BlockAllocator() -> b2BlockAllocator"},
	 { (char *)"delete_b2BlockAllocator", (PyCFunction)_wrap_delete_b2BlockAllocator, METH_O, (char *)"delete_b2BlockAllocator(b2BlockAllocator self)"},
	 { (char *)"b2BlockAllocator_Allocate", _wrap_b2BlockAllocator_Allocate, METH_VARARGS, (char *)"b2BlockAllocator_Allocate(b2BlockAllocator self, int32 size) -> void"},
	 { (char *)"b2BlockAllocator_Free", _wrap_b2BlockAllocator_Free, METH_VARARGS, (char *)"b2BlockAllocator_Free(b2BlockAllocator self, void p, int32 size)"},
	 { (char *)"b2BlockAllocator_Clear", (PyCFunction)_wrap_b2BlockAllocator_Clear, METH_O, (char *)"b2BlockAllocator_Clear(b2BlockAllocator self)"},
	 { (char *)"b2BlockAllocator_swigregister", b2BlockAllocator_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BlockAllocator_swiginit", b2BlockAllocator_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2StackEntry_data_set", _wrap_b2StackEntry_data_set, METH_VARARGS, (char *)"b2StackEntry_data_set(b2StackEntry self, char data)"},
	 { (char *)"b2StackEntry_data_get", (PyCFunction)_wrap_b2StackEntry_data_get, METH_O, (char *)"b2StackEntry_data_get(b2StackEntry self) -> char"},
	 { (char *)"b2StackEntry_size_set", _wrap_b2StackEntry_size_set, METH_VARARGS, (char *)"b2StackEntry_size_set(b2StackEntry self, int32 size)"},
	 { (char *)"b2StackEntry_size_get", (PyCFunction)_wrap_b2StackEntry_size_get, METH_O, (char *)"b2StackEntry_size_get(b2StackEntry self) -> int32"},
	 { (char *)"b2StackEntry_usedMalloc_set", _wrap_b2StackEntry_usedMalloc_set, METH_VARARGS, (char *)"b2StackEntry_usedMalloc_set(b2StackEntry self, bool usedMalloc)"},
	 { (char *)"b2StackEntry_usedMalloc_get", (PyCFunction)_wrap_b2StackEntry_usedMalloc_get, METH_O, (char *)"b2StackEntry_usedMalloc_get(b2StackEntry self) -> bool"},
	 { (char *)"new_b2StackEntry", (PyCFunction)_wrap_new_b2StackEntry, METH_NOARGS, (char *)"new_b2StackEntry() -> b2StackEntry"},
	 { (char *)"delete_b2StackEntry", (PyCFunction)_wrap_delete_b2StackEntry, METH_O, (char *)"delete_b2StackEntry(b2StackEntry self)"},
	 { (char *)"b2StackEntry_swigregister", b2StackEntry_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2StackEntry_swiginit", b2StackEntry_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2StackAllocator", (PyCFunction)_wrap_new_b2StackAllocator, METH_NOARGS, (char *)"new_b2StackAllocator() -> b2StackAllocator"},
	 { (char *)"delete_b2StackAllocator", (PyCFunction)_wrap_delete_b2StackAllocator, METH_O, (char *)"delete_b2StackAllocator(b2StackAllocator self)"},
	 { (char *)"b2StackAllocator_Allocate", _wrap_b2StackAllocator_Allocate, METH_VARARGS, (char *)"b2StackAllocator_Allocate(b2StackAllocator self, int32 size) -> void"},
	 { (char *)"b2StackAllocator_Free", _wrap_b2StackAllocator_Free, METH_VARARGS, (char *)"b2StackAllocator_Free(b2StackAllocator self, void p)"},
	 { (char *)"b2StackAllocator_GetMaxAllocation", (PyCFunction)_wrap_b2StackAllocator_GetMaxAllocation, METH_O, (char *)"b2StackAllocator_GetMaxAllocation(b2StackAllocator self) -> int32"},
	 { (char *)"b2StackAllocator_swigregister", b2StackAllocator_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2StackAllocator_swiginit", b2StackAllocator_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ContactRegister_createFcn_set", _wrap_b2ContactRegister_createFcn_set, METH_VARARGS, (char *)"b2ContactRegister_createFcn_set(b2ContactRegister self, b2ContactCreateFcn createFcn)"},
	 { (char *)"b2ContactRegister_createFcn_get", (PyCFunction)_wrap_b2ContactRegister_createFcn_get, METH_O, (char *)"b2ContactRegister_createFcn_get(b2ContactRegister self) -> b2ContactCreateFcn"},
	 { (char *)"b2ContactRegister_destroyFcn_set", _wrap_b2ContactRegister_destroyFcn_set, METH_VARARGS, (char *)"b2ContactRegister_destroyFcn_set(b2ContactRegister self, b2ContactDestroyFcn destroyFcn)"},
	 { (char *)"b2ContactRegister_destroyFcn_get", (PyCFunction)_wrap_b2ContactRegister_destroyFcn_get, METH_O, (char *)"b2ContactRegister_destroyFcn_get(b2ContactRegister self) -> b2ContactDestroyFcn"},
	 { (char *)"b2ContactRegister_primary_set", _wrap_b2ContactRegister_primary_set, METH_VARARGS, (char *)"b2ContactRegister_primary_set(b2ContactRegister self, bool primary)"},
	 { (char *)"b2ContactRegister_primary_get", (PyCFunction)_wrap_b2ContactRegister_primary_get, METH_O, (char *)"b2ContactRegister_primary_get(b2ContactRegister self) -> bool"},
	 { (char *)"new_b2ContactRegister", (PyCFunction)_wrap_new_b2ContactRegister, METH_NOARGS, (char *)"new_b2ContactRegister() -> b2ContactRegister"},
	 { (char *)"delete_b2ContactRegister", (PyCFunction)_wrap_delete_b2ContactRegister, METH_O, (char *)"delete_b2ContactRegister(b2ContactRegister self)"},
	 { (char *)"b2ContactRegister_swigregister", b2ContactRegister_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactRegister_swiginit", b2ContactRegister_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ContactEdge_other_set", _wrap_b2ContactEdge_other_set, METH_VARARGS, (char *)"b2ContactEdge_other_set(b2ContactEdge self, b2Body other)"},
	 { (char *)"b2ContactEdge_other_get", (PyCFunction)_wrap_b2ContactEdge_other_get, METH_O, (char *)"b2ContactEdge_other_get(b2ContactEdge self) -> b2Body"},
	 { (char *)"b2ContactEdge_contact_set", _wrap_b2ContactEdge_contact_set, METH_VARARGS, (char *)"b2ContactEdge_contact_set(b2ContactEdge self, b2Contact contact)"},
	 { (char *)"b2ContactEdge_contact_get", (PyCFunction)_wrap_b2ContactEdge_contact_get, METH_O, (char *)"b2ContactEdge_contact_get(b2ContactEdge self) -> b2Contact"},
	 { (char *)"b2ContactEdge_prev_set", _wrap_b2ContactEdge_prev_set, METH_VARARGS, (char *)"b2ContactEdge_prev_set(b2ContactEdge self, b2ContactEdge prev)"},
	 { (char *)"b2ContactEdge_prev_get", (PyCFunction)_wrap_b2ContactEdge_prev_get, METH_O, (char *)"b2ContactEdge_prev_get(b2ContactEdge self) -> b2ContactEdge"},
	 { (char *)"b2ContactEdge_next_set", _wrap_b2ContactEdge_next_set, METH_VARARGS, (char *)"b2ContactEdge_next_set(b2ContactEdge self, b2ContactEdge next)"},
	 { (char *)"b2ContactEdge_next_get", (PyCFunction)_wrap_b2ContactEdge_next_get, METH_O, (char *)"b2ContactEdge_next_get(b2ContactEdge self) -> b2ContactEdge"},
	 { (char *)"new_b2ContactEdge", (PyCFunction)_wrap_new_b2ContactEdge, METH_NOARGS, (char *)"new_b2ContactEdge() -> b2ContactEdge"},
	 { (char *)"delete_b2ContactEdge", (PyCFunction)_wrap_delete_b2ContactEdge, METH_O, (char *)"delete_b2ContactEdge(b2ContactEdge self)"},
	 { (char *)"b2ContactEdge_swigregister", b2ContactEdge_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactEdge_swiginit", b2ContactEdge_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ContactPoint_shape1_set", _wrap_b2ContactPoint_shape1_set, METH_VARARGS, (char *)"b2ContactPoint_shape1_set(b2ContactPoint self, b2Shape shape1)"},
	 { (char *)"b2ContactPoint_shape1_get", (PyCFunction)_wrap_b2ContactPoint_shape1_get, METH_O, (char *)"b2ContactPoint_shape1_get(b2ContactPoint self) -> b2Shape"},
	 { (char *)"b2ContactPoint_shape2_set", _wrap_b2ContactPoint_shape2_set, METH_VARARGS, (char *)"b2ContactPoint_shape2_set(b2ContactPoint self, b2Shape shape2)"},
	 { (char *)"b2ContactPoint_shape2_get", (PyCFunction)_wrap_b2ContactPoint_shape2_get, METH_O, (char *)"b2ContactPoint_shape2_get(b2ContactPoint self) -> b2Shape"},
	 { (char *)"b2ContactPoint_position_set", _wrap_b2ContactPoint_position_set, METH_VARARGS, (char *)"b2ContactPoint_position_set(b2ContactPoint self, b2Vec2 position)"},
	 { (char *)"b2ContactPoint_position_get", (PyCFunction)_wrap_b2ContactPoint_position_get, METH_O, (char *)"b2ContactPoint_position_get(b2ContactPoint self) -> b2Vec2"},
	 { (char *)"b2ContactPoint_velocity_set", _wrap_b2ContactPoint_velocity_set, METH_VARARGS, (char *)"b2ContactPoint_velocity_set(b2ContactPoint self, b2Vec2 velocity)"},
	 { (char *)"b2ContactPoint_velocity_get", (PyCFunction)_wrap_b2ContactPoint_velocity_get, METH_O, (char *)"b2ContactPoint_velocity_get(b2ContactPoint self) -> b2Vec2"},
	 { (char *)"b2ContactPoint_normal_set", _wrap_b2ContactPoint_normal_set, METH_VARARGS, (char *)"b2ContactPoint_normal_set(b2ContactPoint self, b2Vec2 normal)"},
	 { (char *)"b2ContactPoint_normal_get", (PyCFunction)_wrap_b2ContactPoint_normal_get, METH_O, (char *)"b2ContactPoint_normal_get(b2ContactPoint self) -> b2Vec2"},
	 { (char *)"b2ContactPoint_separation_set", _wrap_b2ContactPoint_separation_set, METH_VARARGS, (char *)"b2ContactPoint_separation_set(b2ContactPoint self, float32 separation)"},
	 { (char *)"b2ContactPoint_separation_get", (PyCFunction)_wrap_b2ContactPoint_separation_get, METH_O, (char *)"b2ContactPoint_separation_get(b2ContactPoint self) -> float32"},
	 { (char *)"b2ContactPoint_friction_set", _wrap_b2ContactPoint_friction_set, METH_VARARGS, (char *)"b2ContactPoint_friction_set(b2ContactPoint self, float32 friction)"},
	 { (char *)"b2ContactPoint_friction_get", (PyCFunction)_wrap_b2ContactPoint_friction_get, METH_O, (char *)"b2ContactPoint_friction_get(b2ContactPoint self) -> float32"},
	 { (char *)"b2ContactPoint_restitution_set", _wrap_b2ContactPoint_restitution_set, METH_VARARGS, (char *)"b2ContactPoint_restitution_set(b2ContactPoint self, float32 restitution)"},
	 { (char *)"b2ContactPoint_restitution_get", (PyCFunction)_wrap_b2ContactPoint_restitution_get, METH_O, (char *)"b2ContactPoint_restitution_get(b2ContactPoint self) -> float32"},
	 { (char *)"b2ContactPoint_id_set", _wrap_b2ContactPoint_id_set, METH_VARARGS, (char *)"b2ContactPoint_id_set(b2ContactPoint self, b2ContactID id)"},
	 { (char *)"b2ContactPoint_id_get", (PyCFunction)_wrap_b2ContactPoint_id_get, METH_O, (char *)"b2ContactPoint_id_get(b2ContactPoint self) -> b2ContactID"},
	 { (char *)"new_b2ContactPoint", (PyCFunction)_wrap_new_b2ContactPoint, METH_NOARGS, (char *)"new_b2ContactPoint() -> b2ContactPoint"},
	 { (char *)"delete_b2ContactPoint", (PyCFunction)_wrap_delete_b2ContactPoint, METH_O, (char *)"delete_b2ContactPoint(b2ContactPoint self)"},
	 { (char *)"b2ContactPoint_swigregister", b2ContactPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactPoint_swiginit", b2ContactPoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ContactResult_shape1_set", _wrap_b2ContactResult_shape1_set, METH_VARARGS, (char *)"b2ContactResult_shape1_set(b2ContactResult self, b2Shape shape1)"},
	 { (char *)"b2ContactResult_shape1_get", (PyCFunction)_wrap_b2ContactResult_shape1_get, METH_O, (char *)"b2ContactResult_shape1_get(b2ContactResult self) -> b2Shape"},
	 { (char *)"b2ContactResult_shape2_set", _wrap_b2ContactResult_shape2_set, METH_VARARGS, (char *)"b2ContactResult_shape2_set(b2ContactResult self, b2Shape shape2)"},
	 { (char *)"b2ContactResult_shape2_get", (PyCFunction)_wrap_b2ContactResult_shape2_get, METH_O, (char *)"b2ContactResult_shape2_get(b2ContactResult self) -> b2Shape"},
	 { (char *)"b2ContactResult_position_set", _wrap_b2ContactResult_position_set, METH_VARARGS, (char *)"b2ContactResult_position_set(b2ContactResult self, b2Vec2 position)"},
	 { (char *)"b2ContactResult_position_get", (PyCFunction)_wrap_b2ContactResult_position_get, METH_O, (char *)"b2ContactResult_position_get(b2ContactResult self) -> b2Vec2"},
	 { (char *)"b2ContactResult_normal_set", _wrap_b2ContactResult_normal_set, METH_VARARGS, (char *)"b2ContactResult_normal_set(b2ContactResult self, b2Vec2 normal)"},
	 { (char *)"b2ContactResult_normal_get", (PyCFunction)_wrap_b2ContactResult_normal_get, METH_O, (char *)"b2ContactResult_normal_get(b2ContactResult self) -> b2Vec2"},
	 { (char *)"b2ContactResult_normalImpulse_set", _wrap_b2ContactResult_normalImpulse_set, METH_VARARGS, (char *)"b2ContactResult_normalImpulse_set(b2ContactResult self, float32 normalImpulse)"},
	 { (char *)"b2ContactResult_normalImpulse_get", (PyCFunction)_wrap_b2ContactResult_normalImpulse_get, METH_O, (char *)"b2ContactResult_normalImpulse_get(b2ContactResult self) -> float32"},
	 { (char *)"b2ContactResult_tangentImpulse_set", _wrap_b2ContactResult_tangentImpulse_set, METH_VARARGS, (char *)"b2ContactResult_tangentImpulse_set(b2ContactResult self, float32 tangentImpulse)"},
	 { (char *)"b2ContactResult_tangentImpulse_get", (PyCFunction)_wrap_b2ContactResult_tangentImpulse_get, METH_O, (char *)"b2ContactResult_tangentImpulse_get(b2ContactResult self) -> float32"},
	 { (char *)"b2ContactResult_id_set", _wrap_b2ContactResult_id_set, METH_VARARGS, (char *)"b2ContactResult_id_set(b2ContactResult self, b2ContactID id)"},
	 { (char *)"b2ContactResult_id_get", (PyCFunction)_wrap_b2ContactResult_id_get, METH_O, (char *)"b2ContactResult_id_get(b2ContactResult self) -> b2ContactID"},
	 { (char *)"new_b2ContactResult", (PyCFunction)_wrap_new_b2ContactResult, METH_NOARGS, (char *)"new_b2ContactResult() -> b2ContactResult"},
	 { (char *)"delete_b2ContactResult", (PyCFunction)_wrap_delete_b2ContactResult, METH_O, (char *)"delete_b2ContactResult(b2ContactResult self)"},
	 { (char *)"b2ContactResult_swigregister", b2ContactResult_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactResult_swiginit", b2ContactResult_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Contact_GetManifolds", (PyCFunction)_wrap_b2Contact_GetManifolds, METH_O, (char *)"\n"
		"b2Contact_GetManifolds(b2Contact self) -> b2Manifold\n"
		"\n"
		"Get the manifold array.\n"
		""},
	 { (char *)"b2Contact_GetManifoldCount", (PyCFunction)_wrap_b2Contact_GetManifoldCount, METH_O, (char *)"\n"
		"b2Contact_GetManifoldCount(b2Contact self) -> int32\n"
		"\n"
		"Get the number of manifolds. This is 0 or 1 between convex shapes. This may be greater than 1 for convex-vs-concave shapes. Each manifold holds up to two contact points with a shared contact normal.\n"
		""},
	 { (char *)"b2Contact_IsSolid", (PyCFunction)_wrap_b2Contact_IsSolid, METH_O, (char *)"\n"
		"b2Contact_IsSolid(b2Contact self) -> bool\n"
		"\n"
		"Is this contact solid? \n"
		"true if this contact should generate a response.\n"
		""},
	 { (char *)"b2Contact_GetNext", (PyCFunction)_wrap_b2Contact_GetNext, METH_O, (char *)"\n"
		"b2Contact_GetNext(b2Contact self) -> b2Contact\n"
		"\n"
		"Get the next contact in the world's contact list.\n"
		""},
	 { (char *)"b2Contact_GetShape1", (PyCFunction)_wrap_b2Contact_GetShape1, METH_O, (char *)"\n"
		"b2Contact_GetShape1(b2Contact self) -> b2Shape\n"
		"\n"
		"Get the first shape in this contact.\n"
		""},
	 { (char *)"b2Contact_GetShape2", (PyCFunction)_wrap_b2Contact_GetShape2, METH_O, (char *)"\n"
		"b2Contact_GetShape2(b2Contact self) -> b2Shape\n"
		"\n"
		"Get the second shape in this contact.\n"
		""},
	 { (char *)"b2Contact_AddType", _wrap_b2Contact_AddType, METH_VARARGS, (char *)"\n"
		"b2Contact_AddType(b2ContactCreateFcn createFcn, b2ContactDestroyFcn destroyFcn, \n"
		"    b2ShapeType type1, b2ShapeType type2)\n"
		""},
	 { (char *)"b2Contact_InitializeRegisters", (PyCFunction)_wrap_b2Contact_InitializeRegisters, METH_NOARGS, (char *)"b2Contact_InitializeRegisters()"},
	 { (char *)"b2Contact_Create", _wrap_b2Contact_Create, METH_VARARGS, (char *)"b2Contact_Create(b2Shape shape1, b2Shape shape2, b2BlockAllocator allocator) -> b2Contact"},
	 { (char *)"b2Contact_Destroy", _wrap_b2Contact_Destroy, METH_VARARGS, (char *)"b2Contact_Destroy(b2Contact contact, b2BlockAllocator allocator)"},
	 { (char *)"delete_b2Contact", (PyCFunction)_wrap_delete_b2Contact, METH_O, (char *)"delete_b2Contact(b2Contact self)"},
	 { (char *)"b2Contact_Update", _wrap_b2Contact_Update, METH_VARARGS, (char *)"b2Contact_Update(b2Contact self, b2ContactListener listener)"},
	 { (char *)"b2Contact_Evaluate", _wrap_b2Contact_Evaluate, METH_VARARGS, (char *)"b2Contact_Evaluate(b2Contact self, b2ContactListener listener)"},
	 { (char *)"b2Contact_s_registers_get", _wrap_b2Contact_s_registers_get, METH_VARARGS, NULL},
	 { (char *)"b2Contact_s_registers_set", _wrap_b2Contact_s_registers_set, METH_VARARGS, NULL},
	 { (char *)"b2Contact_s_initialized_get", _wrap_b2Contact_s_initialized_get, METH_VARARGS, NULL},
	 { (char *)"b2Contact_s_initialized_set", _wrap_b2Contact_s_initialized_set, METH_VARARGS, NULL},
	 { (char *)"b2Contact_flags_set", _wrap_b2Contact_flags_set, METH_VARARGS, (char *)"b2Contact_flags_set(b2Contact self, uint32 m_flags)"},
	 { (char *)"b2Contact_flags_get", (PyCFunction)_wrap_b2Contact_flags_get, METH_O, (char *)"b2Contact_flags_get(b2Contact self) -> uint32"},
	 { (char *)"b2Contact_manifoldCount_set", _wrap_b2Contact_manifoldCount_set, METH_VARARGS, (char *)"b2Contact_manifoldCount_set(b2Contact self, int32 m_manifoldCount)"},
	 { (char *)"b2Contact_manifoldCount_get", (PyCFunction)_wrap_b2Contact_manifoldCount_get, METH_O, (char *)"b2Contact_manifoldCount_get(b2Contact self) -> int32"},
	 { (char *)"b2Contact_prev_set", _wrap_b2Contact_prev_set, METH_VARARGS, (char *)"b2Contact_prev_set(b2Contact self, b2Contact m_prev)"},
	 { (char *)"b2Contact_prev_get", (PyCFunction)_wrap_b2Contact_prev_get, METH_O, (char *)"b2Contact_prev_get(b2Contact self) -> b2Contact"},
	 { (char *)"b2Contact_next_set", _wrap_b2Contact_next_set, METH_VARARGS, (char *)"b2Contact_next_set(b2Contact self, b2Contact m_next)"},
	 { (char *)"b2Contact_next_get", (PyCFunction)_wrap_b2Contact_next_get, METH_O, (char *)"b2Contact_next_get(b2Contact self) -> b2Contact"},
	 { (char *)"b2Contact_node1_set", _wrap_b2Contact_node1_set, METH_VARARGS, (char *)"b2Contact_node1_set(b2Contact self, b2ContactEdge m_node1)"},
	 { (char *)"b2Contact_node1_get", (PyCFunction)_wrap_b2Contact_node1_get, METH_O, (char *)"b2Contact_node1_get(b2Contact self) -> b2ContactEdge"},
	 { (char *)"b2Contact_node2_set", _wrap_b2Contact_node2_set, METH_VARARGS, (char *)"b2Contact_node2_set(b2Contact self, b2ContactEdge m_node2)"},
	 { (char *)"b2Contact_node2_get", (PyCFunction)_wrap_b2Contact_node2_get, METH_O, (char *)"b2Contact_node2_get(b2Contact self) -> b2ContactEdge"},
	 { (char *)"b2Contact_shape1_set", _wrap_b2Contact_shape1_set, METH_VARARGS, (char *)"b2Contact_shape1_set(b2Contact self, b2Shape m_shape1)"},
	 { (char *)"b2Contact_shape1_get", (PyCFunction)_wrap_b2Contact_shape1_get, METH_O, (char *)"b2Contact_shape1_get(b2Contact self) -> b2Shape"},
	 { (char *)"b2Contact_shape2_set", _wrap_b2Contact_shape2_set, METH_VARARGS, (char *)"b2Contact_shape2_set(b2Contact self, b2Shape m_shape2)"},
	 { (char *)"b2Contact_shape2_get", (PyCFunction)_wrap_b2Contact_shape2_get, METH_O, (char *)"b2Contact_shape2_get(b2Contact self) -> b2Shape"},
	 { (char *)"b2Contact_toi_set", _wrap_b2Contact_toi_set, METH_VARARGS, (char *)"b2Contact_toi_set(b2Contact self, float32 m_toi)"},
	 { (char *)"b2Contact_toi_get", (PyCFunction)_wrap_b2Contact_toi_get, METH_O, (char *)"b2Contact_toi_get(b2Contact self) -> float32"},
	 { (char *)"b2Contact_swigregister", b2Contact_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2NullContact", (PyCFunction)_wrap_new_b2NullContact, METH_NOARGS, (char *)"new_b2NullContact() -> b2NullContact"},
	 { (char *)"delete_b2NullContact", (PyCFunction)_wrap_delete_b2NullContact, METH_O, (char *)"delete_b2NullContact(b2NullContact self)"},
	 { (char *)"b2NullContact_swigregister", b2NullContact_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2NullContact_swiginit", b2NullContact_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2ContactManager", (PyCFunction)_wrap_new_b2ContactManager, METH_NOARGS, (char *)"new_b2ContactManager() -> b2ContactManager"},
	 { (char *)"b2ContactManager_Destroy", _wrap_b2ContactManager_Destroy, METH_VARARGS, (char *)"b2ContactManager_Destroy(b2ContactManager self, b2Contact c)"},
	 { (char *)"b2ContactManager_Collide", (PyCFunction)_wrap_b2ContactManager_Collide, METH_O, (char *)"b2ContactManager_Collide(b2ContactManager self)"},
	 { (char *)"b2ContactManager_world_set", _wrap_b2ContactManager_world_set, METH_VARARGS, (char *)"b2ContactManager_world_set(b2ContactManager self, b2World m_world)"},
	 { (char *)"b2ContactManager_world_get", (PyCFunction)_wrap_b2ContactManager_world_get, METH_O, (char *)"b2ContactManager_world_get(b2ContactManager self) -> b2World"},
	 { (char *)"b2ContactManager_nullContact_set", _wrap_b2ContactManager_nullContact_set, METH_VARARGS, (char *)"b2ContactManager_nullContact_set(b2ContactManager self, b2NullContact m_nullContact)"},
	 { (char *)"b2ContactManager_nullContact_get", (PyCFunction)_wrap_b2ContactManager_nullContact_get, METH_O, (char *)"b2ContactManager_nullContact_get(b2ContactManager self) -> b2NullContact"},
	 { (char *)"b2ContactManager_destroyImmediate_set", _wrap_b2ContactManager_destroyImmediate_set, METH_VARARGS, (char *)"b2ContactManager_destroyImmediate_set(b2ContactManager self, bool m_destroyImmediate)"},
	 { (char *)"b2ContactManager_destroyImmediate_get", (PyCFunction)_wrap_b2ContactManager_destroyImmediate_get, METH_O, (char *)"b2ContactManager_destroyImmediate_get(b2ContactManager self) -> bool"},
	 { (char *)"delete_b2ContactManager", (PyCFunction)_wrap_delete_b2ContactManager, METH_O, (char *)"delete_b2ContactManager(b2ContactManager self)"},
	 { (char *)"b2ContactManager_swigregister", b2ContactManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ContactManager_swiginit", b2ContactManager_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2TimeStep_dt_set", _wrap_b2TimeStep_dt_set, METH_VARARGS, (char *)"b2TimeStep_dt_set(b2TimeStep self, float32 dt)"},
	 { (char *)"b2TimeStep_dt_get", (PyCFunction)_wrap_b2TimeStep_dt_get, METH_O, (char *)"b2TimeStep_dt_get(b2TimeStep self) -> float32"},
	 { (char *)"b2TimeStep_inv_dt_set", _wrap_b2TimeStep_inv_dt_set, METH_VARARGS, (char *)"b2TimeStep_inv_dt_set(b2TimeStep self, float32 inv_dt)"},
	 { (char *)"b2TimeStep_inv_dt_get", (PyCFunction)_wrap_b2TimeStep_inv_dt_get, METH_O, (char *)"b2TimeStep_inv_dt_get(b2TimeStep self) -> float32"},
	 { (char *)"b2TimeStep_dtRatio_set", _wrap_b2TimeStep_dtRatio_set, METH_VARARGS, (char *)"b2TimeStep_dtRatio_set(b2TimeStep self, float32 dtRatio)"},
	 { (char *)"b2TimeStep_dtRatio_get", (PyCFunction)_wrap_b2TimeStep_dtRatio_get, METH_O, (char *)"b2TimeStep_dtRatio_get(b2TimeStep self) -> float32"},
	 { (char *)"b2TimeStep_velocityIterations_set", _wrap_b2TimeStep_velocityIterations_set, METH_VARARGS, (char *)"b2TimeStep_velocityIterations_set(b2TimeStep self, int32 velocityIterations)"},
	 { (char *)"b2TimeStep_velocityIterations_get", (PyCFunction)_wrap_b2TimeStep_velocityIterations_get, METH_O, (char *)"b2TimeStep_velocityIterations_get(b2TimeStep self) -> int32"},
	 { (char *)"b2TimeStep_positionIterations_set", _wrap_b2TimeStep_positionIterations_set, METH_VARARGS, (char *)"b2TimeStep_positionIterations_set(b2TimeStep self, int32 positionIterations)"},
	 { (char *)"b2TimeStep_positionIterations_get", (PyCFunction)_wrap_b2TimeStep_positionIterations_get, METH_O, (char *)"b2TimeStep_positionIterations_get(b2TimeStep self) -> int32"},
	 { (char *)"b2TimeStep_warmStarting_set", _wrap_b2TimeStep_warmStarting_set, METH_VARARGS, (char *)"b2TimeStep_warmStarting_set(b2TimeStep self, bool warmStarting)"},
	 { (char *)"b2TimeStep_warmStarting_get", (PyCFunction)_wrap_b2TimeStep_warmStarting_get, METH_O, (char *)"b2TimeStep_warmStarting_get(b2TimeStep self) -> bool"},
	 { (char *)"new_b2TimeStep", (PyCFunction)_wrap_new_b2TimeStep, METH_NOARGS, (char *)"new_b2TimeStep() -> b2TimeStep"},
	 { (char *)"delete_b2TimeStep", (PyCFunction)_wrap_delete_b2TimeStep, METH_O, (char *)"delete_b2TimeStep(b2TimeStep self)"},
	 { (char *)"b2TimeStep_swigregister", b2TimeStep_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2TimeStep_swiginit", b2TimeStep_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2World", _wrap_new_b2World, METH_VARARGS, (char *)"\n"
		"new_b2World(b2AABB worldAABB, b2Vec2 gravity, bool doSleep) -> b2World\n"
		"\n"
		"Construct a world object.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"worldAABB: a bounding box that completely encompasses all your shapes.\n"
		"\n"
		"gravity: the world gravity vector.\n"
		"\n"
		"doSleep: improve performance by not simulating inactive bodies.\n"
		""},
	 { (char *)"delete_b2World", (PyCFunction)_wrap_delete_b2World, METH_O, (char *)"\n"
		"delete_b2World(b2World self)\n"
		"\n"
		"Destruct the world. All physics entities are destroyed and all heap memory is released.\n"
		""},
	 { (char *)"b2World_SetDestructionListener", _wrap_b2World_SetDestructionListener, METH_VARARGS, (char *)"\n"
		"b2World_SetDestructionListener(b2World self, b2DestructionListener listener)\n"
		"\n"
		"Register a destruction listener.\n"
		""},
	 { (char *)"b2World_SetBoundaryListener", _wrap_b2World_SetBoundaryListener, METH_VARARGS, (char *)"\n"
		"b2World_SetBoundaryListener(b2World self, b2BoundaryListener listener)\n"
		"\n"
		"Register a broad-phase boundary listener.\n"
		""},
	 { (char *)"b2World_SetContactFilter", _wrap_b2World_SetContactFilter, METH_VARARGS, (char *)"\n"
		"b2World_SetContactFilter(b2World self, b2ContactFilter filter)\n"
		"\n"
		"Register a contact filter to provide specific control over collision. Otherwise the default filter is used (b2_defaultFilter).\n"
		""},
	 { (char *)"b2World_SetContactListener", _wrap_b2World_SetContactListener, METH_VARARGS, (char *)"\n"
		"b2World_SetContactListener(b2World self, b2ContactListener listener)\n"
		"\n"
		"Register a contact event listener.\n"
		""},
	 { (char *)"b2World_SetDebugDraw", _wrap_b2World_SetDebugDraw, METH_VARARGS, (char *)"\n"
		"b2World_SetDebugDraw(b2World self, b2DebugDraw debugDraw)\n"
		"\n"
		"Register a routine for debug drawing. The debug draw functions are called inside the  b2World::Stepmethod, so make sure your renderer is ready to consume draw commands when you call  Step().\n"
		""},
	 { (char *)"b2World_CreateController", _wrap_b2World_CreateController, METH_VARARGS, (char *)"\n"
		"b2World_CreateController(b2World self, b2ControllerDef _def) -> b2Controller\n"
		"\n"
		"Add a controller to the world.\n"
		""},
	 { (char *)"b2World_DestroyController", _wrap_b2World_DestroyController, METH_VARARGS, (char *)"\n"
		"b2World_DestroyController(b2World self, b2Controller controller)\n"
		"\n"
		"Removes a controller from the world.\n"
		""},
	 { (char *)"b2World_GetGroundBody", (PyCFunction)_wrap_b2World_GetGroundBody, METH_O, (char *)"\n"
		"b2World_GetGroundBody(b2World self) -> b2Body\n"
		"\n"
		"The world provides a single static ground body with no collision shapes. You can use this to simplify the creation of joints and static shapes.\n"
		""},
	 { (char *)"b2World_Step", _wrap_b2World_Step, METH_VARARGS, (char *)"\n"
		"b2World_Step(b2World self, float32 timeStep, int32 velocityIterations, \n"
		"    int32 positionIterations)\n"
		"\n"
		"Take a time step. This performs collision detection, integration, and constraint solution.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"timeStep: the amount of time to simulate, this should not vary.\n"
		"\n"
		"velocityIterations: for the velocity constraint solver.\n"
		"\n"
		"positionIterations: for the position constraint solver.\n"
		""},
	 { (char *)"b2World_InRange", _wrap_b2World_InRange, METH_VARARGS, (char *)"\n"
		"b2World_InRange(b2World self, b2AABB aabb) -> bool\n"
		"\n"
		"Check if the AABB is within the broadphase limits.\n"
		""},
	 { (char *)"b2World__GetBodyList", (PyCFunction)_wrap_b2World__GetBodyList, METH_O, (char *)"\n"
		"b2World__GetBodyList(b2World self) -> b2Body\n"
		"\n"
		"Get the world body list. With the returned body, use  b2Body::GetNextto get the next body in the world list. A NULL body indicates the end of the list. \n"
		"the head of the world body list.\n"
		""},
	 { (char *)"b2World__GetJointList", (PyCFunction)_wrap_b2World__GetJointList, METH_O, (char *)"\n"
		"b2World__GetJointList(b2World self) -> b2Joint\n"
		"\n"
		"Get the world joint list. With the returned joint, use  b2Joint::GetNextto get the next joint in the world list. A NULL joint indicates the end of the list. \n"
		"the head of the world joint list.\n"
		""},
	 { (char *)"b2World__GetControllerList", (PyCFunction)_wrap_b2World__GetControllerList, METH_O, (char *)"\n"
		"b2World__GetControllerList(b2World self) -> b2Controller\n"
		"\n"
		"Get the world controller list. With the returned controller, use  b2Controller::GetNextto get the next controller in the world list. A NULL controller indicates the end of the list. \n"
		"the head of the world controller list.\n"
		""},
	 { (char *)"b2World_Refilter", _wrap_b2World_Refilter, METH_VARARGS, (char *)"\n"
		"b2World_Refilter(b2World self, b2Shape shape)\n"
		"\n"
		"Re-filter a shape. This re-runs contact filtering on a shape.\n"
		""},
	 { (char *)"b2World_SetWarmStarting", _wrap_b2World_SetWarmStarting, METH_VARARGS, (char *)"\n"
		"b2World_SetWarmStarting(b2World self, bool flag)\n"
		"\n"
		"Enable/disable warm starting. For testing.\n"
		""},
	 { (char *)"b2World_SetContinuousPhysics", _wrap_b2World_SetContinuousPhysics, METH_VARARGS, (char *)"\n"
		"b2World_SetContinuousPhysics(b2World self, bool flag)\n"
		"\n"
		"Enable/disable continuous physics. For testing.\n"
		""},
	 { (char *)"b2World_Validate", (PyCFunction)_wrap_b2World_Validate, METH_O, (char *)"\n"
		"b2World_Validate(b2World self)\n"
		"\n"
		"Perform validation of internal data structures.\n"
		""},
	 { (char *)"b2World_GetProxyCount", (PyCFunction)_wrap_b2World_GetProxyCount, METH_O, (char *)"\n"
		"b2World_GetProxyCount(b2World self) -> int32\n"
		"\n"
		"Get the number of broad-phase proxies.\n"
		""},
	 { (char *)"b2World_GetPairCount", (PyCFunction)_wrap_b2World_GetPairCount, METH_O, (char *)"\n"
		"b2World_GetPairCount(b2World self) -> int32\n"
		"\n"
		"Get the number of broad-phase pairs.\n"
		""},
	 { (char *)"b2World_GetBodyCount", (PyCFunction)_wrap_b2World_GetBodyCount, METH_O, (char *)"\n"
		"b2World_GetBodyCount(b2World self) -> int32\n"
		"\n"
		"Get the number of bodies.\n"
		""},
	 { (char *)"b2World_GetJointCount", (PyCFunction)_wrap_b2World_GetJointCount, METH_O, (char *)"\n"
		"b2World_GetJointCount(b2World self) -> int32\n"
		"\n"
		"Get the number of joints.\n"
		""},
	 { (char *)"b2World_GetContactCount", (PyCFunction)_wrap_b2World_GetContactCount, METH_O, (char *)"\n"
		"b2World_GetContactCount(b2World self) -> int32\n"
		"\n"
		"Get the number of contacts (each may have 0 or more contact points).\n"
		""},
	 { (char *)"b2World_GetControllerCount", (PyCFunction)_wrap_b2World_GetControllerCount, METH_O, (char *)"\n"
		"b2World_GetControllerCount(b2World self) -> int32\n"
		"\n"
		"Get the number of controllers.\n"
		""},
	 { (char *)"b2World_SetGravity", _wrap_b2World_SetGravity, METH_VARARGS, (char *)"\n"
		"b2World_SetGravity(b2World self, b2Vec2 gravity)\n"
		"\n"
		"Change the global gravity vector.\n"
		""},
	 { (char *)"b2World_GetGravity", (PyCFunction)_wrap_b2World_GetGravity, METH_O, (char *)"\n"
		"b2World_GetGravity(b2World self) -> b2Vec2\n"
		"\n"
		"Get the global gravity vector.\n"
		""},
	 { (char *)"b2World_GetWorldAABB", (PyCFunction)_wrap_b2World_GetWorldAABB, METH_O, (char *)"\n"
		"b2World_GetWorldAABB(b2World self) -> b2AABB\n"
		"\n"
		"Get the world's AABB.\n"
		""},
	 { (char *)"b2World_CanSleep", (PyCFunction)_wrap_b2World_CanSleep, METH_O, (char *)"\n"
		"b2World_CanSleep(b2World self) -> bool\n"
		"\n"
		"Whether or not bodies can sleep.\n"
		""},
	 { (char *)"b2World_CreateBody", _wrap_b2World_CreateBody, METH_VARARGS, (char *)"\n"
		"b2World_CreateBody(b2World self, b2BodyDef defn) -> b2Body\n"
		"\n"
		"Create a rigid body given a definition. No reference to the definition is retained. \n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2World_CreateJoint", _wrap_b2World_CreateJoint, METH_VARARGS, (char *)"\n"
		"b2World_CreateJoint(b2World self, b2JointDef defn) -> b2Joint\n"
		"\n"
		"Create a joint to constrain bodies together. No reference to the definition is retained. This may cause the connected bodies to cease colliding. \n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2World_DestroyBody", _wrap_b2World_DestroyBody, METH_VARARGS, (char *)"\n"
		"b2World_DestroyBody(b2World self, b2Body body)\n"
		"\n"
		"Destroy a rigid body given a definition. No reference to the definition is retained. This function is locked during callbacks. \n"
		"WARNING: \n"
		"This automatically deletes all associated shapes and joints.\n"
		"\n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2World_DestroyJoint", _wrap_b2World_DestroyJoint, METH_VARARGS, (char *)"\n"
		"b2World_DestroyJoint(b2World self, b2Joint joint)\n"
		"\n"
		"Destroy a joint. This may cause the connected bodies to begin colliding. \n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2World_Raycast", _wrap_b2World_Raycast, METH_VARARGS, (char *)"\n"
		"Raycast(b2Segment segment, b2Shape shapes, int32 maxCount, \n"
		"    bool solidShapes, void $ignore) -> int32\n"
		"b2World_Raycast(b2World self, b2Segment segment, int32 maxCount, bool solidShapes, \n"
		"    PyObject $ignore) -> PyObject\n"
		"\n"
		"Query the world for all shapes that intersect a given segment. You provide a shape pointer buffer of specified size. The number of shapes found is returned, and the buffer is filled in order of intersection\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"segment: \n"
		"defines the begin and end point of the ray cast, from p1 to p2. Use b2Segment.Extend to create (semi-)infinite rays\n"
		"\n"
		"shapes: \n"
		"a user allocated shape pointer array of size maxCount (or greater).\n"
		"\n"
		"maxCount: \n"
		"the capacity of the shapes array\n"
		"\n"
		"solidShapes: \n"
		"determines if shapes that the ray starts in are counted as hits.\n"
		"\n"
		"userData: \n"
		"passed through the worlds contact filter, with method RayCollide. This can be used to filter valid shapes\n"
		"\n"
		"the number of shapes found\n"
		""},
	 { (char *)"b2World_RaycastOne", _wrap_b2World_RaycastOne, METH_VARARGS, (char *)"\n"
		"RaycastOne(b2Segment segment, float32 _lambda, b2Vec2 normal, \n"
		"    bool solidShapes, void $ignore) -> b2Shape\n"
		"b2World_RaycastOne(b2World self, b2Segment segment, bool solidShapes, \n"
		"    PyObject $ignore) -> PyObject\n"
		"\n"
		"Performs a raycast as with Raycast, finding the first intersecting shape.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"segment: \n"
		"defines the begin and end point of the ray cast, from p1 to p2. Use b2Segment.Extend to create (semi-)infinite rays\n"
		"\n"
		"lambda: \n"
		"returns the hit fraction. You can use this to compute the contact point p = (1 - lambda) * segment.p1 + lambda * segment.p2.\n"
		"\n"
		"normal: \n"
		"returns the normal at the contact point. If there is no intersection, the normal is not set.\n"
		"\n"
		"solidShapes: \n"
		"determines if shapes that the ray starts in are counted as hits.\n"
		"\n"
		"the colliding shape shape, or null if not found\n"
		""},
	 { (char *)"b2World_Query", _wrap_b2World_Query, METH_VARARGS, (char *)"\n"
		"Query(b2AABB aabb, b2Shape shapes, int32 maxCount) -> int32\n"
		"b2World_Query(b2World self, b2AABB aabb, uint32 maxCount) -> PyObject\n"
		"\n"
		"Query the world for all shapes that potentially overlap the provided AABB. You provide a shape pointer buffer of specified size. The number of shapes found is returned.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"aabb: the query box.\n"
		"\n"
		"shapes: a user allocated shape pointer array of size maxCount (or greater).\n"
		"\n"
		"maxCount: the capacity of the shapes array.\n"
		"\n"
		"the number of shapes found in aabb.\n"
		""},
	 { (char *)"b2World_swigregister", b2World_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2World_swiginit", b2World_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ControllerEdge_controller_set", _wrap_b2ControllerEdge_controller_set, METH_VARARGS, (char *)"b2ControllerEdge_controller_set(b2ControllerEdge self, b2Controller controller)"},
	 { (char *)"b2ControllerEdge_controller_get", (PyCFunction)_wrap_b2ControllerEdge_controller_get, METH_O, (char *)"b2ControllerEdge_controller_get(b2ControllerEdge self) -> b2Controller"},
	 { (char *)"b2ControllerEdge_body_set", _wrap_b2ControllerEdge_body_set, METH_VARARGS, (char *)"b2ControllerEdge_body_set(b2ControllerEdge self, b2Body body)"},
	 { (char *)"b2ControllerEdge_body_get", (PyCFunction)_wrap_b2ControllerEdge_body_get, METH_O, (char *)"b2ControllerEdge_body_get(b2ControllerEdge self) -> b2Body"},
	 { (char *)"b2ControllerEdge_prevBody_set", _wrap_b2ControllerEdge_prevBody_set, METH_VARARGS, (char *)"b2ControllerEdge_prevBody_set(b2ControllerEdge self, b2ControllerEdge prevBody)"},
	 { (char *)"b2ControllerEdge_prevBody_get", (PyCFunction)_wrap_b2ControllerEdge_prevBody_get, METH_O, (char *)"b2ControllerEdge_prevBody_get(b2ControllerEdge self) -> b2ControllerEdge"},
	 { (char *)"b2ControllerEdge_nextBody_set", _wrap_b2ControllerEdge_nextBody_set, METH_VARARGS, (char *)"b2ControllerEdge_nextBody_set(b2ControllerEdge self, b2ControllerEdge nextBody)"},
	 { (char *)"b2ControllerEdge_nextBody_get", (PyCFunction)_wrap_b2ControllerEdge_nextBody_get, METH_O, (char *)"b2ControllerEdge_nextBody_get(b2ControllerEdge self) -> b2ControllerEdge"},
	 { (char *)"b2ControllerEdge_prevController_set", _wrap_b2ControllerEdge_prevController_set, METH_VARARGS, (char *)"b2ControllerEdge_prevController_set(b2ControllerEdge self, b2ControllerEdge prevController)"},
	 { (char *)"b2ControllerEdge_prevController_get", (PyCFunction)_wrap_b2ControllerEdge_prevController_get, METH_O, (char *)"b2ControllerEdge_prevController_get(b2ControllerEdge self) -> b2ControllerEdge"},
	 { (char *)"b2ControllerEdge_nextController_set", _wrap_b2ControllerEdge_nextController_set, METH_VARARGS, (char *)"b2ControllerEdge_nextController_set(b2ControllerEdge self, b2ControllerEdge nextController)"},
	 { (char *)"b2ControllerEdge_nextController_get", (PyCFunction)_wrap_b2ControllerEdge_nextController_get, METH_O, (char *)"b2ControllerEdge_nextController_get(b2ControllerEdge self) -> b2ControllerEdge"},
	 { (char *)"new_b2ControllerEdge", (PyCFunction)_wrap_new_b2ControllerEdge, METH_NOARGS, (char *)"new_b2ControllerEdge() -> b2ControllerEdge"},
	 { (char *)"delete_b2ControllerEdge", (PyCFunction)_wrap_delete_b2ControllerEdge, METH_O, (char *)"delete_b2ControllerEdge(b2ControllerEdge self)"},
	 { (char *)"b2ControllerEdge_swigregister", b2ControllerEdge_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ControllerEdge_swiginit", b2ControllerEdge_swiginit, METH_VARARGS, NULL},
	 { (char *)"delete_b2Controller", (PyCFunction)_wrap_delete_b2Controller, METH_O, (char *)"delete_b2Controller(b2Controller self)"},
	 { (char *)"b2Controller_Step", _wrap_b2Controller_Step, METH_VARARGS, (char *)"\n"
		"b2Controller_Step(b2Controller self, b2TimeStep step)\n"
		"\n"
		"Controllers override this to implement per-step functionality.\n"
		""},
	 { (char *)"b2Controller_Draw", _wrap_b2Controller_Draw, METH_VARARGS, (char *)"\n"
		"b2Controller_Draw(b2Controller self, b2DebugDraw debugDraw)\n"
		"\n"
		"Controllers override this to provide debug drawing.\n"
		""},
	 { (char *)"b2Controller_AddBody", _wrap_b2Controller_AddBody, METH_VARARGS, (char *)"\n"
		"b2Controller_AddBody(b2Controller self, b2Body body)\n"
		"\n"
		"Adds a body to the controller list.\n"
		""},
	 { (char *)"b2Controller_RemoveBody", _wrap_b2Controller_RemoveBody, METH_VARARGS, (char *)"\n"
		"b2Controller_RemoveBody(b2Controller self, b2Body body)\n"
		"\n"
		"Removes a body from the controller list.\n"
		""},
	 { (char *)"b2Controller_Clear", (PyCFunction)_wrap_b2Controller_Clear, METH_O, (char *)"\n"
		"b2Controller_Clear(b2Controller self)\n"
		"\n"
		"Removes all bodies from the controller list.\n"
		""},
	 { (char *)"b2Controller_GetType", (PyCFunction)_wrap_b2Controller_GetType, METH_O, (char *)"\n"
		"b2Controller_GetType(b2Controller self) -> b2ControllerType\n"
		"\n"
		"Get the type of the controller.\n"
		""},
	 { (char *)"b2Controller_GetNext", (PyCFunction)_wrap_b2Controller_GetNext, METH_O, (char *)"\n"
		"b2Controller_GetNext(b2Controller self) -> b2Controller\n"
		"\n"
		"Get the next controller in the world's body list.\n"
		""},
	 { (char *)"b2Controller_GetWorld", (PyCFunction)_wrap_b2Controller_GetWorld, METH_O, (char *)"\n"
		"b2Controller_GetWorld(b2Controller self) -> b2World\n"
		"\n"
		"Get the parent world of this body.\n"
		""},
	 { (char *)"b2Controller__GetBodyList", (PyCFunction)_wrap_b2Controller__GetBodyList, METH_O, (char *)"\n"
		"b2Controller__GetBodyList(b2Controller self) -> b2ControllerEdge\n"
		"\n"
		"Get the attached body list.\n"
		""},
	 { (char *)"b2Controller___hash__", (PyCFunction)_wrap_b2Controller___hash__, METH_O, (char *)"b2Controller___hash__(b2Controller self) -> long"},
	 { (char *)"b2Controller__asBuoyancyController", (PyCFunction)_wrap_b2Controller__asBuoyancyController, METH_O, (char *)"b2Controller__asBuoyancyController(b2Controller self) -> b2BuoyancyController"},
	 { (char *)"b2Controller__asConstantAccelController", (PyCFunction)_wrap_b2Controller__asConstantAccelController, METH_O, (char *)"b2Controller__asConstantAccelController(b2Controller self) -> b2ConstantAccelController"},
	 { (char *)"b2Controller__asConstantForceController", (PyCFunction)_wrap_b2Controller__asConstantForceController, METH_O, (char *)"b2Controller__asConstantForceController(b2Controller self) -> b2ConstantForceController"},
	 { (char *)"b2Controller__asGravityController", (PyCFunction)_wrap_b2Controller__asGravityController, METH_O, (char *)"b2Controller__asGravityController(b2Controller self) -> b2GravityController"},
	 { (char *)"b2Controller__asTensorDampingController", (PyCFunction)_wrap_b2Controller__asTensorDampingController, METH_O, (char *)"b2Controller__asTensorDampingController(b2Controller self) -> b2TensorDampingController"},
	 { (char *)"b2Controller_swigregister", b2Controller_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_b2ControllerDef", (PyCFunction)_wrap_delete_b2ControllerDef, METH_O, (char *)"delete_b2ControllerDef(b2ControllerDef self)"},
	 { (char *)"b2ControllerDef_swigregister", b2ControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_b2BodyDef", (PyCFunction)_wrap_new_b2BodyDef, METH_NOARGS, (char *)"\n"
		"new_b2BodyDef() -> b2BodyDef\n"
		"\n"
		"This constructor sets the body definition default values.\n"
		""},
	 { (char *)"b2BodyDef_massData_set", _wrap_b2BodyDef_massData_set, METH_VARARGS, (char *)"b2BodyDef_massData_set(b2BodyDef self, b2MassData massData)"},
	 { (char *)"b2BodyDef_massData_get", (PyCFunction)_wrap_b2BodyDef_massData_get, METH_O, (char *)"b2BodyDef_massData_get(b2BodyDef self) -> b2MassData"},
	 { (char *)"b2BodyDef_position_set", _wrap_b2BodyDef_position_set, METH_VARARGS, (char *)"b2BodyDef_position_set(b2BodyDef self, b2Vec2 position)"},
	 { (char *)"b2BodyDef_position_get", (PyCFunction)_wrap_b2BodyDef_position_get, METH_O, (char *)"b2BodyDef_position_get(b2BodyDef self) -> b2Vec2"},
	 { (char *)"b2BodyDef_angle_set", _wrap_b2BodyDef_angle_set, METH_VARARGS, (char *)"b2BodyDef_angle_set(b2BodyDef self, float32 angle)"},
	 { (char *)"b2BodyDef_angle_get", (PyCFunction)_wrap_b2BodyDef_angle_get, METH_O, (char *)"b2BodyDef_angle_get(b2BodyDef self) -> float32"},
	 { (char *)"b2BodyDef_linearDamping_set", _wrap_b2BodyDef_linearDamping_set, METH_VARARGS, (char *)"b2BodyDef_linearDamping_set(b2BodyDef self, float32 linearDamping)"},
	 { (char *)"b2BodyDef_linearDamping_get", (PyCFunction)_wrap_b2BodyDef_linearDamping_get, METH_O, (char *)"b2BodyDef_linearDamping_get(b2BodyDef self) -> float32"},
	 { (char *)"b2BodyDef_angularDamping_set", _wrap_b2BodyDef_angularDamping_set, METH_VARARGS, (char *)"b2BodyDef_angularDamping_set(b2BodyDef self, float32 angularDamping)"},
	 { (char *)"b2BodyDef_angularDamping_get", (PyCFunction)_wrap_b2BodyDef_angularDamping_get, METH_O, (char *)"b2BodyDef_angularDamping_get(b2BodyDef self) -> float32"},
	 { (char *)"b2BodyDef_allowSleep_set", _wrap_b2BodyDef_allowSleep_set, METH_VARARGS, (char *)"b2BodyDef_allowSleep_set(b2BodyDef self, bool allowSleep)"},
	 { (char *)"b2BodyDef_allowSleep_get", (PyCFunction)_wrap_b2BodyDef_allowSleep_get, METH_O, (char *)"b2BodyDef_allowSleep_get(b2BodyDef self) -> bool"},
	 { (char *)"b2BodyDef_isSleeping_set", _wrap_b2BodyDef_isSleeping_set, METH_VARARGS, (char *)"b2BodyDef_isSleeping_set(b2BodyDef self, bool isSleeping)"},
	 { (char *)"b2BodyDef_isSleeping_get", (PyCFunction)_wrap_b2BodyDef_isSleeping_get, METH_O, (char *)"b2BodyDef_isSleeping_get(b2BodyDef self) -> bool"},
	 { (char *)"b2BodyDef_fixedRotation_set", _wrap_b2BodyDef_fixedRotation_set, METH_VARARGS, (char *)"b2BodyDef_fixedRotation_set(b2BodyDef self, bool fixedRotation)"},
	 { (char *)"b2BodyDef_fixedRotation_get", (PyCFunction)_wrap_b2BodyDef_fixedRotation_get, METH_O, (char *)"b2BodyDef_fixedRotation_get(b2BodyDef self) -> bool"},
	 { (char *)"b2BodyDef_isBullet_set", _wrap_b2BodyDef_isBullet_set, METH_VARARGS, (char *)"b2BodyDef_isBullet_set(b2BodyDef self, bool isBullet)"},
	 { (char *)"b2BodyDef_isBullet_get", (PyCFunction)_wrap_b2BodyDef_isBullet_get, METH_O, (char *)"b2BodyDef_isBullet_get(b2BodyDef self) -> bool"},
	 { (char *)"b2BodyDef_GetUserData", (PyCFunction)_wrap_b2BodyDef_GetUserData, METH_O, (char *)"b2BodyDef_GetUserData(b2BodyDef self) -> PyObject"},
	 { (char *)"b2BodyDef_SetUserData", _wrap_b2BodyDef_SetUserData, METH_VARARGS, (char *)"b2BodyDef_SetUserData(b2BodyDef self, PyObject data)"},
	 { (char *)"b2BodyDef_ClearUserData", (PyCFunction)_wrap_b2BodyDef_ClearUserData, METH_O, (char *)"b2BodyDef_ClearUserData(b2BodyDef self)"},
	 { (char *)"delete_b2BodyDef", (PyCFunction)_wrap_delete_b2BodyDef, METH_O, (char *)"delete_b2BodyDef(b2BodyDef self)"},
	 { (char *)"b2BodyDef_swigregister", b2BodyDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BodyDef_swiginit", b2BodyDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2Body_SetMass", _wrap_b2Body_SetMass, METH_VARARGS, (char *)"\n"
		"b2Body_SetMass(b2Body self, b2MassData massData)\n"
		"\n"
		"Set the mass properties. Note that this changes the center of mass position. If you are not sure how to compute mass properties, use SetMassFromShapes. The inertia tensor is assumed to be relative to the center of mass.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"massData: the mass properties.\n"
		""},
	 { (char *)"b2Body_SetMassFromShapes", (PyCFunction)_wrap_b2Body_SetMassFromShapes, METH_O, (char *)"\n"
		"b2Body_SetMassFromShapes(b2Body self)\n"
		"\n"
		"Compute the mass properties from the attached shapes. You typically call this after adding all the shapes. If you add or remove shapes later, you may want to call this again. Note that this changes the center of mass position.\n"
		""},
	 { (char *)"b2Body_SetXForm", _wrap_b2Body_SetXForm, METH_VARARGS, (char *)"\n"
		"b2Body_SetXForm(b2Body self, b2Vec2 position, float32 angle) -> bool\n"
		"\n"
		"Set the position of the body's origin and rotation (radians). This breaks any contacts and wakes the other bodies.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"position: the new world position of the body's origin (not necessarily the center of mass).\n"
		"\n"
		"angle: the new world rotation angle of the body in radians.\n"
		"\n"
		"false if the movement put a shape outside the world. In this case the body is automatically frozen.\n"
		""},
	 { (char *)"b2Body_GetXForm", (PyCFunction)_wrap_b2Body_GetXForm, METH_O, (char *)"\n"
		"b2Body_GetXForm(b2Body self) -> b2XForm\n"
		"\n"
		"Get the body transform for the body's origin. \n"
		"the world transform of the body's origin.\n"
		""},
	 { (char *)"b2Body_GetPosition", (PyCFunction)_wrap_b2Body_GetPosition, METH_O, (char *)"\n"
		"b2Body_GetPosition(b2Body self) -> b2Vec2\n"
		"\n"
		"Get the world body origin position. \n"
		"the world position of the body's origin.\n"
		""},
	 { (char *)"b2Body_GetAngle", (PyCFunction)_wrap_b2Body_GetAngle, METH_O, (char *)"\n"
		"b2Body_GetAngle(b2Body self) -> float32\n"
		"\n"
		"Get the angle in radians. \n"
		"the current world rotation angle in radians.\n"
		""},
	 { (char *)"b2Body_GetWorldCenter", (PyCFunction)_wrap_b2Body_GetWorldCenter, METH_O, (char *)"\n"
		"b2Body_GetWorldCenter(b2Body self) -> b2Vec2\n"
		"\n"
		"Get the world position of the center of mass.\n"
		""},
	 { (char *)"b2Body_GetLocalCenter", (PyCFunction)_wrap_b2Body_GetLocalCenter, METH_O, (char *)"\n"
		"b2Body_GetLocalCenter(b2Body self) -> b2Vec2\n"
		"\n"
		"Get the local position of the center of mass.\n"
		""},
	 { (char *)"b2Body_SetLinearVelocity", _wrap_b2Body_SetLinearVelocity, METH_VARARGS, (char *)"\n"
		"b2Body_SetLinearVelocity(b2Body self, b2Vec2 v)\n"
		"\n"
		"Set the linear velocity of the center of mass.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"v: the new linear velocity of the center of mass.\n"
		""},
	 { (char *)"b2Body_GetLinearVelocity", (PyCFunction)_wrap_b2Body_GetLinearVelocity, METH_O, (char *)"\n"
		"b2Body_GetLinearVelocity(b2Body self) -> b2Vec2\n"
		"\n"
		"Get the linear velocity of the center of mass. \n"
		"the linear velocity of the center of mass.\n"
		""},
	 { (char *)"b2Body_SetAngularVelocity", _wrap_b2Body_SetAngularVelocity, METH_VARARGS, (char *)"\n"
		"b2Body_SetAngularVelocity(b2Body self, float32 omega)\n"
		"\n"
		"Set the angular velocity.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"omega: the new angular velocity in radians/second.\n"
		""},
	 { (char *)"b2Body_GetAngularVelocity", (PyCFunction)_wrap_b2Body_GetAngularVelocity, METH_O, (char *)"\n"
		"b2Body_GetAngularVelocity(b2Body self) -> float32\n"
		"\n"
		"Get the angular velocity. \n"
		"the angular velocity in radians/second.\n"
		""},
	 { (char *)"b2Body_ApplyForce", _wrap_b2Body_ApplyForce, METH_VARARGS, (char *)"\n"
		"b2Body_ApplyForce(b2Body self, b2Vec2 force, b2Vec2 point)\n"
		"\n"
		"Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"force: the world force vector, usually in Newtons (N).\n"
		"\n"
		"point: the world position of the point of application.\n"
		""},
	 { (char *)"b2Body_ApplyTorque", _wrap_b2Body_ApplyTorque, METH_VARARGS, (char *)"\n"
		"b2Body_ApplyTorque(b2Body self, float32 torque)\n"
		"\n"
		"Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"torque: about the z-axis (out of the screen), usually in N-m.\n"
		""},
	 { (char *)"b2Body_ApplyImpulse", _wrap_b2Body_ApplyImpulse, METH_VARARGS, (char *)"\n"
		"b2Body_ApplyImpulse(b2Body self, b2Vec2 impulse, b2Vec2 point)\n"
		"\n"
		"Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"impulse: the world impulse vector, usually in N-seconds or kg-m/s.\n"
		"\n"
		"point: the world position of the point of application.\n"
		""},
	 { (char *)"b2Body_GetMass", (PyCFunction)_wrap_b2Body_GetMass, METH_O, (char *)"\n"
		"b2Body_GetMass(b2Body self) -> float32\n"
		"\n"
		"Get the total mass of the body. \n"
		"the mass, usually in kilograms (kg).\n"
		""},
	 { (char *)"b2Body_GetInertia", (PyCFunction)_wrap_b2Body_GetInertia, METH_O, (char *)"\n"
		"b2Body_GetInertia(b2Body self) -> float32\n"
		"\n"
		"Get the central rotational inertia of the body. \n"
		"the rotational inertia, usually in kg-m^2.\n"
		""},
	 { (char *)"b2Body_GetWorldPoint", _wrap_b2Body_GetWorldPoint, METH_VARARGS, (char *)"\n"
		"b2Body_GetWorldPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"\n"
		"Get the world coordinates of a point given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localPoint: a point on the body measured relative the the body's origin.\n"
		"\n"
		"the same point expressed in world coordinates.\n"
		""},
	 { (char *)"b2Body_GetWorldVector", _wrap_b2Body_GetWorldVector, METH_VARARGS, (char *)"\n"
		"b2Body_GetWorldVector(b2Body self, b2Vec2 localVector) -> b2Vec2\n"
		"\n"
		"Get the world coordinates of a vector given the local coordinates.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"localVector: a vector fixed in the body.\n"
		"\n"
		"the same vector expressed in world coordinates.\n"
		""},
	 { (char *)"b2Body_GetLocalPoint", _wrap_b2Body_GetLocalPoint, METH_VARARGS, (char *)"\n"
		"b2Body_GetLocalPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"\n"
		"Gets a local point relative to the body's origin given a world point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: point in world coordinates.\n"
		"\n"
		"the corresponding local point relative to the body's origin.\n"
		""},
	 { (char *)"b2Body_GetLocalVector", _wrap_b2Body_GetLocalVector, METH_VARARGS, (char *)"\n"
		"b2Body_GetLocalVector(b2Body self, b2Vec2 worldVector) -> b2Vec2\n"
		"\n"
		"Gets a local vector given a world vector.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: vector in world coordinates.\n"
		"\n"
		"the corresponding local vector.\n"
		""},
	 { (char *)"b2Body_GetLinearVelocityFromWorldPoint", _wrap_b2Body_GetLinearVelocityFromWorldPoint, METH_VARARGS, (char *)"\n"
		"b2Body_GetLinearVelocityFromWorldPoint(b2Body self, b2Vec2 worldPoint) -> b2Vec2\n"
		"\n"
		"Get the world linear velocity of a world point attached to this body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: point in world coordinates.\n"
		"\n"
		"the world velocity of a point.\n"
		""},
	 { (char *)"b2Body_GetLinearVelocityFromLocalPoint", _wrap_b2Body_GetLinearVelocityFromLocalPoint, METH_VARARGS, (char *)"\n"
		"b2Body_GetLinearVelocityFromLocalPoint(b2Body self, b2Vec2 localPoint) -> b2Vec2\n"
		"\n"
		"Get the world velocity of a local point.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"a: point in local coordinates.\n"
		"\n"
		"the world velocity of a point.\n"
		""},
	 { (char *)"b2Body_GetLinearDamping", (PyCFunction)_wrap_b2Body_GetLinearDamping, METH_O, (char *)"\n"
		"b2Body_GetLinearDamping(b2Body self) -> float32\n"
		"\n"
		"Get the linear damping.\n"
		""},
	 { (char *)"b2Body_SetLinearDamping", _wrap_b2Body_SetLinearDamping, METH_VARARGS, (char *)"b2Body_SetLinearDamping(b2Body self, float32 linearDamping)"},
	 { (char *)"b2Body_GetAngularDamping", (PyCFunction)_wrap_b2Body_GetAngularDamping, METH_O, (char *)"\n"
		"b2Body_GetAngularDamping(b2Body self) -> float32\n"
		"\n"
		"Get the angular damping.\n"
		""},
	 { (char *)"b2Body_SetAngularDamping", _wrap_b2Body_SetAngularDamping, METH_VARARGS, (char *)"b2Body_SetAngularDamping(b2Body self, float32 angularDamping)"},
	 { (char *)"b2Body_IsBullet", (PyCFunction)_wrap_b2Body_IsBullet, METH_O, (char *)"\n"
		"b2Body_IsBullet(b2Body self) -> bool\n"
		"\n"
		"Is this body treated like a bullet for continuous collision detection?\n"
		""},
	 { (char *)"b2Body_SetBullet", _wrap_b2Body_SetBullet, METH_VARARGS, (char *)"\n"
		"b2Body_SetBullet(b2Body self, bool flag)\n"
		"\n"
		"Should this body be treated like a bullet for continuous collision detection?\n"
		""},
	 { (char *)"b2Body_IsFixedRotation", (PyCFunction)_wrap_b2Body_IsFixedRotation, METH_O, (char *)"b2Body_IsFixedRotation(b2Body self) -> bool"},
	 { (char *)"b2Body_SetFixedRotation", _wrap_b2Body_SetFixedRotation, METH_VARARGS, (char *)"b2Body_SetFixedRotation(b2Body self, bool fixed)"},
	 { (char *)"b2Body_IsStatic", (PyCFunction)_wrap_b2Body_IsStatic, METH_O, (char *)"\n"
		"b2Body_IsStatic(b2Body self) -> bool\n"
		"\n"
		"Is this body static (immovable)?\n"
		""},
	 { (char *)"b2Body_SetStatic", (PyCFunction)_wrap_b2Body_SetStatic, METH_O, (char *)"b2Body_SetStatic(b2Body self)"},
	 { (char *)"b2Body_IsDynamic", (PyCFunction)_wrap_b2Body_IsDynamic, METH_O, (char *)"\n"
		"b2Body_IsDynamic(b2Body self) -> bool\n"
		"\n"
		"Is this body dynamic (movable)?\n"
		""},
	 { (char *)"b2Body_IsFrozen", (PyCFunction)_wrap_b2Body_IsFrozen, METH_O, (char *)"\n"
		"b2Body_IsFrozen(b2Body self) -> bool\n"
		"\n"
		"Is this body frozen?\n"
		""},
	 { (char *)"b2Body_IsSleeping", (PyCFunction)_wrap_b2Body_IsSleeping, METH_O, (char *)"\n"
		"b2Body_IsSleeping(b2Body self) -> bool\n"
		"\n"
		"Is this body sleeping (not simulating).\n"
		""},
	 { (char *)"b2Body_IsAllowSleeping", (PyCFunction)_wrap_b2Body_IsAllowSleeping, METH_O, (char *)"b2Body_IsAllowSleeping(b2Body self) -> bool"},
	 { (char *)"b2Body_AllowSleeping", _wrap_b2Body_AllowSleeping, METH_VARARGS, (char *)"\n"
		"b2Body_AllowSleeping(b2Body self, bool flag)\n"
		"\n"
		"You can disable sleeping on this body.\n"
		""},
	 { (char *)"b2Body_WakeUp", (PyCFunction)_wrap_b2Body_WakeUp, METH_O, (char *)"\n"
		"b2Body_WakeUp(b2Body self)\n"
		"\n"
		"Wake up this body so it will begin simulating.\n"
		""},
	 { (char *)"b2Body_PutToSleep", (PyCFunction)_wrap_b2Body_PutToSleep, METH_O, (char *)"\n"
		"b2Body_PutToSleep(b2Body self)\n"
		"\n"
		"Put this body to sleep so it will stop simulating. This also sets the velocity to zero.\n"
		""},
	 { (char *)"b2Body__GetShapeList", (PyCFunction)_wrap_b2Body__GetShapeList, METH_O, (char *)"\n"
		"b2Body__GetShapeList(b2Body self) -> b2Shape\n"
		"\n"
		"Get the list of all shapes attached to this body.\n"
		""},
	 { (char *)"b2Body_GetJointList", (PyCFunction)_wrap_b2Body_GetJointList, METH_O, (char *)"\n"
		"b2Body_GetJointList(b2Body self) -> b2JointEdge\n"
		"\n"
		"Get the list of all joints attached to this body.\n"
		""},
	 { (char *)"b2Body_GetControllerList", (PyCFunction)_wrap_b2Body_GetControllerList, METH_O, (char *)"\n"
		"b2Body_GetControllerList(b2Body self) -> b2ControllerEdge\n"
		"\n"
		"Get the list of all controllers attached to this body.\n"
		""},
	 { (char *)"b2Body_GetNext", (PyCFunction)_wrap_b2Body_GetNext, METH_O, (char *)"\n"
		"b2Body_GetNext(b2Body self) -> b2Body\n"
		"\n"
		"Get the next body in the world's body list.\n"
		""},
	 { (char *)"b2Body_GetWorld", (PyCFunction)_wrap_b2Body_GetWorld, METH_O, (char *)"\n"
		"b2Body_GetWorld(b2Body self) -> b2World\n"
		"\n"
		"Get the parent world of this body.\n"
		""},
	 { (char *)"b2Body_DestroyShape", _wrap_b2Body_DestroyShape, METH_VARARGS, (char *)"\n"
		"b2Body_DestroyShape(b2Body self, b2Shape shape)\n"
		"\n"
		"Destroy a shape. This removes the shape from the broad-phase and therefore destroys any contacts associated with this shape. All shapes attached to a body are implicitly destroyed when the body is destroyed.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"shape: the shape to be removed.\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2Body_CreateShape", _wrap_b2Body_CreateShape, METH_VARARGS, (char *)"\n"
		"b2Body_CreateShape(b2Body self, b2ShapeDef defn) -> b2Shape\n"
		"\n"
		"Creates a shape and attach it to this body.\n"
		"\n"
		"Parameters:\n"
		"-----------\n"
		"\n"
		"shapeDef: the shape definition.\n"
		"\n"
		"WARNING: \n"
		"This function is locked during callbacks.\n"
		""},
	 { (char *)"b2Body_GetUserData", (PyCFunction)_wrap_b2Body_GetUserData, METH_O, (char *)"\n"
		"b2Body_GetUserData(b2Body self) -> PyObject\n"
		"\n"
		"Get the user data pointer that was provided in the body definition.\n"
		""},
	 { (char *)"b2Body_SetUserData", _wrap_b2Body_SetUserData, METH_VARARGS, (char *)"\n"
		"b2Body_SetUserData(b2Body self, PyObject data)\n"
		"\n"
		"Set the user data. Use this to store your application specific data.\n"
		""},
	 { (char *)"b2Body_ClearUserData", (PyCFunction)_wrap_b2Body_ClearUserData, METH_O, (char *)"b2Body_ClearUserData(b2Body self)"},
	 { (char *)"b2Body___hash__", (PyCFunction)_wrap_b2Body___hash__, METH_O, (char *)"b2Body___hash__(b2Body self) -> long"},
	 { (char *)"b2Body_swigregister", b2Body_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BuoyancyController_normal_set", _wrap_b2BuoyancyController_normal_set, METH_VARARGS, (char *)"b2BuoyancyController_normal_set(b2BuoyancyController self, b2Vec2 normal)"},
	 { (char *)"b2BuoyancyController_normal_get", (PyCFunction)_wrap_b2BuoyancyController_normal_get, METH_O, (char *)"b2BuoyancyController_normal_get(b2BuoyancyController self) -> b2Vec2"},
	 { (char *)"b2BuoyancyController_offset_set", _wrap_b2BuoyancyController_offset_set, METH_VARARGS, (char *)"b2BuoyancyController_offset_set(b2BuoyancyController self, float32 offset)"},
	 { (char *)"b2BuoyancyController_offset_get", (PyCFunction)_wrap_b2BuoyancyController_offset_get, METH_O, (char *)"b2BuoyancyController_offset_get(b2BuoyancyController self) -> float32"},
	 { (char *)"b2BuoyancyController_density_set", _wrap_b2BuoyancyController_density_set, METH_VARARGS, (char *)"b2BuoyancyController_density_set(b2BuoyancyController self, float32 density)"},
	 { (char *)"b2BuoyancyController_density_get", (PyCFunction)_wrap_b2BuoyancyController_density_get, METH_O, (char *)"b2BuoyancyController_density_get(b2BuoyancyController self) -> float32"},
	 { (char *)"b2BuoyancyController_velocity_set", _wrap_b2BuoyancyController_velocity_set, METH_VARARGS, (char *)"b2BuoyancyController_velocity_set(b2BuoyancyController self, b2Vec2 velocity)"},
	 { (char *)"b2BuoyancyController_velocity_get", (PyCFunction)_wrap_b2BuoyancyController_velocity_get, METH_O, (char *)"b2BuoyancyController_velocity_get(b2BuoyancyController self) -> b2Vec2"},
	 { (char *)"b2BuoyancyController_linearDrag_set", _wrap_b2BuoyancyController_linearDrag_set, METH_VARARGS, (char *)"b2BuoyancyController_linearDrag_set(b2BuoyancyController self, float32 linearDrag)"},
	 { (char *)"b2BuoyancyController_linearDrag_get", (PyCFunction)_wrap_b2BuoyancyController_linearDrag_get, METH_O, (char *)"b2BuoyancyController_linearDrag_get(b2BuoyancyController self) -> float32"},
	 { (char *)"b2BuoyancyController_angularDrag_set", _wrap_b2BuoyancyController_angularDrag_set, METH_VARARGS, (char *)"b2BuoyancyController_angularDrag_set(b2BuoyancyController self, float32 angularDrag)"},
	 { (char *)"b2BuoyancyController_angularDrag_get", (PyCFunction)_wrap_b2BuoyancyController_angularDrag_get, METH_O, (char *)"b2BuoyancyController_angularDrag_get(b2BuoyancyController self) -> float32"},
	 { (char *)"b2BuoyancyController_useDensity_set", _wrap_b2BuoyancyController_useDensity_set, METH_VARARGS, (char *)"b2BuoyancyController_useDensity_set(b2BuoyancyController self, bool useDensity)"},
	 { (char *)"b2BuoyancyController_useDensity_get", (PyCFunction)_wrap_b2BuoyancyController_useDensity_get, METH_O, (char *)"b2BuoyancyController_useDensity_get(b2BuoyancyController self) -> bool"},
	 { (char *)"b2BuoyancyController_useWorldGravity_set", _wrap_b2BuoyancyController_useWorldGravity_set, METH_VARARGS, (char *)"b2BuoyancyController_useWorldGravity_set(b2BuoyancyController self, bool useWorldGravity)"},
	 { (char *)"b2BuoyancyController_useWorldGravity_get", (PyCFunction)_wrap_b2BuoyancyController_useWorldGravity_get, METH_O, (char *)"b2BuoyancyController_useWorldGravity_get(b2BuoyancyController self) -> bool"},
	 { (char *)"b2BuoyancyController_gravity_set", _wrap_b2BuoyancyController_gravity_set, METH_VARARGS, (char *)"b2BuoyancyController_gravity_set(b2BuoyancyController self, b2Vec2 gravity)"},
	 { (char *)"b2BuoyancyController_gravity_get", (PyCFunction)_wrap_b2BuoyancyController_gravity_get, METH_O, (char *)"b2BuoyancyController_gravity_get(b2BuoyancyController self) -> b2Vec2"},
	 { (char *)"delete_b2BuoyancyController", (PyCFunction)_wrap_delete_b2BuoyancyController, METH_O, (char *)"delete_b2BuoyancyController(b2BuoyancyController self)"},
	 { (char *)"b2BuoyancyController_swigregister", b2BuoyancyController_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BuoyancyControllerDef_normal_set", _wrap_b2BuoyancyControllerDef_normal_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_normal_set(b2BuoyancyControllerDef self, b2Vec2 normal)"},
	 { (char *)"b2BuoyancyControllerDef_normal_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_normal_get, METH_O, (char *)"b2BuoyancyControllerDef_normal_get(b2BuoyancyControllerDef self) -> b2Vec2"},
	 { (char *)"b2BuoyancyControllerDef_offset_set", _wrap_b2BuoyancyControllerDef_offset_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_offset_set(b2BuoyancyControllerDef self, float32 offset)"},
	 { (char *)"b2BuoyancyControllerDef_offset_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_offset_get, METH_O, (char *)"b2BuoyancyControllerDef_offset_get(b2BuoyancyControllerDef self) -> float32"},
	 { (char *)"b2BuoyancyControllerDef_density_set", _wrap_b2BuoyancyControllerDef_density_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_density_set(b2BuoyancyControllerDef self, float32 density)"},
	 { (char *)"b2BuoyancyControllerDef_density_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_density_get, METH_O, (char *)"b2BuoyancyControllerDef_density_get(b2BuoyancyControllerDef self) -> float32"},
	 { (char *)"b2BuoyancyControllerDef_velocity_set", _wrap_b2BuoyancyControllerDef_velocity_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_velocity_set(b2BuoyancyControllerDef self, b2Vec2 velocity)"},
	 { (char *)"b2BuoyancyControllerDef_velocity_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_velocity_get, METH_O, (char *)"b2BuoyancyControllerDef_velocity_get(b2BuoyancyControllerDef self) -> b2Vec2"},
	 { (char *)"b2BuoyancyControllerDef_linearDrag_set", _wrap_b2BuoyancyControllerDef_linearDrag_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_linearDrag_set(b2BuoyancyControllerDef self, float32 linearDrag)"},
	 { (char *)"b2BuoyancyControllerDef_linearDrag_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_linearDrag_get, METH_O, (char *)"b2BuoyancyControllerDef_linearDrag_get(b2BuoyancyControllerDef self) -> float32"},
	 { (char *)"b2BuoyancyControllerDef_angularDrag_set", _wrap_b2BuoyancyControllerDef_angularDrag_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_angularDrag_set(b2BuoyancyControllerDef self, float32 angularDrag)"},
	 { (char *)"b2BuoyancyControllerDef_angularDrag_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_angularDrag_get, METH_O, (char *)"b2BuoyancyControllerDef_angularDrag_get(b2BuoyancyControllerDef self) -> float32"},
	 { (char *)"b2BuoyancyControllerDef_useDensity_set", _wrap_b2BuoyancyControllerDef_useDensity_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_useDensity_set(b2BuoyancyControllerDef self, bool useDensity)"},
	 { (char *)"b2BuoyancyControllerDef_useDensity_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_useDensity_get, METH_O, (char *)"b2BuoyancyControllerDef_useDensity_get(b2BuoyancyControllerDef self) -> bool"},
	 { (char *)"b2BuoyancyControllerDef_useWorldGravity_set", _wrap_b2BuoyancyControllerDef_useWorldGravity_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_useWorldGravity_set(b2BuoyancyControllerDef self, bool useWorldGravity)"},
	 { (char *)"b2BuoyancyControllerDef_useWorldGravity_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_useWorldGravity_get, METH_O, (char *)"b2BuoyancyControllerDef_useWorldGravity_get(b2BuoyancyControllerDef self) -> bool"},
	 { (char *)"b2BuoyancyControllerDef_gravity_set", _wrap_b2BuoyancyControllerDef_gravity_set, METH_VARARGS, (char *)"b2BuoyancyControllerDef_gravity_set(b2BuoyancyControllerDef self, b2Vec2 gravity)"},
	 { (char *)"b2BuoyancyControllerDef_gravity_get", (PyCFunction)_wrap_b2BuoyancyControllerDef_gravity_get, METH_O, (char *)"b2BuoyancyControllerDef_gravity_get(b2BuoyancyControllerDef self) -> b2Vec2"},
	 { (char *)"new_b2BuoyancyControllerDef", (PyCFunction)_wrap_new_b2BuoyancyControllerDef, METH_NOARGS, (char *)"\n"
		"new_b2BuoyancyControllerDef() -> b2BuoyancyControllerDef\n"
		"\n"
		"This class is used to build buoyancy controllers.\n"
		""},
	 { (char *)"delete_b2BuoyancyControllerDef", (PyCFunction)_wrap_delete_b2BuoyancyControllerDef, METH_O, (char *)"delete_b2BuoyancyControllerDef(b2BuoyancyControllerDef self)"},
	 { (char *)"b2BuoyancyControllerDef_swigregister", b2BuoyancyControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2BuoyancyControllerDef_swiginit", b2BuoyancyControllerDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ConstantAccelController_A_set", _wrap_b2ConstantAccelController_A_set, METH_VARARGS, (char *)"b2ConstantAccelController_A_set(b2ConstantAccelController self, b2Vec2 A)"},
	 { (char *)"b2ConstantAccelController_A_get", (PyCFunction)_wrap_b2ConstantAccelController_A_get, METH_O, (char *)"b2ConstantAccelController_A_get(b2ConstantAccelController self) -> b2Vec2"},
	 { (char *)"delete_b2ConstantAccelController", (PyCFunction)_wrap_delete_b2ConstantAccelController, METH_O, (char *)"delete_b2ConstantAccelController(b2ConstantAccelController self)"},
	 { (char *)"b2ConstantAccelController_swigregister", b2ConstantAccelController_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ConstantAccelControllerDef_A_set", _wrap_b2ConstantAccelControllerDef_A_set, METH_VARARGS, (char *)"b2ConstantAccelControllerDef_A_set(b2ConstantAccelControllerDef self, b2Vec2 A)"},
	 { (char *)"b2ConstantAccelControllerDef_A_get", (PyCFunction)_wrap_b2ConstantAccelControllerDef_A_get, METH_O, (char *)"b2ConstantAccelControllerDef_A_get(b2ConstantAccelControllerDef self) -> b2Vec2"},
	 { (char *)"new_b2ConstantAccelControllerDef", (PyCFunction)_wrap_new_b2ConstantAccelControllerDef, METH_NOARGS, (char *)"new_b2ConstantAccelControllerDef() -> b2ConstantAccelControllerDef"},
	 { (char *)"delete_b2ConstantAccelControllerDef", (PyCFunction)_wrap_delete_b2ConstantAccelControllerDef, METH_O, (char *)"delete_b2ConstantAccelControllerDef(b2ConstantAccelControllerDef self)"},
	 { (char *)"b2ConstantAccelControllerDef_swigregister", b2ConstantAccelControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ConstantAccelControllerDef_swiginit", b2ConstantAccelControllerDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2ConstantForceController_F_set", _wrap_b2ConstantForceController_F_set, METH_VARARGS, (char *)"b2ConstantForceController_F_set(b2ConstantForceController self, b2Vec2 F)"},
	 { (char *)"b2ConstantForceController_F_get", (PyCFunction)_wrap_b2ConstantForceController_F_get, METH_O, (char *)"b2ConstantForceController_F_get(b2ConstantForceController self) -> b2Vec2"},
	 { (char *)"delete_b2ConstantForceController", (PyCFunction)_wrap_delete_b2ConstantForceController, METH_O, (char *)"delete_b2ConstantForceController(b2ConstantForceController self)"},
	 { (char *)"b2ConstantForceController_swigregister", b2ConstantForceController_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ConstantForceControllerDef_F_set", _wrap_b2ConstantForceControllerDef_F_set, METH_VARARGS, (char *)"b2ConstantForceControllerDef_F_set(b2ConstantForceControllerDef self, b2Vec2 F)"},
	 { (char *)"b2ConstantForceControllerDef_F_get", (PyCFunction)_wrap_b2ConstantForceControllerDef_F_get, METH_O, (char *)"b2ConstantForceControllerDef_F_get(b2ConstantForceControllerDef self) -> b2Vec2"},
	 { (char *)"new_b2ConstantForceControllerDef", (PyCFunction)_wrap_new_b2ConstantForceControllerDef, METH_NOARGS, (char *)"new_b2ConstantForceControllerDef() -> b2ConstantForceControllerDef"},
	 { (char *)"delete_b2ConstantForceControllerDef", (PyCFunction)_wrap_delete_b2ConstantForceControllerDef, METH_O, (char *)"delete_b2ConstantForceControllerDef(b2ConstantForceControllerDef self)"},
	 { (char *)"b2ConstantForceControllerDef_swigregister", b2ConstantForceControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2ConstantForceControllerDef_swiginit", b2ConstantForceControllerDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2GravityController_G_set", _wrap_b2GravityController_G_set, METH_VARARGS, (char *)"b2GravityController_G_set(b2GravityController self, float32 G)"},
	 { (char *)"b2GravityController_G_get", (PyCFunction)_wrap_b2GravityController_G_get, METH_O, (char *)"b2GravityController_G_get(b2GravityController self) -> float32"},
	 { (char *)"b2GravityController_invSqr_set", _wrap_b2GravityController_invSqr_set, METH_VARARGS, (char *)"b2GravityController_invSqr_set(b2GravityController self, bool invSqr)"},
	 { (char *)"b2GravityController_invSqr_get", (PyCFunction)_wrap_b2GravityController_invSqr_get, METH_O, (char *)"b2GravityController_invSqr_get(b2GravityController self) -> bool"},
	 { (char *)"delete_b2GravityController", (PyCFunction)_wrap_delete_b2GravityController, METH_O, (char *)"delete_b2GravityController(b2GravityController self)"},
	 { (char *)"b2GravityController_swigregister", b2GravityController_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2GravityControllerDef_G_set", _wrap_b2GravityControllerDef_G_set, METH_VARARGS, (char *)"b2GravityControllerDef_G_set(b2GravityControllerDef self, float32 G)"},
	 { (char *)"b2GravityControllerDef_G_get", (PyCFunction)_wrap_b2GravityControllerDef_G_get, METH_O, (char *)"b2GravityControllerDef_G_get(b2GravityControllerDef self) -> float32"},
	 { (char *)"b2GravityControllerDef_invSqr_set", _wrap_b2GravityControllerDef_invSqr_set, METH_VARARGS, (char *)"b2GravityControllerDef_invSqr_set(b2GravityControllerDef self, bool invSqr)"},
	 { (char *)"b2GravityControllerDef_invSqr_get", (PyCFunction)_wrap_b2GravityControllerDef_invSqr_get, METH_O, (char *)"b2GravityControllerDef_invSqr_get(b2GravityControllerDef self) -> bool"},
	 { (char *)"new_b2GravityControllerDef", (PyCFunction)_wrap_new_b2GravityControllerDef, METH_NOARGS, (char *)"new_b2GravityControllerDef() -> b2GravityControllerDef"},
	 { (char *)"delete_b2GravityControllerDef", (PyCFunction)_wrap_delete_b2GravityControllerDef, METH_O, (char *)"delete_b2GravityControllerDef(b2GravityControllerDef self)"},
	 { (char *)"b2GravityControllerDef_swigregister", b2GravityControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2GravityControllerDef_swiginit", b2GravityControllerDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2TensorDampingController_T_set", _wrap_b2TensorDampingController_T_set, METH_VARARGS, (char *)"b2TensorDampingController_T_set(b2TensorDampingController self, b2Mat22 T)"},
	 { (char *)"b2TensorDampingController_T_get", (PyCFunction)_wrap_b2TensorDampingController_T_get, METH_O, (char *)"b2TensorDampingController_T_get(b2TensorDampingController self) -> b2Mat22"},
	 { (char *)"b2TensorDampingController_maxTimestep_set", _wrap_b2TensorDampingController_maxTimestep_set, METH_VARARGS, (char *)"b2TensorDampingController_maxTimestep_set(b2TensorDampingController self, float32 maxTimestep)"},
	 { (char *)"b2TensorDampingController_maxTimestep_get", (PyCFunction)_wrap_b2TensorDampingController_maxTimestep_get, METH_O, (char *)"b2TensorDampingController_maxTimestep_get(b2TensorDampingController self) -> float32"},
	 { (char *)"delete_b2TensorDampingController", (PyCFunction)_wrap_delete_b2TensorDampingController, METH_O, (char *)"delete_b2TensorDampingController(b2TensorDampingController self)"},
	 { (char *)"b2TensorDampingController_swigregister", b2TensorDampingController_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2TensorDampingControllerDef_T_set", _wrap_b2TensorDampingControllerDef_T_set, METH_VARARGS, (char *)"b2TensorDampingControllerDef_T_set(b2TensorDampingControllerDef self, b2Mat22 T)"},
	 { (char *)"b2TensorDampingControllerDef_T_get", (PyCFunction)_wrap_b2TensorDampingControllerDef_T_get, METH_O, (char *)"b2TensorDampingControllerDef_T_get(b2TensorDampingControllerDef self) -> b2Mat22"},
	 { (char *)"b2TensorDampingControllerDef_maxTimestep_set", _wrap_b2TensorDampingControllerDef_maxTimestep_set, METH_VARARGS, (char *)"b2TensorDampingControllerDef_maxTimestep_set(b2TensorDampingControllerDef self, float32 maxTimestep)"},
	 { (char *)"b2TensorDampingControllerDef_maxTimestep_get", (PyCFunction)_wrap_b2TensorDampingControllerDef_maxTimestep_get, METH_O, (char *)"b2TensorDampingControllerDef_maxTimestep_get(b2TensorDampingControllerDef self) -> float32"},
	 { (char *)"b2TensorDampingControllerDef_SetAxisAligned", _wrap_b2TensorDampingControllerDef_SetAxisAligned, METH_VARARGS, (char *)"\n"
		"b2TensorDampingControllerDef_SetAxisAligned(b2TensorDampingControllerDef self, float32 xDamping, \n"
		"    float32 yDamping)\n"
		"\n"
		"Sets damping independantly along the x and y axes.\n"
		""},
	 { (char *)"new_b2TensorDampingControllerDef", (PyCFunction)_wrap_new_b2TensorDampingControllerDef, METH_NOARGS, (char *)"new_b2TensorDampingControllerDef() -> b2TensorDampingControllerDef"},
	 { (char *)"delete_b2TensorDampingControllerDef", (PyCFunction)_wrap_delete_b2TensorDampingControllerDef, METH_O, (char *)"delete_b2TensorDampingControllerDef(b2TensorDampingControllerDef self)"},
	 { (char *)"b2TensorDampingControllerDef_swigregister", b2TensorDampingControllerDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2TensorDampingControllerDef_swiginit", b2TensorDampingControllerDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2DistanceJointDef", (PyCFunction)_wrap_new_b2DistanceJointDef, METH_NOARGS, (char *)"\n"
		"new_b2DistanceJointDef() -> b2DistanceJointDef\n"
		"\n"
		"Distance joint definition. This requires defining an anchor point on both bodies and the non-zero length of the distance joint. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. This helps when saving and loading a game. \n"
		"WARNING: \n"
		"Do not use a zero or short length.\n"
		""},
	 { (char *)"b2DistanceJointDef_Initialize", _wrap_b2DistanceJointDef_Initialize, METH_VARARGS, (char *)"\n"
		"b2DistanceJointDef_Initialize(b2DistanceJointDef self, b2Body body1, b2Body body2, \n"
		"    b2Vec2 anchor1, b2Vec2 anchor2)\n"
		"\n"
		"Initialize the bodies, anchors, and length using the world anchors.\n"
		""},
	 { (char *)"b2DistanceJointDef_localAnchor1_set", _wrap_b2DistanceJointDef_localAnchor1_set, METH_VARARGS, (char *)"b2DistanceJointDef_localAnchor1_set(b2DistanceJointDef self, b2Vec2 localAnchor1)"},
	 { (char *)"b2DistanceJointDef_localAnchor1_get", (PyCFunction)_wrap_b2DistanceJointDef_localAnchor1_get, METH_O, (char *)"b2DistanceJointDef_localAnchor1_get(b2DistanceJointDef self) -> b2Vec2"},
	 { (char *)"b2DistanceJointDef_localAnchor2_set", _wrap_b2DistanceJointDef_localAnchor2_set, METH_VARARGS, (char *)"b2DistanceJointDef_localAnchor2_set(b2DistanceJointDef self, b2Vec2 localAnchor2)"},
	 { (char *)"b2DistanceJointDef_localAnchor2_get", (PyCFunction)_wrap_b2DistanceJointDef_localAnchor2_get, METH_O, (char *)"b2DistanceJointDef_localAnchor2_get(b2DistanceJointDef self) -> b2Vec2"},
	 { (char *)"b2DistanceJointDef_length_set", _wrap_b2DistanceJointDef_length_set, METH_VARARGS, (char *)"b2DistanceJointDef_length_set(b2DistanceJointDef self, float32 length)"},
	 { (char *)"b2DistanceJointDef_length_get", (PyCFunction)_wrap_b2DistanceJointDef_length_get, METH_O, (char *)"b2DistanceJointDef_length_get(b2DistanceJointDef self) -> float32"},
	 { (char *)"b2DistanceJointDef_frequencyHz_set", _wrap_b2DistanceJointDef_frequencyHz_set, METH_VARARGS, (char *)"b2DistanceJointDef_frequencyHz_set(b2DistanceJointDef self, float32 frequencyHz)"},
	 { (char *)"b2DistanceJointDef_frequencyHz_get", (PyCFunction)_wrap_b2DistanceJointDef_frequencyHz_get, METH_O, (char *)"b2DistanceJointDef_frequencyHz_get(b2DistanceJointDef self) -> float32"},
	 { (char *)"b2DistanceJointDef_dampingRatio_set", _wrap_b2DistanceJointDef_dampingRatio_set, METH_VARARGS, (char *)"b2DistanceJointDef_dampingRatio_set(b2DistanceJointDef self, float32 dampingRatio)"},
	 { (char *)"b2DistanceJointDef_dampingRatio_get", (PyCFunction)_wrap_b2DistanceJointDef_dampingRatio_get, METH_O, (char *)"b2DistanceJointDef_dampingRatio_get(b2DistanceJointDef self) -> float32"},
	 { (char *)"delete_b2DistanceJointDef", (PyCFunction)_wrap_delete_b2DistanceJointDef, METH_O, (char *)"delete_b2DistanceJointDef(b2DistanceJointDef self)"},
	 { (char *)"b2DistanceJointDef_swigregister", b2DistanceJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2DistanceJointDef_swiginit", b2DistanceJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2DistanceJoint", (PyCFunction)_wrap_new_b2DistanceJoint, METH_O, (char *)"\n"
		"new_b2DistanceJoint(b2DistanceJointDef data) -> b2DistanceJoint\n"
		"\n"
		"A distance joint constrains two points on two bodies to remain at a fixed distance from each other. You can view this as a massless, rigid rod.\n"
		""},
	 { (char *)"b2DistanceJoint_InitVelocityConstraints", _wrap_b2DistanceJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2DistanceJoint_InitVelocityConstraints(b2DistanceJoint self, b2TimeStep step)"},
	 { (char *)"b2DistanceJoint_SolveVelocityConstraints", _wrap_b2DistanceJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2DistanceJoint_SolveVelocityConstraints(b2DistanceJoint self, b2TimeStep step)"},
	 { (char *)"b2DistanceJoint_SolvePositionConstraints", _wrap_b2DistanceJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2DistanceJoint_SolvePositionConstraints(b2DistanceJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2DistanceJoint_localAnchor1_set", _wrap_b2DistanceJoint_localAnchor1_set, METH_VARARGS, (char *)"b2DistanceJoint_localAnchor1_set(b2DistanceJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2DistanceJoint_localAnchor1_get", (PyCFunction)_wrap_b2DistanceJoint_localAnchor1_get, METH_O, (char *)"b2DistanceJoint_localAnchor1_get(b2DistanceJoint self) -> b2Vec2"},
	 { (char *)"b2DistanceJoint_localAnchor2_set", _wrap_b2DistanceJoint_localAnchor2_set, METH_VARARGS, (char *)"b2DistanceJoint_localAnchor2_set(b2DistanceJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2DistanceJoint_localAnchor2_get", (PyCFunction)_wrap_b2DistanceJoint_localAnchor2_get, METH_O, (char *)"b2DistanceJoint_localAnchor2_get(b2DistanceJoint self) -> b2Vec2"},
	 { (char *)"b2DistanceJoint_u_set", _wrap_b2DistanceJoint_u_set, METH_VARARGS, (char *)"b2DistanceJoint_u_set(b2DistanceJoint self, b2Vec2 m_u)"},
	 { (char *)"b2DistanceJoint_u_get", (PyCFunction)_wrap_b2DistanceJoint_u_get, METH_O, (char *)"b2DistanceJoint_u_get(b2DistanceJoint self) -> b2Vec2"},
	 { (char *)"b2DistanceJoint_frequencyHz_set", _wrap_b2DistanceJoint_frequencyHz_set, METH_VARARGS, (char *)"b2DistanceJoint_frequencyHz_set(b2DistanceJoint self, float32 m_frequencyHz)"},
	 { (char *)"b2DistanceJoint_frequencyHz_get", (PyCFunction)_wrap_b2DistanceJoint_frequencyHz_get, METH_O, (char *)"b2DistanceJoint_frequencyHz_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_dampingRatio_set", _wrap_b2DistanceJoint_dampingRatio_set, METH_VARARGS, (char *)"b2DistanceJoint_dampingRatio_set(b2DistanceJoint self, float32 m_dampingRatio)"},
	 { (char *)"b2DistanceJoint_dampingRatio_get", (PyCFunction)_wrap_b2DistanceJoint_dampingRatio_get, METH_O, (char *)"b2DistanceJoint_dampingRatio_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_gamma_set", _wrap_b2DistanceJoint_gamma_set, METH_VARARGS, (char *)"b2DistanceJoint_gamma_set(b2DistanceJoint self, float32 m_gamma)"},
	 { (char *)"b2DistanceJoint_gamma_get", (PyCFunction)_wrap_b2DistanceJoint_gamma_get, METH_O, (char *)"b2DistanceJoint_gamma_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_bias_set", _wrap_b2DistanceJoint_bias_set, METH_VARARGS, (char *)"b2DistanceJoint_bias_set(b2DistanceJoint self, float32 m_bias)"},
	 { (char *)"b2DistanceJoint_bias_get", (PyCFunction)_wrap_b2DistanceJoint_bias_get, METH_O, (char *)"b2DistanceJoint_bias_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_impulse_set", _wrap_b2DistanceJoint_impulse_set, METH_VARARGS, (char *)"b2DistanceJoint_impulse_set(b2DistanceJoint self, float32 m_impulse)"},
	 { (char *)"b2DistanceJoint_impulse_get", (PyCFunction)_wrap_b2DistanceJoint_impulse_get, METH_O, (char *)"b2DistanceJoint_impulse_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_mass_set", _wrap_b2DistanceJoint_mass_set, METH_VARARGS, (char *)"b2DistanceJoint_mass_set(b2DistanceJoint self, float32 m_mass)"},
	 { (char *)"b2DistanceJoint_mass_get", (PyCFunction)_wrap_b2DistanceJoint_mass_get, METH_O, (char *)"b2DistanceJoint_mass_get(b2DistanceJoint self) -> float32"},
	 { (char *)"b2DistanceJoint_length_set", _wrap_b2DistanceJoint_length_set, METH_VARARGS, (char *)"b2DistanceJoint_length_set(b2DistanceJoint self, float32 m_length)"},
	 { (char *)"b2DistanceJoint_length_get", (PyCFunction)_wrap_b2DistanceJoint_length_get, METH_O, (char *)"b2DistanceJoint_length_get(b2DistanceJoint self) -> float32"},
	 { (char *)"delete_b2DistanceJoint", (PyCFunction)_wrap_delete_b2DistanceJoint, METH_O, (char *)"delete_b2DistanceJoint(b2DistanceJoint self)"},
	 { (char *)"b2DistanceJoint_swigregister", b2DistanceJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2DistanceJoint_swiginit", b2DistanceJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2GearJointDef", (PyCFunction)_wrap_new_b2GearJointDef, METH_NOARGS, (char *)"\n"
		"new_b2GearJointDef() -> b2GearJointDef\n"
		"\n"
		"Gear joint definition. This definition requires two existing revolute or prismatic joints (any combination will work). The provided joints must attach a dynamic body to a static body.\n"
		""},
	 { (char *)"b2GearJointDef_joint1_set", _wrap_b2GearJointDef_joint1_set, METH_VARARGS, (char *)"b2GearJointDef_joint1_set(b2GearJointDef self, b2Joint joint1)"},
	 { (char *)"b2GearJointDef_joint1_get", (PyCFunction)_wrap_b2GearJointDef_joint1_get, METH_O, (char *)"b2GearJointDef_joint1_get(b2GearJointDef self) -> b2Joint"},
	 { (char *)"b2GearJointDef_joint2_set", _wrap_b2GearJointDef_joint2_set, METH_VARARGS, (char *)"b2GearJointDef_joint2_set(b2GearJointDef self, b2Joint joint2)"},
	 { (char *)"b2GearJointDef_joint2_get", (PyCFunction)_wrap_b2GearJointDef_joint2_get, METH_O, (char *)"b2GearJointDef_joint2_get(b2GearJointDef self) -> b2Joint"},
	 { (char *)"b2GearJointDef_ratio_set", _wrap_b2GearJointDef_ratio_set, METH_VARARGS, (char *)"b2GearJointDef_ratio_set(b2GearJointDef self, float32 ratio)"},
	 { (char *)"b2GearJointDef_ratio_get", (PyCFunction)_wrap_b2GearJointDef_ratio_get, METH_O, (char *)"b2GearJointDef_ratio_get(b2GearJointDef self) -> float32"},
	 { (char *)"delete_b2GearJointDef", (PyCFunction)_wrap_delete_b2GearJointDef, METH_O, (char *)"delete_b2GearJointDef(b2GearJointDef self)"},
	 { (char *)"b2GearJointDef_swigregister", b2GearJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2GearJointDef_swiginit", b2GearJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2GearJoint_GetRatio", (PyCFunction)_wrap_b2GearJoint_GetRatio, METH_O, (char *)"\n"
		"b2GearJoint_GetRatio(b2GearJoint self) -> float32\n"
		"\n"
		"Get the gear ratio.\n"
		""},
	 { (char *)"new_b2GearJoint", (PyCFunction)_wrap_new_b2GearJoint, METH_O, (char *)"\n"
		"new_b2GearJoint(b2GearJointDef data) -> b2GearJoint\n"
		"\n"
		"A gear joint is used to connect two joints together. Either joint can be a revolute or prismatic joint. You specify a gear ratio to bind the motions together: coordinate1 + ratio * coordinate2 = constant The ratio can be negative or positive. If one joint is a revolute joint and the other joint is a prismatic joint, then the ratio will have units of length or units of 1/length. \n"
		"WARNING: \n"
		"The revolute and prismatic joints must be attached to fixed bodies (which must be body1 on those joints).\n"
		""},
	 { (char *)"b2GearJoint_InitVelocityConstraints", _wrap_b2GearJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2GearJoint_InitVelocityConstraints(b2GearJoint self, b2TimeStep step)"},
	 { (char *)"b2GearJoint_SolveVelocityConstraints", _wrap_b2GearJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2GearJoint_SolveVelocityConstraints(b2GearJoint self, b2TimeStep step)"},
	 { (char *)"b2GearJoint_SolvePositionConstraints", _wrap_b2GearJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2GearJoint_SolvePositionConstraints(b2GearJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2GearJoint_ground1_set", _wrap_b2GearJoint_ground1_set, METH_VARARGS, (char *)"b2GearJoint_ground1_set(b2GearJoint self, b2Body m_ground1)"},
	 { (char *)"b2GearJoint_ground1_get", (PyCFunction)_wrap_b2GearJoint_ground1_get, METH_O, (char *)"b2GearJoint_ground1_get(b2GearJoint self) -> b2Body"},
	 { (char *)"b2GearJoint_ground2_set", _wrap_b2GearJoint_ground2_set, METH_VARARGS, (char *)"b2GearJoint_ground2_set(b2GearJoint self, b2Body m_ground2)"},
	 { (char *)"b2GearJoint_ground2_get", (PyCFunction)_wrap_b2GearJoint_ground2_get, METH_O, (char *)"b2GearJoint_ground2_get(b2GearJoint self) -> b2Body"},
	 { (char *)"b2GearJoint_revolute1_set", _wrap_b2GearJoint_revolute1_set, METH_VARARGS, (char *)"b2GearJoint_revolute1_set(b2GearJoint self, b2RevoluteJoint m_revolute1)"},
	 { (char *)"b2GearJoint_revolute1_get", (PyCFunction)_wrap_b2GearJoint_revolute1_get, METH_O, (char *)"b2GearJoint_revolute1_get(b2GearJoint self) -> b2RevoluteJoint"},
	 { (char *)"b2GearJoint_prismatic1_set", _wrap_b2GearJoint_prismatic1_set, METH_VARARGS, (char *)"b2GearJoint_prismatic1_set(b2GearJoint self, b2PrismaticJoint m_prismatic1)"},
	 { (char *)"b2GearJoint_prismatic1_get", (PyCFunction)_wrap_b2GearJoint_prismatic1_get, METH_O, (char *)"b2GearJoint_prismatic1_get(b2GearJoint self) -> b2PrismaticJoint"},
	 { (char *)"b2GearJoint_revolute2_set", _wrap_b2GearJoint_revolute2_set, METH_VARARGS, (char *)"b2GearJoint_revolute2_set(b2GearJoint self, b2RevoluteJoint m_revolute2)"},
	 { (char *)"b2GearJoint_revolute2_get", (PyCFunction)_wrap_b2GearJoint_revolute2_get, METH_O, (char *)"b2GearJoint_revolute2_get(b2GearJoint self) -> b2RevoluteJoint"},
	 { (char *)"b2GearJoint_prismatic2_set", _wrap_b2GearJoint_prismatic2_set, METH_VARARGS, (char *)"b2GearJoint_prismatic2_set(b2GearJoint self, b2PrismaticJoint m_prismatic2)"},
	 { (char *)"b2GearJoint_prismatic2_get", (PyCFunction)_wrap_b2GearJoint_prismatic2_get, METH_O, (char *)"b2GearJoint_prismatic2_get(b2GearJoint self) -> b2PrismaticJoint"},
	 { (char *)"b2GearJoint_groundAnchor1_set", _wrap_b2GearJoint_groundAnchor1_set, METH_VARARGS, (char *)"b2GearJoint_groundAnchor1_set(b2GearJoint self, b2Vec2 m_groundAnchor1)"},
	 { (char *)"b2GearJoint_groundAnchor1_get", (PyCFunction)_wrap_b2GearJoint_groundAnchor1_get, METH_O, (char *)"b2GearJoint_groundAnchor1_get(b2GearJoint self) -> b2Vec2"},
	 { (char *)"b2GearJoint_groundAnchor2_set", _wrap_b2GearJoint_groundAnchor2_set, METH_VARARGS, (char *)"b2GearJoint_groundAnchor2_set(b2GearJoint self, b2Vec2 m_groundAnchor2)"},
	 { (char *)"b2GearJoint_groundAnchor2_get", (PyCFunction)_wrap_b2GearJoint_groundAnchor2_get, METH_O, (char *)"b2GearJoint_groundAnchor2_get(b2GearJoint self) -> b2Vec2"},
	 { (char *)"b2GearJoint_localAnchor1_set", _wrap_b2GearJoint_localAnchor1_set, METH_VARARGS, (char *)"b2GearJoint_localAnchor1_set(b2GearJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2GearJoint_localAnchor1_get", (PyCFunction)_wrap_b2GearJoint_localAnchor1_get, METH_O, (char *)"b2GearJoint_localAnchor1_get(b2GearJoint self) -> b2Vec2"},
	 { (char *)"b2GearJoint_localAnchor2_set", _wrap_b2GearJoint_localAnchor2_set, METH_VARARGS, (char *)"b2GearJoint_localAnchor2_set(b2GearJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2GearJoint_localAnchor2_get", (PyCFunction)_wrap_b2GearJoint_localAnchor2_get, METH_O, (char *)"b2GearJoint_localAnchor2_get(b2GearJoint self) -> b2Vec2"},
	 { (char *)"b2GearJoint_J_set", _wrap_b2GearJoint_J_set, METH_VARARGS, (char *)"b2GearJoint_J_set(b2GearJoint self, b2Jacobian m_J)"},
	 { (char *)"b2GearJoint_J_get", (PyCFunction)_wrap_b2GearJoint_J_get, METH_O, (char *)"b2GearJoint_J_get(b2GearJoint self) -> b2Jacobian"},
	 { (char *)"b2GearJoint_constant_set", _wrap_b2GearJoint_constant_set, METH_VARARGS, (char *)"b2GearJoint_constant_set(b2GearJoint self, float32 m_constant)"},
	 { (char *)"b2GearJoint_constant_get", (PyCFunction)_wrap_b2GearJoint_constant_get, METH_O, (char *)"b2GearJoint_constant_get(b2GearJoint self) -> float32"},
	 { (char *)"b2GearJoint_ratio_set", _wrap_b2GearJoint_ratio_set, METH_VARARGS, (char *)"b2GearJoint_ratio_set(b2GearJoint self, float32 m_ratio)"},
	 { (char *)"b2GearJoint_ratio_get", (PyCFunction)_wrap_b2GearJoint_ratio_get, METH_O, (char *)"b2GearJoint_ratio_get(b2GearJoint self) -> float32"},
	 { (char *)"b2GearJoint_mass_set", _wrap_b2GearJoint_mass_set, METH_VARARGS, (char *)"b2GearJoint_mass_set(b2GearJoint self, float32 m_mass)"},
	 { (char *)"b2GearJoint_mass_get", (PyCFunction)_wrap_b2GearJoint_mass_get, METH_O, (char *)"b2GearJoint_mass_get(b2GearJoint self) -> float32"},
	 { (char *)"b2GearJoint_impulse_set", _wrap_b2GearJoint_impulse_set, METH_VARARGS, (char *)"b2GearJoint_impulse_set(b2GearJoint self, float32 m_impulse)"},
	 { (char *)"b2GearJoint_impulse_get", (PyCFunction)_wrap_b2GearJoint_impulse_get, METH_O, (char *)"b2GearJoint_impulse_get(b2GearJoint self) -> float32"},
	 { (char *)"delete_b2GearJoint", (PyCFunction)_wrap_delete_b2GearJoint, METH_O, (char *)"delete_b2GearJoint(b2GearJoint self)"},
	 { (char *)"b2GearJoint_swigregister", b2GearJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2GearJoint_swiginit", b2GearJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2LineJointDef", (PyCFunction)_wrap_new_b2LineJointDef, METH_NOARGS, (char *)"\n"
		"new_b2LineJointDef() -> b2LineJointDef\n"
		"\n"
		"Line joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game.\n"
		""},
	 { (char *)"b2LineJointDef_Initialize", _wrap_b2LineJointDef_Initialize, METH_VARARGS, (char *)"\n"
		"b2LineJointDef_Initialize(b2LineJointDef self, b2Body body1, b2Body body2, b2Vec2 anchor, \n"
		"    b2Vec2 axis)\n"
		"\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { (char *)"b2LineJointDef_localAnchor1_set", _wrap_b2LineJointDef_localAnchor1_set, METH_VARARGS, (char *)"b2LineJointDef_localAnchor1_set(b2LineJointDef self, b2Vec2 localAnchor1)"},
	 { (char *)"b2LineJointDef_localAnchor1_get", (PyCFunction)_wrap_b2LineJointDef_localAnchor1_get, METH_O, (char *)"b2LineJointDef_localAnchor1_get(b2LineJointDef self) -> b2Vec2"},
	 { (char *)"b2LineJointDef_localAnchor2_set", _wrap_b2LineJointDef_localAnchor2_set, METH_VARARGS, (char *)"b2LineJointDef_localAnchor2_set(b2LineJointDef self, b2Vec2 localAnchor2)"},
	 { (char *)"b2LineJointDef_localAnchor2_get", (PyCFunction)_wrap_b2LineJointDef_localAnchor2_get, METH_O, (char *)"b2LineJointDef_localAnchor2_get(b2LineJointDef self) -> b2Vec2"},
	 { (char *)"b2LineJointDef_localAxis1_set", _wrap_b2LineJointDef_localAxis1_set, METH_VARARGS, (char *)"b2LineJointDef_localAxis1_set(b2LineJointDef self, b2Vec2 localAxis1)"},
	 { (char *)"b2LineJointDef_localAxis1_get", (PyCFunction)_wrap_b2LineJointDef_localAxis1_get, METH_O, (char *)"b2LineJointDef_localAxis1_get(b2LineJointDef self) -> b2Vec2"},
	 { (char *)"b2LineJointDef_enableLimit_set", _wrap_b2LineJointDef_enableLimit_set, METH_VARARGS, (char *)"b2LineJointDef_enableLimit_set(b2LineJointDef self, bool enableLimit)"},
	 { (char *)"b2LineJointDef_enableLimit_get", (PyCFunction)_wrap_b2LineJointDef_enableLimit_get, METH_O, (char *)"b2LineJointDef_enableLimit_get(b2LineJointDef self) -> bool"},
	 { (char *)"b2LineJointDef_lowerTranslation_set", _wrap_b2LineJointDef_lowerTranslation_set, METH_VARARGS, (char *)"b2LineJointDef_lowerTranslation_set(b2LineJointDef self, float32 lowerTranslation)"},
	 { (char *)"b2LineJointDef_lowerTranslation_get", (PyCFunction)_wrap_b2LineJointDef_lowerTranslation_get, METH_O, (char *)"b2LineJointDef_lowerTranslation_get(b2LineJointDef self) -> float32"},
	 { (char *)"b2LineJointDef_upperTranslation_set", _wrap_b2LineJointDef_upperTranslation_set, METH_VARARGS, (char *)"b2LineJointDef_upperTranslation_set(b2LineJointDef self, float32 upperTranslation)"},
	 { (char *)"b2LineJointDef_upperTranslation_get", (PyCFunction)_wrap_b2LineJointDef_upperTranslation_get, METH_O, (char *)"b2LineJointDef_upperTranslation_get(b2LineJointDef self) -> float32"},
	 { (char *)"b2LineJointDef_enableMotor_set", _wrap_b2LineJointDef_enableMotor_set, METH_VARARGS, (char *)"b2LineJointDef_enableMotor_set(b2LineJointDef self, bool enableMotor)"},
	 { (char *)"b2LineJointDef_enableMotor_get", (PyCFunction)_wrap_b2LineJointDef_enableMotor_get, METH_O, (char *)"b2LineJointDef_enableMotor_get(b2LineJointDef self) -> bool"},
	 { (char *)"b2LineJointDef_maxMotorForce_set", _wrap_b2LineJointDef_maxMotorForce_set, METH_VARARGS, (char *)"b2LineJointDef_maxMotorForce_set(b2LineJointDef self, float32 maxMotorForce)"},
	 { (char *)"b2LineJointDef_maxMotorForce_get", (PyCFunction)_wrap_b2LineJointDef_maxMotorForce_get, METH_O, (char *)"b2LineJointDef_maxMotorForce_get(b2LineJointDef self) -> float32"},
	 { (char *)"b2LineJointDef_motorSpeed_set", _wrap_b2LineJointDef_motorSpeed_set, METH_VARARGS, (char *)"b2LineJointDef_motorSpeed_set(b2LineJointDef self, float32 motorSpeed)"},
	 { (char *)"b2LineJointDef_motorSpeed_get", (PyCFunction)_wrap_b2LineJointDef_motorSpeed_get, METH_O, (char *)"b2LineJointDef_motorSpeed_get(b2LineJointDef self) -> float32"},
	 { (char *)"delete_b2LineJointDef", (PyCFunction)_wrap_delete_b2LineJointDef, METH_O, (char *)"delete_b2LineJointDef(b2LineJointDef self)"},
	 { (char *)"b2LineJointDef_swigregister", b2LineJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2LineJointDef_swiginit", b2LineJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2LineJoint_GetJointTranslation", (PyCFunction)_wrap_b2LineJoint_GetJointTranslation, METH_O, (char *)"\n"
		"b2LineJoint_GetJointTranslation(b2LineJoint self) -> float32\n"
		"\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { (char *)"b2LineJoint_GetJointSpeed", (PyCFunction)_wrap_b2LineJoint_GetJointSpeed, METH_O, (char *)"\n"
		"b2LineJoint_GetJointSpeed(b2LineJoint self) -> float32\n"
		"\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { (char *)"b2LineJoint_IsLimitEnabled", (PyCFunction)_wrap_b2LineJoint_IsLimitEnabled, METH_O, (char *)"\n"
		"b2LineJoint_IsLimitEnabled(b2LineJoint self) -> bool\n"
		"\n"
		"Is the joint limit enabled?\n"
		""},
	 { (char *)"b2LineJoint_EnableLimit", _wrap_b2LineJoint_EnableLimit, METH_VARARGS, (char *)"\n"
		"b2LineJoint_EnableLimit(b2LineJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint limit.\n"
		""},
	 { (char *)"b2LineJoint_GetLowerLimit", (PyCFunction)_wrap_b2LineJoint_GetLowerLimit, METH_O, (char *)"\n"
		"b2LineJoint_GetLowerLimit(b2LineJoint self) -> float32\n"
		"\n"
		"Get the lower joint limit, usually in meters.\n"
		""},
	 { (char *)"b2LineJoint_GetUpperLimit", (PyCFunction)_wrap_b2LineJoint_GetUpperLimit, METH_O, (char *)"\n"
		"b2LineJoint_GetUpperLimit(b2LineJoint self) -> float32\n"
		"\n"
		"Get the upper joint limit, usually in meters.\n"
		""},
	 { (char *)"b2LineJoint_SetLimits", _wrap_b2LineJoint_SetLimits, METH_VARARGS, (char *)"\n"
		"b2LineJoint_SetLimits(b2LineJoint self, float32 lower, float32 upper)\n"
		"\n"
		"Set the joint limits, usually in meters.\n"
		""},
	 { (char *)"b2LineJoint_IsMotorEnabled", (PyCFunction)_wrap_b2LineJoint_IsMotorEnabled, METH_O, (char *)"\n"
		"b2LineJoint_IsMotorEnabled(b2LineJoint self) -> bool\n"
		"\n"
		"Is the joint motor enabled?\n"
		""},
	 { (char *)"b2LineJoint_EnableMotor", _wrap_b2LineJoint_EnableMotor, METH_VARARGS, (char *)"\n"
		"b2LineJoint_EnableMotor(b2LineJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint motor.\n"
		""},
	 { (char *)"b2LineJoint_SetMotorSpeed", _wrap_b2LineJoint_SetMotorSpeed, METH_VARARGS, (char *)"\n"
		"b2LineJoint_SetMotorSpeed(b2LineJoint self, float32 speed)\n"
		"\n"
		"Set the motor speed, usually in meters per second.\n"
		""},
	 { (char *)"b2LineJoint_GetMotorSpeed", (PyCFunction)_wrap_b2LineJoint_GetMotorSpeed, METH_O, (char *)"\n"
		"b2LineJoint_GetMotorSpeed(b2LineJoint self) -> float32\n"
		"\n"
		"Get the motor speed, usually in meters per second.\n"
		""},
	 { (char *)"b2LineJoint_SetMaxMotorForce", _wrap_b2LineJoint_SetMaxMotorForce, METH_VARARGS, (char *)"\n"
		"b2LineJoint_SetMaxMotorForce(b2LineJoint self, float32 force)\n"
		"\n"
		"Set the maximum motor force, usually in N.\n"
		""},
	 { (char *)"b2LineJoint_GetMotorForce", (PyCFunction)_wrap_b2LineJoint_GetMotorForce, METH_O, (char *)"\n"
		"b2LineJoint_GetMotorForce(b2LineJoint self) -> float32\n"
		"\n"
		"Get the current motor force, usually in N.\n"
		""},
	 { (char *)"new_b2LineJoint", (PyCFunction)_wrap_new_b2LineJoint, METH_O, (char *)"\n"
		"new_b2LineJoint(b2LineJointDef _def) -> b2LineJoint\n"
		"\n"
		"A line joint. This joint provides one degree of freedom: translation along an axis fixed in body1. You can use a joint limit to restrict the range of motion and a joint motor to drive the motion or to model joint friction.\n"
		""},
	 { (char *)"b2LineJoint_InitVelocityConstraints", _wrap_b2LineJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2LineJoint_InitVelocityConstraints(b2LineJoint self, b2TimeStep step)"},
	 { (char *)"b2LineJoint_SolveVelocityConstraints", _wrap_b2LineJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2LineJoint_SolveVelocityConstraints(b2LineJoint self, b2TimeStep step)"},
	 { (char *)"b2LineJoint_SolvePositionConstraints", _wrap_b2LineJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2LineJoint_SolvePositionConstraints(b2LineJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2LineJoint_localAnchor1_set", _wrap_b2LineJoint_localAnchor1_set, METH_VARARGS, (char *)"b2LineJoint_localAnchor1_set(b2LineJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2LineJoint_localAnchor1_get", (PyCFunction)_wrap_b2LineJoint_localAnchor1_get, METH_O, (char *)"b2LineJoint_localAnchor1_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_localAnchor2_set", _wrap_b2LineJoint_localAnchor2_set, METH_VARARGS, (char *)"b2LineJoint_localAnchor2_set(b2LineJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2LineJoint_localAnchor2_get", (PyCFunction)_wrap_b2LineJoint_localAnchor2_get, METH_O, (char *)"b2LineJoint_localAnchor2_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_localXAxis1_set", _wrap_b2LineJoint_localXAxis1_set, METH_VARARGS, (char *)"b2LineJoint_localXAxis1_set(b2LineJoint self, b2Vec2 m_localXAxis1)"},
	 { (char *)"b2LineJoint_localXAxis1_get", (PyCFunction)_wrap_b2LineJoint_localXAxis1_get, METH_O, (char *)"b2LineJoint_localXAxis1_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_localYAxis1_set", _wrap_b2LineJoint_localYAxis1_set, METH_VARARGS, (char *)"b2LineJoint_localYAxis1_set(b2LineJoint self, b2Vec2 m_localYAxis1)"},
	 { (char *)"b2LineJoint_localYAxis1_get", (PyCFunction)_wrap_b2LineJoint_localYAxis1_get, METH_O, (char *)"b2LineJoint_localYAxis1_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_axis_set", _wrap_b2LineJoint_axis_set, METH_VARARGS, (char *)"b2LineJoint_axis_set(b2LineJoint self, b2Vec2 m_axis)"},
	 { (char *)"b2LineJoint_axis_get", (PyCFunction)_wrap_b2LineJoint_axis_get, METH_O, (char *)"b2LineJoint_axis_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_perp_set", _wrap_b2LineJoint_perp_set, METH_VARARGS, (char *)"b2LineJoint_perp_set(b2LineJoint self, b2Vec2 m_perp)"},
	 { (char *)"b2LineJoint_perp_get", (PyCFunction)_wrap_b2LineJoint_perp_get, METH_O, (char *)"b2LineJoint_perp_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_s1_set", _wrap_b2LineJoint_s1_set, METH_VARARGS, (char *)"b2LineJoint_s1_set(b2LineJoint self, float32 m_s1)"},
	 { (char *)"b2LineJoint_s1_get", (PyCFunction)_wrap_b2LineJoint_s1_get, METH_O, (char *)"b2LineJoint_s1_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_s2_set", _wrap_b2LineJoint_s2_set, METH_VARARGS, (char *)"b2LineJoint_s2_set(b2LineJoint self, float32 m_s2)"},
	 { (char *)"b2LineJoint_s2_get", (PyCFunction)_wrap_b2LineJoint_s2_get, METH_O, (char *)"b2LineJoint_s2_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_a1_set", _wrap_b2LineJoint_a1_set, METH_VARARGS, (char *)"b2LineJoint_a1_set(b2LineJoint self, float32 m_a1)"},
	 { (char *)"b2LineJoint_a1_get", (PyCFunction)_wrap_b2LineJoint_a1_get, METH_O, (char *)"b2LineJoint_a1_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_a2_set", _wrap_b2LineJoint_a2_set, METH_VARARGS, (char *)"b2LineJoint_a2_set(b2LineJoint self, float32 m_a2)"},
	 { (char *)"b2LineJoint_a2_get", (PyCFunction)_wrap_b2LineJoint_a2_get, METH_O, (char *)"b2LineJoint_a2_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_K_set", _wrap_b2LineJoint_K_set, METH_VARARGS, (char *)"b2LineJoint_K_set(b2LineJoint self, b2Mat22 m_K)"},
	 { (char *)"b2LineJoint_K_get", (PyCFunction)_wrap_b2LineJoint_K_get, METH_O, (char *)"b2LineJoint_K_get(b2LineJoint self) -> b2Mat22"},
	 { (char *)"b2LineJoint_impulse_set", _wrap_b2LineJoint_impulse_set, METH_VARARGS, (char *)"b2LineJoint_impulse_set(b2LineJoint self, b2Vec2 m_impulse)"},
	 { (char *)"b2LineJoint_impulse_get", (PyCFunction)_wrap_b2LineJoint_impulse_get, METH_O, (char *)"b2LineJoint_impulse_get(b2LineJoint self) -> b2Vec2"},
	 { (char *)"b2LineJoint_motorMass_set", _wrap_b2LineJoint_motorMass_set, METH_VARARGS, (char *)"b2LineJoint_motorMass_set(b2LineJoint self, float32 m_motorMass)"},
	 { (char *)"b2LineJoint_motorMass_get", (PyCFunction)_wrap_b2LineJoint_motorMass_get, METH_O, (char *)"b2LineJoint_motorMass_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_motorImpulse_set", _wrap_b2LineJoint_motorImpulse_set, METH_VARARGS, (char *)"b2LineJoint_motorImpulse_set(b2LineJoint self, float32 m_motorImpulse)"},
	 { (char *)"b2LineJoint_motorImpulse_get", (PyCFunction)_wrap_b2LineJoint_motorImpulse_get, METH_O, (char *)"b2LineJoint_motorImpulse_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_lowerTranslation_set", _wrap_b2LineJoint_lowerTranslation_set, METH_VARARGS, (char *)"b2LineJoint_lowerTranslation_set(b2LineJoint self, float32 m_lowerTranslation)"},
	 { (char *)"b2LineJoint_lowerTranslation_get", (PyCFunction)_wrap_b2LineJoint_lowerTranslation_get, METH_O, (char *)"b2LineJoint_lowerTranslation_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_upperTranslation_set", _wrap_b2LineJoint_upperTranslation_set, METH_VARARGS, (char *)"b2LineJoint_upperTranslation_set(b2LineJoint self, float32 m_upperTranslation)"},
	 { (char *)"b2LineJoint_upperTranslation_get", (PyCFunction)_wrap_b2LineJoint_upperTranslation_get, METH_O, (char *)"b2LineJoint_upperTranslation_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_maxMotorForce_set", _wrap_b2LineJoint_maxMotorForce_set, METH_VARARGS, (char *)"b2LineJoint_maxMotorForce_set(b2LineJoint self, float32 m_maxMotorForce)"},
	 { (char *)"b2LineJoint_maxMotorForce_get", (PyCFunction)_wrap_b2LineJoint_maxMotorForce_get, METH_O, (char *)"b2LineJoint_maxMotorForce_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_motorSpeed_set", _wrap_b2LineJoint_motorSpeed_set, METH_VARARGS, (char *)"b2LineJoint_motorSpeed_set(b2LineJoint self, float32 m_motorSpeed)"},
	 { (char *)"b2LineJoint_motorSpeed_get", (PyCFunction)_wrap_b2LineJoint_motorSpeed_get, METH_O, (char *)"b2LineJoint_motorSpeed_get(b2LineJoint self) -> float32"},
	 { (char *)"b2LineJoint_enableLimit_set", _wrap_b2LineJoint_enableLimit_set, METH_VARARGS, (char *)"b2LineJoint_enableLimit_set(b2LineJoint self, bool m_enableLimit)"},
	 { (char *)"b2LineJoint_enableLimit_get", (PyCFunction)_wrap_b2LineJoint_enableLimit_get, METH_O, (char *)"b2LineJoint_enableLimit_get(b2LineJoint self) -> bool"},
	 { (char *)"b2LineJoint_enableMotor_set", _wrap_b2LineJoint_enableMotor_set, METH_VARARGS, (char *)"b2LineJoint_enableMotor_set(b2LineJoint self, bool m_enableMotor)"},
	 { (char *)"b2LineJoint_enableMotor_get", (PyCFunction)_wrap_b2LineJoint_enableMotor_get, METH_O, (char *)"b2LineJoint_enableMotor_get(b2LineJoint self) -> bool"},
	 { (char *)"b2LineJoint_limitState_set", _wrap_b2LineJoint_limitState_set, METH_VARARGS, (char *)"b2LineJoint_limitState_set(b2LineJoint self, b2LimitState m_limitState)"},
	 { (char *)"b2LineJoint_limitState_get", (PyCFunction)_wrap_b2LineJoint_limitState_get, METH_O, (char *)"b2LineJoint_limitState_get(b2LineJoint self) -> b2LimitState"},
	 { (char *)"delete_b2LineJoint", (PyCFunction)_wrap_delete_b2LineJoint, METH_O, (char *)"delete_b2LineJoint(b2LineJoint self)"},
	 { (char *)"b2LineJoint_swigregister", b2LineJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2LineJoint_swiginit", b2LineJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2MouseJointDef", (PyCFunction)_wrap_new_b2MouseJointDef, METH_NOARGS, (char *)"\n"
		"new_b2MouseJointDef() -> b2MouseJointDef\n"
		"\n"
		"Mouse joint definition. This requires a world target point, tuning parameters, and the time step.\n"
		""},
	 { (char *)"b2MouseJointDef_target_set", _wrap_b2MouseJointDef_target_set, METH_VARARGS, (char *)"b2MouseJointDef_target_set(b2MouseJointDef self, b2Vec2 target)"},
	 { (char *)"b2MouseJointDef_target_get", (PyCFunction)_wrap_b2MouseJointDef_target_get, METH_O, (char *)"b2MouseJointDef_target_get(b2MouseJointDef self) -> b2Vec2"},
	 { (char *)"b2MouseJointDef_maxForce_set", _wrap_b2MouseJointDef_maxForce_set, METH_VARARGS, (char *)"b2MouseJointDef_maxForce_set(b2MouseJointDef self, float32 maxForce)"},
	 { (char *)"b2MouseJointDef_maxForce_get", (PyCFunction)_wrap_b2MouseJointDef_maxForce_get, METH_O, (char *)"b2MouseJointDef_maxForce_get(b2MouseJointDef self) -> float32"},
	 { (char *)"b2MouseJointDef_frequencyHz_set", _wrap_b2MouseJointDef_frequencyHz_set, METH_VARARGS, (char *)"b2MouseJointDef_frequencyHz_set(b2MouseJointDef self, float32 frequencyHz)"},
	 { (char *)"b2MouseJointDef_frequencyHz_get", (PyCFunction)_wrap_b2MouseJointDef_frequencyHz_get, METH_O, (char *)"b2MouseJointDef_frequencyHz_get(b2MouseJointDef self) -> float32"},
	 { (char *)"b2MouseJointDef_dampingRatio_set", _wrap_b2MouseJointDef_dampingRatio_set, METH_VARARGS, (char *)"b2MouseJointDef_dampingRatio_set(b2MouseJointDef self, float32 dampingRatio)"},
	 { (char *)"b2MouseJointDef_dampingRatio_get", (PyCFunction)_wrap_b2MouseJointDef_dampingRatio_get, METH_O, (char *)"b2MouseJointDef_dampingRatio_get(b2MouseJointDef self) -> float32"},
	 { (char *)"delete_b2MouseJointDef", (PyCFunction)_wrap_delete_b2MouseJointDef, METH_O, (char *)"delete_b2MouseJointDef(b2MouseJointDef self)"},
	 { (char *)"b2MouseJointDef_swigregister", b2MouseJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2MouseJointDef_swiginit", b2MouseJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2MouseJoint_SetTarget", _wrap_b2MouseJoint_SetTarget, METH_VARARGS, (char *)"\n"
		"b2MouseJoint_SetTarget(b2MouseJoint self, b2Vec2 target)\n"
		"\n"
		"Use this to update the target point.\n"
		""},
	 { (char *)"new_b2MouseJoint", (PyCFunction)_wrap_new_b2MouseJoint, METH_O, (char *)"\n"
		"new_b2MouseJoint(b2MouseJointDef _def) -> b2MouseJoint\n"
		"\n"
		"A mouse joint is used to make a point on a body track a specified world point. This a soft constraint with a maximum force. This allows the constraint to stretch and without applying huge forces.\n"
		""},
	 { (char *)"b2MouseJoint_InitVelocityConstraints", _wrap_b2MouseJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2MouseJoint_InitVelocityConstraints(b2MouseJoint self, b2TimeStep step)"},
	 { (char *)"b2MouseJoint_SolveVelocityConstraints", _wrap_b2MouseJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2MouseJoint_SolveVelocityConstraints(b2MouseJoint self, b2TimeStep step)"},
	 { (char *)"b2MouseJoint_SolvePositionConstraints", _wrap_b2MouseJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2MouseJoint_SolvePositionConstraints(b2MouseJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2MouseJoint_localAnchor_set", _wrap_b2MouseJoint_localAnchor_set, METH_VARARGS, (char *)"b2MouseJoint_localAnchor_set(b2MouseJoint self, b2Vec2 m_localAnchor)"},
	 { (char *)"b2MouseJoint_localAnchor_get", (PyCFunction)_wrap_b2MouseJoint_localAnchor_get, METH_O, (char *)"b2MouseJoint_localAnchor_get(b2MouseJoint self) -> b2Vec2"},
	 { (char *)"b2MouseJoint_target_set", _wrap_b2MouseJoint_target_set, METH_VARARGS, (char *)"b2MouseJoint_target_set(b2MouseJoint self, b2Vec2 m_target)"},
	 { (char *)"b2MouseJoint_target_get", (PyCFunction)_wrap_b2MouseJoint_target_get, METH_O, (char *)"b2MouseJoint_target_get(b2MouseJoint self) -> b2Vec2"},
	 { (char *)"b2MouseJoint_impulse_set", _wrap_b2MouseJoint_impulse_set, METH_VARARGS, (char *)"b2MouseJoint_impulse_set(b2MouseJoint self, b2Vec2 m_impulse)"},
	 { (char *)"b2MouseJoint_impulse_get", (PyCFunction)_wrap_b2MouseJoint_impulse_get, METH_O, (char *)"b2MouseJoint_impulse_get(b2MouseJoint self) -> b2Vec2"},
	 { (char *)"b2MouseJoint_mass_set", _wrap_b2MouseJoint_mass_set, METH_VARARGS, (char *)"b2MouseJoint_mass_set(b2MouseJoint self, b2Mat22 m_mass)"},
	 { (char *)"b2MouseJoint_mass_get", (PyCFunction)_wrap_b2MouseJoint_mass_get, METH_O, (char *)"b2MouseJoint_mass_get(b2MouseJoint self) -> b2Mat22"},
	 { (char *)"b2MouseJoint_C_set", _wrap_b2MouseJoint_C_set, METH_VARARGS, (char *)"b2MouseJoint_C_set(b2MouseJoint self, b2Vec2 m_C)"},
	 { (char *)"b2MouseJoint_C_get", (PyCFunction)_wrap_b2MouseJoint_C_get, METH_O, (char *)"b2MouseJoint_C_get(b2MouseJoint self) -> b2Vec2"},
	 { (char *)"b2MouseJoint_maxForce_set", _wrap_b2MouseJoint_maxForce_set, METH_VARARGS, (char *)"b2MouseJoint_maxForce_set(b2MouseJoint self, float32 m_maxForce)"},
	 { (char *)"b2MouseJoint_maxForce_get", (PyCFunction)_wrap_b2MouseJoint_maxForce_get, METH_O, (char *)"b2MouseJoint_maxForce_get(b2MouseJoint self) -> float32"},
	 { (char *)"b2MouseJoint_frequencyHz_set", _wrap_b2MouseJoint_frequencyHz_set, METH_VARARGS, (char *)"b2MouseJoint_frequencyHz_set(b2MouseJoint self, float32 m_frequencyHz)"},
	 { (char *)"b2MouseJoint_frequencyHz_get", (PyCFunction)_wrap_b2MouseJoint_frequencyHz_get, METH_O, (char *)"b2MouseJoint_frequencyHz_get(b2MouseJoint self) -> float32"},
	 { (char *)"b2MouseJoint_dampingRatio_set", _wrap_b2MouseJoint_dampingRatio_set, METH_VARARGS, (char *)"b2MouseJoint_dampingRatio_set(b2MouseJoint self, float32 m_dampingRatio)"},
	 { (char *)"b2MouseJoint_dampingRatio_get", (PyCFunction)_wrap_b2MouseJoint_dampingRatio_get, METH_O, (char *)"b2MouseJoint_dampingRatio_get(b2MouseJoint self) -> float32"},
	 { (char *)"b2MouseJoint_beta_set", _wrap_b2MouseJoint_beta_set, METH_VARARGS, (char *)"b2MouseJoint_beta_set(b2MouseJoint self, float32 m_beta)"},
	 { (char *)"b2MouseJoint_beta_get", (PyCFunction)_wrap_b2MouseJoint_beta_get, METH_O, (char *)"b2MouseJoint_beta_get(b2MouseJoint self) -> float32"},
	 { (char *)"b2MouseJoint_gamma_set", _wrap_b2MouseJoint_gamma_set, METH_VARARGS, (char *)"b2MouseJoint_gamma_set(b2MouseJoint self, float32 m_gamma)"},
	 { (char *)"b2MouseJoint_gamma_get", (PyCFunction)_wrap_b2MouseJoint_gamma_get, METH_O, (char *)"b2MouseJoint_gamma_get(b2MouseJoint self) -> float32"},
	 { (char *)"delete_b2MouseJoint", (PyCFunction)_wrap_delete_b2MouseJoint, METH_O, (char *)"delete_b2MouseJoint(b2MouseJoint self)"},
	 { (char *)"b2MouseJoint_swigregister", b2MouseJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2MouseJoint_swiginit", b2MouseJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2PrismaticJointDef", (PyCFunction)_wrap_new_b2PrismaticJointDef, METH_NOARGS, (char *)"\n"
		"new_b2PrismaticJointDef() -> b2PrismaticJointDef\n"
		"\n"
		"Prismatic joint definition. This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving and loading a game.\n"
		""},
	 { (char *)"b2PrismaticJointDef_Initialize", _wrap_b2PrismaticJointDef_Initialize, METH_VARARGS, (char *)"\n"
		"b2PrismaticJointDef_Initialize(b2PrismaticJointDef self, b2Body body1, b2Body body2, \n"
		"    b2Vec2 anchor, b2Vec2 axis)\n"
		"\n"
		"Initialize the bodies, anchors, axis, and reference angle using the world anchor and world axis.\n"
		""},
	 { (char *)"b2PrismaticJointDef_localAnchor1_set", _wrap_b2PrismaticJointDef_localAnchor1_set, METH_VARARGS, (char *)"b2PrismaticJointDef_localAnchor1_set(b2PrismaticJointDef self, b2Vec2 localAnchor1)"},
	 { (char *)"b2PrismaticJointDef_localAnchor1_get", (PyCFunction)_wrap_b2PrismaticJointDef_localAnchor1_get, METH_O, (char *)"b2PrismaticJointDef_localAnchor1_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { (char *)"b2PrismaticJointDef_localAnchor2_set", _wrap_b2PrismaticJointDef_localAnchor2_set, METH_VARARGS, (char *)"b2PrismaticJointDef_localAnchor2_set(b2PrismaticJointDef self, b2Vec2 localAnchor2)"},
	 { (char *)"b2PrismaticJointDef_localAnchor2_get", (PyCFunction)_wrap_b2PrismaticJointDef_localAnchor2_get, METH_O, (char *)"b2PrismaticJointDef_localAnchor2_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { (char *)"b2PrismaticJointDef_localAxis1_set", _wrap_b2PrismaticJointDef_localAxis1_set, METH_VARARGS, (char *)"b2PrismaticJointDef_localAxis1_set(b2PrismaticJointDef self, b2Vec2 localAxis1)"},
	 { (char *)"b2PrismaticJointDef_localAxis1_get", (PyCFunction)_wrap_b2PrismaticJointDef_localAxis1_get, METH_O, (char *)"b2PrismaticJointDef_localAxis1_get(b2PrismaticJointDef self) -> b2Vec2"},
	 { (char *)"b2PrismaticJointDef_referenceAngle_set", _wrap_b2PrismaticJointDef_referenceAngle_set, METH_VARARGS, (char *)"b2PrismaticJointDef_referenceAngle_set(b2PrismaticJointDef self, float32 referenceAngle)"},
	 { (char *)"b2PrismaticJointDef_referenceAngle_get", (PyCFunction)_wrap_b2PrismaticJointDef_referenceAngle_get, METH_O, (char *)"b2PrismaticJointDef_referenceAngle_get(b2PrismaticJointDef self) -> float32"},
	 { (char *)"b2PrismaticJointDef_enableLimit_set", _wrap_b2PrismaticJointDef_enableLimit_set, METH_VARARGS, (char *)"b2PrismaticJointDef_enableLimit_set(b2PrismaticJointDef self, bool enableLimit)"},
	 { (char *)"b2PrismaticJointDef_enableLimit_get", (PyCFunction)_wrap_b2PrismaticJointDef_enableLimit_get, METH_O, (char *)"b2PrismaticJointDef_enableLimit_get(b2PrismaticJointDef self) -> bool"},
	 { (char *)"b2PrismaticJointDef_lowerTranslation_set", _wrap_b2PrismaticJointDef_lowerTranslation_set, METH_VARARGS, (char *)"b2PrismaticJointDef_lowerTranslation_set(b2PrismaticJointDef self, float32 lowerTranslation)"},
	 { (char *)"b2PrismaticJointDef_lowerTranslation_get", (PyCFunction)_wrap_b2PrismaticJointDef_lowerTranslation_get, METH_O, (char *)"b2PrismaticJointDef_lowerTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { (char *)"b2PrismaticJointDef_upperTranslation_set", _wrap_b2PrismaticJointDef_upperTranslation_set, METH_VARARGS, (char *)"b2PrismaticJointDef_upperTranslation_set(b2PrismaticJointDef self, float32 upperTranslation)"},
	 { (char *)"b2PrismaticJointDef_upperTranslation_get", (PyCFunction)_wrap_b2PrismaticJointDef_upperTranslation_get, METH_O, (char *)"b2PrismaticJointDef_upperTranslation_get(b2PrismaticJointDef self) -> float32"},
	 { (char *)"b2PrismaticJointDef_enableMotor_set", _wrap_b2PrismaticJointDef_enableMotor_set, METH_VARARGS, (char *)"b2PrismaticJointDef_enableMotor_set(b2PrismaticJointDef self, bool enableMotor)"},
	 { (char *)"b2PrismaticJointDef_enableMotor_get", (PyCFunction)_wrap_b2PrismaticJointDef_enableMotor_get, METH_O, (char *)"b2PrismaticJointDef_enableMotor_get(b2PrismaticJointDef self) -> bool"},
	 { (char *)"b2PrismaticJointDef_maxMotorForce_set", _wrap_b2PrismaticJointDef_maxMotorForce_set, METH_VARARGS, (char *)"b2PrismaticJointDef_maxMotorForce_set(b2PrismaticJointDef self, float32 maxMotorForce)"},
	 { (char *)"b2PrismaticJointDef_maxMotorForce_get", (PyCFunction)_wrap_b2PrismaticJointDef_maxMotorForce_get, METH_O, (char *)"b2PrismaticJointDef_maxMotorForce_get(b2PrismaticJointDef self) -> float32"},
	 { (char *)"b2PrismaticJointDef_motorSpeed_set", _wrap_b2PrismaticJointDef_motorSpeed_set, METH_VARARGS, (char *)"b2PrismaticJointDef_motorSpeed_set(b2PrismaticJointDef self, float32 motorSpeed)"},
	 { (char *)"b2PrismaticJointDef_motorSpeed_get", (PyCFunction)_wrap_b2PrismaticJointDef_motorSpeed_get, METH_O, (char *)"b2PrismaticJointDef_motorSpeed_get(b2PrismaticJointDef self) -> float32"},
	 { (char *)"delete_b2PrismaticJointDef", (PyCFunction)_wrap_delete_b2PrismaticJointDef, METH_O, (char *)"delete_b2PrismaticJointDef(b2PrismaticJointDef self)"},
	 { (char *)"b2PrismaticJointDef_swigregister", b2PrismaticJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PrismaticJointDef_swiginit", b2PrismaticJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2PrismaticJoint_GetJointTranslation", (PyCFunction)_wrap_b2PrismaticJoint_GetJointTranslation, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetJointTranslation(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the current joint translation, usually in meters.\n"
		""},
	 { (char *)"b2PrismaticJoint_GetJointSpeed", (PyCFunction)_wrap_b2PrismaticJoint_GetJointSpeed, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetJointSpeed(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the current joint translation speed, usually in meters per second.\n"
		""},
	 { (char *)"b2PrismaticJoint_IsLimitEnabled", (PyCFunction)_wrap_b2PrismaticJoint_IsLimitEnabled, METH_O, (char *)"\n"
		"b2PrismaticJoint_IsLimitEnabled(b2PrismaticJoint self) -> bool\n"
		"\n"
		"Is the joint limit enabled?\n"
		""},
	 { (char *)"b2PrismaticJoint_EnableLimit", _wrap_b2PrismaticJoint_EnableLimit, METH_VARARGS, (char *)"\n"
		"b2PrismaticJoint_EnableLimit(b2PrismaticJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint limit.\n"
		""},
	 { (char *)"b2PrismaticJoint_GetLowerLimit", (PyCFunction)_wrap_b2PrismaticJoint_GetLowerLimit, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetLowerLimit(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the lower joint limit, usually in meters.\n"
		""},
	 { (char *)"b2PrismaticJoint_GetUpperLimit", (PyCFunction)_wrap_b2PrismaticJoint_GetUpperLimit, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetUpperLimit(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the upper joint limit, usually in meters.\n"
		""},
	 { (char *)"b2PrismaticJoint_SetLimits", _wrap_b2PrismaticJoint_SetLimits, METH_VARARGS, (char *)"\n"
		"b2PrismaticJoint_SetLimits(b2PrismaticJoint self, float32 lower, float32 upper)\n"
		"\n"
		"Set the joint limits, usually in meters.\n"
		""},
	 { (char *)"b2PrismaticJoint_IsMotorEnabled", (PyCFunction)_wrap_b2PrismaticJoint_IsMotorEnabled, METH_O, (char *)"\n"
		"b2PrismaticJoint_IsMotorEnabled(b2PrismaticJoint self) -> bool\n"
		"\n"
		"Is the joint motor enabled?\n"
		""},
	 { (char *)"b2PrismaticJoint_EnableMotor", _wrap_b2PrismaticJoint_EnableMotor, METH_VARARGS, (char *)"\n"
		"b2PrismaticJoint_EnableMotor(b2PrismaticJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint motor.\n"
		""},
	 { (char *)"b2PrismaticJoint_SetMotorSpeed", _wrap_b2PrismaticJoint_SetMotorSpeed, METH_VARARGS, (char *)"\n"
		"b2PrismaticJoint_SetMotorSpeed(b2PrismaticJoint self, float32 speed)\n"
		"\n"
		"Set the motor speed, usually in meters per second.\n"
		""},
	 { (char *)"b2PrismaticJoint_GetMotorSpeed", (PyCFunction)_wrap_b2PrismaticJoint_GetMotorSpeed, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetMotorSpeed(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the motor speed, usually in meters per second.\n"
		""},
	 { (char *)"b2PrismaticJoint_SetMaxMotorForce", _wrap_b2PrismaticJoint_SetMaxMotorForce, METH_VARARGS, (char *)"\n"
		"b2PrismaticJoint_SetMaxMotorForce(b2PrismaticJoint self, float32 force)\n"
		"\n"
		"Set the maximum motor force, usually in N.\n"
		""},
	 { (char *)"b2PrismaticJoint_GetMotorForce", (PyCFunction)_wrap_b2PrismaticJoint_GetMotorForce, METH_O, (char *)"\n"
		"b2PrismaticJoint_GetMotorForce(b2PrismaticJoint self) -> float32\n"
		"\n"
		"Get the current motor force, usually in N.\n"
		""},
	 { (char *)"new_b2PrismaticJoint", (PyCFunction)_wrap_new_b2PrismaticJoint, METH_O, (char *)"\n"
		"new_b2PrismaticJoint(b2PrismaticJointDef _def) -> b2PrismaticJoint\n"
		"\n"
		"A prismatic joint. This joint provides one degree of freedom: translation along an axis fixed in body1. Relative rotation is prevented. You can use a joint limit to restrict the range of motion and a joint motor to drive the motion or to model joint friction.\n"
		""},
	 { (char *)"b2PrismaticJoint_InitVelocityConstraints", _wrap_b2PrismaticJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2PrismaticJoint_InitVelocityConstraints(b2PrismaticJoint self, b2TimeStep step)"},
	 { (char *)"b2PrismaticJoint_SolveVelocityConstraints", _wrap_b2PrismaticJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2PrismaticJoint_SolveVelocityConstraints(b2PrismaticJoint self, b2TimeStep step)"},
	 { (char *)"b2PrismaticJoint_SolvePositionConstraints", _wrap_b2PrismaticJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2PrismaticJoint_SolvePositionConstraints(b2PrismaticJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2PrismaticJoint_localAnchor1_set", _wrap_b2PrismaticJoint_localAnchor1_set, METH_VARARGS, (char *)"b2PrismaticJoint_localAnchor1_set(b2PrismaticJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2PrismaticJoint_localAnchor1_get", (PyCFunction)_wrap_b2PrismaticJoint_localAnchor1_get, METH_O, (char *)"b2PrismaticJoint_localAnchor1_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_localAnchor2_set", _wrap_b2PrismaticJoint_localAnchor2_set, METH_VARARGS, (char *)"b2PrismaticJoint_localAnchor2_set(b2PrismaticJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2PrismaticJoint_localAnchor2_get", (PyCFunction)_wrap_b2PrismaticJoint_localAnchor2_get, METH_O, (char *)"b2PrismaticJoint_localAnchor2_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_localXAxis1_set", _wrap_b2PrismaticJoint_localXAxis1_set, METH_VARARGS, (char *)"b2PrismaticJoint_localXAxis1_set(b2PrismaticJoint self, b2Vec2 m_localXAxis1)"},
	 { (char *)"b2PrismaticJoint_localXAxis1_get", (PyCFunction)_wrap_b2PrismaticJoint_localXAxis1_get, METH_O, (char *)"b2PrismaticJoint_localXAxis1_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_localYAxis1_set", _wrap_b2PrismaticJoint_localYAxis1_set, METH_VARARGS, (char *)"b2PrismaticJoint_localYAxis1_set(b2PrismaticJoint self, b2Vec2 m_localYAxis1)"},
	 { (char *)"b2PrismaticJoint_localYAxis1_get", (PyCFunction)_wrap_b2PrismaticJoint_localYAxis1_get, METH_O, (char *)"b2PrismaticJoint_localYAxis1_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_referenceAngle_set", _wrap_b2PrismaticJoint_referenceAngle_set, METH_VARARGS, (char *)"b2PrismaticJoint_referenceAngle_set(b2PrismaticJoint self, float32 m_refAngle)"},
	 { (char *)"b2PrismaticJoint_referenceAngle_get", (PyCFunction)_wrap_b2PrismaticJoint_referenceAngle_get, METH_O, (char *)"b2PrismaticJoint_referenceAngle_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_axis_set", _wrap_b2PrismaticJoint_axis_set, METH_VARARGS, (char *)"b2PrismaticJoint_axis_set(b2PrismaticJoint self, b2Vec2 m_axis)"},
	 { (char *)"b2PrismaticJoint_axis_get", (PyCFunction)_wrap_b2PrismaticJoint_axis_get, METH_O, (char *)"b2PrismaticJoint_axis_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_perp_set", _wrap_b2PrismaticJoint_perp_set, METH_VARARGS, (char *)"b2PrismaticJoint_perp_set(b2PrismaticJoint self, b2Vec2 m_perp)"},
	 { (char *)"b2PrismaticJoint_perp_get", (PyCFunction)_wrap_b2PrismaticJoint_perp_get, METH_O, (char *)"b2PrismaticJoint_perp_get(b2PrismaticJoint self) -> b2Vec2"},
	 { (char *)"b2PrismaticJoint_s1_set", _wrap_b2PrismaticJoint_s1_set, METH_VARARGS, (char *)"b2PrismaticJoint_s1_set(b2PrismaticJoint self, float32 m_s1)"},
	 { (char *)"b2PrismaticJoint_s1_get", (PyCFunction)_wrap_b2PrismaticJoint_s1_get, METH_O, (char *)"b2PrismaticJoint_s1_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_s2_set", _wrap_b2PrismaticJoint_s2_set, METH_VARARGS, (char *)"b2PrismaticJoint_s2_set(b2PrismaticJoint self, float32 m_s2)"},
	 { (char *)"b2PrismaticJoint_s2_get", (PyCFunction)_wrap_b2PrismaticJoint_s2_get, METH_O, (char *)"b2PrismaticJoint_s2_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_a1_set", _wrap_b2PrismaticJoint_a1_set, METH_VARARGS, (char *)"b2PrismaticJoint_a1_set(b2PrismaticJoint self, float32 m_a1)"},
	 { (char *)"b2PrismaticJoint_a1_get", (PyCFunction)_wrap_b2PrismaticJoint_a1_get, METH_O, (char *)"b2PrismaticJoint_a1_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_a2_set", _wrap_b2PrismaticJoint_a2_set, METH_VARARGS, (char *)"b2PrismaticJoint_a2_set(b2PrismaticJoint self, float32 m_a2)"},
	 { (char *)"b2PrismaticJoint_a2_get", (PyCFunction)_wrap_b2PrismaticJoint_a2_get, METH_O, (char *)"b2PrismaticJoint_a2_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_K_set", _wrap_b2PrismaticJoint_K_set, METH_VARARGS, (char *)"b2PrismaticJoint_K_set(b2PrismaticJoint self, b2Mat33 m_K)"},
	 { (char *)"b2PrismaticJoint_K_get", (PyCFunction)_wrap_b2PrismaticJoint_K_get, METH_O, (char *)"b2PrismaticJoint_K_get(b2PrismaticJoint self) -> b2Mat33"},
	 { (char *)"b2PrismaticJoint_impulse_set", _wrap_b2PrismaticJoint_impulse_set, METH_VARARGS, (char *)"b2PrismaticJoint_impulse_set(b2PrismaticJoint self, b2Vec3 m_impulse)"},
	 { (char *)"b2PrismaticJoint_impulse_get", (PyCFunction)_wrap_b2PrismaticJoint_impulse_get, METH_O, (char *)"b2PrismaticJoint_impulse_get(b2PrismaticJoint self) -> b2Vec3"},
	 { (char *)"b2PrismaticJoint_motorMass_set", _wrap_b2PrismaticJoint_motorMass_set, METH_VARARGS, (char *)"b2PrismaticJoint_motorMass_set(b2PrismaticJoint self, float32 m_motorMass)"},
	 { (char *)"b2PrismaticJoint_motorMass_get", (PyCFunction)_wrap_b2PrismaticJoint_motorMass_get, METH_O, (char *)"b2PrismaticJoint_motorMass_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_motorImpulse_set", _wrap_b2PrismaticJoint_motorImpulse_set, METH_VARARGS, (char *)"b2PrismaticJoint_motorImpulse_set(b2PrismaticJoint self, float32 m_motorImpulse)"},
	 { (char *)"b2PrismaticJoint_motorImpulse_get", (PyCFunction)_wrap_b2PrismaticJoint_motorImpulse_get, METH_O, (char *)"b2PrismaticJoint_motorImpulse_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_lowerTranslation_set", _wrap_b2PrismaticJoint_lowerTranslation_set, METH_VARARGS, (char *)"b2PrismaticJoint_lowerTranslation_set(b2PrismaticJoint self, float32 m_lowerTranslation)"},
	 { (char *)"b2PrismaticJoint_lowerTranslation_get", (PyCFunction)_wrap_b2PrismaticJoint_lowerTranslation_get, METH_O, (char *)"b2PrismaticJoint_lowerTranslation_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_upperTranslation_set", _wrap_b2PrismaticJoint_upperTranslation_set, METH_VARARGS, (char *)"b2PrismaticJoint_upperTranslation_set(b2PrismaticJoint self, float32 m_upperTranslation)"},
	 { (char *)"b2PrismaticJoint_upperTranslation_get", (PyCFunction)_wrap_b2PrismaticJoint_upperTranslation_get, METH_O, (char *)"b2PrismaticJoint_upperTranslation_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_maxMotorForce_set", _wrap_b2PrismaticJoint_maxMotorForce_set, METH_VARARGS, (char *)"b2PrismaticJoint_maxMotorForce_set(b2PrismaticJoint self, float32 m_maxMotorForce)"},
	 { (char *)"b2PrismaticJoint_maxMotorForce_get", (PyCFunction)_wrap_b2PrismaticJoint_maxMotorForce_get, METH_O, (char *)"b2PrismaticJoint_maxMotorForce_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_motorSpeed_set", _wrap_b2PrismaticJoint_motorSpeed_set, METH_VARARGS, (char *)"b2PrismaticJoint_motorSpeed_set(b2PrismaticJoint self, float32 m_motorSpeed)"},
	 { (char *)"b2PrismaticJoint_motorSpeed_get", (PyCFunction)_wrap_b2PrismaticJoint_motorSpeed_get, METH_O, (char *)"b2PrismaticJoint_motorSpeed_get(b2PrismaticJoint self) -> float32"},
	 { (char *)"b2PrismaticJoint_enableLimit_set", _wrap_b2PrismaticJoint_enableLimit_set, METH_VARARGS, (char *)"b2PrismaticJoint_enableLimit_set(b2PrismaticJoint self, bool m_enableLimit)"},
	 { (char *)"b2PrismaticJoint_enableLimit_get", (PyCFunction)_wrap_b2PrismaticJoint_enableLimit_get, METH_O, (char *)"b2PrismaticJoint_enableLimit_get(b2PrismaticJoint self) -> bool"},
	 { (char *)"b2PrismaticJoint_enableMotor_set", _wrap_b2PrismaticJoint_enableMotor_set, METH_VARARGS, (char *)"b2PrismaticJoint_enableMotor_set(b2PrismaticJoint self, bool m_enableMotor)"},
	 { (char *)"b2PrismaticJoint_enableMotor_get", (PyCFunction)_wrap_b2PrismaticJoint_enableMotor_get, METH_O, (char *)"b2PrismaticJoint_enableMotor_get(b2PrismaticJoint self) -> bool"},
	 { (char *)"b2PrismaticJoint_limitState_set", _wrap_b2PrismaticJoint_limitState_set, METH_VARARGS, (char *)"b2PrismaticJoint_limitState_set(b2PrismaticJoint self, b2LimitState m_limitState)"},
	 { (char *)"b2PrismaticJoint_limitState_get", (PyCFunction)_wrap_b2PrismaticJoint_limitState_get, METH_O, (char *)"b2PrismaticJoint_limitState_get(b2PrismaticJoint self) -> b2LimitState"},
	 { (char *)"delete_b2PrismaticJoint", (PyCFunction)_wrap_delete_b2PrismaticJoint, METH_O, (char *)"delete_b2PrismaticJoint(b2PrismaticJoint self)"},
	 { (char *)"b2PrismaticJoint_swigregister", b2PrismaticJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PrismaticJoint_swiginit", b2PrismaticJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2PulleyJointDef", (PyCFunction)_wrap_new_b2PulleyJointDef, METH_NOARGS, (char *)"\n"
		"new_b2PulleyJointDef() -> b2PulleyJointDef\n"
		"\n"
		"Pulley joint definition. This requires two ground anchors, two dynamic body anchor points, max lengths for each side, and a pulley ratio.\n"
		""},
	 { (char *)"b2PulleyJointDef_Initialize", _wrap_b2PulleyJointDef_Initialize, METH_VARARGS, (char *)"\n"
		"b2PulleyJointDef_Initialize(b2PulleyJointDef self, b2Body body1, b2Body body2, \n"
		"    b2Vec2 groundAnchor1, b2Vec2 groundAnchor2, b2Vec2 anchor1, \n"
		"    b2Vec2 anchor2, float32 ratio)\n"
		"\n"
		"Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.\n"
		""},
	 { (char *)"b2PulleyJointDef_groundAnchor1_set", _wrap_b2PulleyJointDef_groundAnchor1_set, METH_VARARGS, (char *)"b2PulleyJointDef_groundAnchor1_set(b2PulleyJointDef self, b2Vec2 groundAnchor1)"},
	 { (char *)"b2PulleyJointDef_groundAnchor1_get", (PyCFunction)_wrap_b2PulleyJointDef_groundAnchor1_get, METH_O, (char *)"b2PulleyJointDef_groundAnchor1_get(b2PulleyJointDef self) -> b2Vec2"},
	 { (char *)"b2PulleyJointDef_groundAnchor2_set", _wrap_b2PulleyJointDef_groundAnchor2_set, METH_VARARGS, (char *)"b2PulleyJointDef_groundAnchor2_set(b2PulleyJointDef self, b2Vec2 groundAnchor2)"},
	 { (char *)"b2PulleyJointDef_groundAnchor2_get", (PyCFunction)_wrap_b2PulleyJointDef_groundAnchor2_get, METH_O, (char *)"b2PulleyJointDef_groundAnchor2_get(b2PulleyJointDef self) -> b2Vec2"},
	 { (char *)"b2PulleyJointDef_localAnchor1_set", _wrap_b2PulleyJointDef_localAnchor1_set, METH_VARARGS, (char *)"b2PulleyJointDef_localAnchor1_set(b2PulleyJointDef self, b2Vec2 localAnchor1)"},
	 { (char *)"b2PulleyJointDef_localAnchor1_get", (PyCFunction)_wrap_b2PulleyJointDef_localAnchor1_get, METH_O, (char *)"b2PulleyJointDef_localAnchor1_get(b2PulleyJointDef self) -> b2Vec2"},
	 { (char *)"b2PulleyJointDef_localAnchor2_set", _wrap_b2PulleyJointDef_localAnchor2_set, METH_VARARGS, (char *)"b2PulleyJointDef_localAnchor2_set(b2PulleyJointDef self, b2Vec2 localAnchor2)"},
	 { (char *)"b2PulleyJointDef_localAnchor2_get", (PyCFunction)_wrap_b2PulleyJointDef_localAnchor2_get, METH_O, (char *)"b2PulleyJointDef_localAnchor2_get(b2PulleyJointDef self) -> b2Vec2"},
	 { (char *)"b2PulleyJointDef_length1_set", _wrap_b2PulleyJointDef_length1_set, METH_VARARGS, (char *)"b2PulleyJointDef_length1_set(b2PulleyJointDef self, float32 length1)"},
	 { (char *)"b2PulleyJointDef_length1_get", (PyCFunction)_wrap_b2PulleyJointDef_length1_get, METH_O, (char *)"b2PulleyJointDef_length1_get(b2PulleyJointDef self) -> float32"},
	 { (char *)"b2PulleyJointDef_maxLength1_set", _wrap_b2PulleyJointDef_maxLength1_set, METH_VARARGS, (char *)"b2PulleyJointDef_maxLength1_set(b2PulleyJointDef self, float32 maxLength1)"},
	 { (char *)"b2PulleyJointDef_maxLength1_get", (PyCFunction)_wrap_b2PulleyJointDef_maxLength1_get, METH_O, (char *)"b2PulleyJointDef_maxLength1_get(b2PulleyJointDef self) -> float32"},
	 { (char *)"b2PulleyJointDef_length2_set", _wrap_b2PulleyJointDef_length2_set, METH_VARARGS, (char *)"b2PulleyJointDef_length2_set(b2PulleyJointDef self, float32 length2)"},
	 { (char *)"b2PulleyJointDef_length2_get", (PyCFunction)_wrap_b2PulleyJointDef_length2_get, METH_O, (char *)"b2PulleyJointDef_length2_get(b2PulleyJointDef self) -> float32"},
	 { (char *)"b2PulleyJointDef_maxLength2_set", _wrap_b2PulleyJointDef_maxLength2_set, METH_VARARGS, (char *)"b2PulleyJointDef_maxLength2_set(b2PulleyJointDef self, float32 maxLength2)"},
	 { (char *)"b2PulleyJointDef_maxLength2_get", (PyCFunction)_wrap_b2PulleyJointDef_maxLength2_get, METH_O, (char *)"b2PulleyJointDef_maxLength2_get(b2PulleyJointDef self) -> float32"},
	 { (char *)"b2PulleyJointDef_ratio_set", _wrap_b2PulleyJointDef_ratio_set, METH_VARARGS, (char *)"b2PulleyJointDef_ratio_set(b2PulleyJointDef self, float32 ratio)"},
	 { (char *)"b2PulleyJointDef_ratio_get", (PyCFunction)_wrap_b2PulleyJointDef_ratio_get, METH_O, (char *)"b2PulleyJointDef_ratio_get(b2PulleyJointDef self) -> float32"},
	 { (char *)"delete_b2PulleyJointDef", (PyCFunction)_wrap_delete_b2PulleyJointDef, METH_O, (char *)"delete_b2PulleyJointDef(b2PulleyJointDef self)"},
	 { (char *)"b2PulleyJointDef_swigregister", b2PulleyJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PulleyJointDef_swiginit", b2PulleyJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2PulleyJoint_GetGroundAnchor1", (PyCFunction)_wrap_b2PulleyJoint_GetGroundAnchor1, METH_O, (char *)"\n"
		"b2PulleyJoint_GetGroundAnchor1(b2PulleyJoint self) -> b2Vec2\n"
		"\n"
		"Get the first ground anchor.\n"
		""},
	 { (char *)"b2PulleyJoint_GetGroundAnchor2", (PyCFunction)_wrap_b2PulleyJoint_GetGroundAnchor2, METH_O, (char *)"\n"
		"b2PulleyJoint_GetGroundAnchor2(b2PulleyJoint self) -> b2Vec2\n"
		"\n"
		"Get the second ground anchor.\n"
		""},
	 { (char *)"b2PulleyJoint_GetLength1", (PyCFunction)_wrap_b2PulleyJoint_GetLength1, METH_O, (char *)"\n"
		"b2PulleyJoint_GetLength1(b2PulleyJoint self) -> float32\n"
		"\n"
		"Get the current length of the segment attached to body1.\n"
		""},
	 { (char *)"b2PulleyJoint_GetLength2", (PyCFunction)_wrap_b2PulleyJoint_GetLength2, METH_O, (char *)"\n"
		"b2PulleyJoint_GetLength2(b2PulleyJoint self) -> float32\n"
		"\n"
		"Get the current length of the segment attached to body2.\n"
		""},
	 { (char *)"b2PulleyJoint_GetRatio", (PyCFunction)_wrap_b2PulleyJoint_GetRatio, METH_O, (char *)"\n"
		"b2PulleyJoint_GetRatio(b2PulleyJoint self) -> float32\n"
		"\n"
		"Get the pulley ratio.\n"
		""},
	 { (char *)"new_b2PulleyJoint", (PyCFunction)_wrap_new_b2PulleyJoint, METH_O, (char *)"\n"
		"new_b2PulleyJoint(b2PulleyJointDef data) -> b2PulleyJoint\n"
		"\n"
		"The pulley joint is connected to two bodies and two fixed ground points. The pulley supports a ratio such that: length1 + ratio * length2 <= constant Yes, the force transmitted is scaled by the ratio. The pulley also enforces a maximum length limit on both sides. This is useful to prevent one side of the pulley hitting the top.\n"
		""},
	 { (char *)"b2PulleyJoint_InitVelocityConstraints", _wrap_b2PulleyJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2PulleyJoint_InitVelocityConstraints(b2PulleyJoint self, b2TimeStep step)"},
	 { (char *)"b2PulleyJoint_SolveVelocityConstraints", _wrap_b2PulleyJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2PulleyJoint_SolveVelocityConstraints(b2PulleyJoint self, b2TimeStep step)"},
	 { (char *)"b2PulleyJoint_SolvePositionConstraints", _wrap_b2PulleyJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2PulleyJoint_SolvePositionConstraints(b2PulleyJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2PulleyJoint_ground_set", _wrap_b2PulleyJoint_ground_set, METH_VARARGS, (char *)"b2PulleyJoint_ground_set(b2PulleyJoint self, b2Body m_ground)"},
	 { (char *)"b2PulleyJoint_ground_get", (PyCFunction)_wrap_b2PulleyJoint_ground_get, METH_O, (char *)"b2PulleyJoint_ground_get(b2PulleyJoint self) -> b2Body"},
	 { (char *)"b2PulleyJoint_groundAnchor1_set", _wrap_b2PulleyJoint_groundAnchor1_set, METH_VARARGS, (char *)"b2PulleyJoint_groundAnchor1_set(b2PulleyJoint self, b2Vec2 m_groundAnchor1)"},
	 { (char *)"b2PulleyJoint_groundAnchor1_get", (PyCFunction)_wrap_b2PulleyJoint_groundAnchor1_get, METH_O, (char *)"b2PulleyJoint_groundAnchor1_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_groundAnchor2_set", _wrap_b2PulleyJoint_groundAnchor2_set, METH_VARARGS, (char *)"b2PulleyJoint_groundAnchor2_set(b2PulleyJoint self, b2Vec2 m_groundAnchor2)"},
	 { (char *)"b2PulleyJoint_groundAnchor2_get", (PyCFunction)_wrap_b2PulleyJoint_groundAnchor2_get, METH_O, (char *)"b2PulleyJoint_groundAnchor2_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_localAnchor1_set", _wrap_b2PulleyJoint_localAnchor1_set, METH_VARARGS, (char *)"b2PulleyJoint_localAnchor1_set(b2PulleyJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2PulleyJoint_localAnchor1_get", (PyCFunction)_wrap_b2PulleyJoint_localAnchor1_get, METH_O, (char *)"b2PulleyJoint_localAnchor1_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_localAnchor2_set", _wrap_b2PulleyJoint_localAnchor2_set, METH_VARARGS, (char *)"b2PulleyJoint_localAnchor2_set(b2PulleyJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2PulleyJoint_localAnchor2_get", (PyCFunction)_wrap_b2PulleyJoint_localAnchor2_get, METH_O, (char *)"b2PulleyJoint_localAnchor2_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_u1_set", _wrap_b2PulleyJoint_u1_set, METH_VARARGS, (char *)"b2PulleyJoint_u1_set(b2PulleyJoint self, b2Vec2 m_u1)"},
	 { (char *)"b2PulleyJoint_u1_get", (PyCFunction)_wrap_b2PulleyJoint_u1_get, METH_O, (char *)"b2PulleyJoint_u1_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_u2_set", _wrap_b2PulleyJoint_u2_set, METH_VARARGS, (char *)"b2PulleyJoint_u2_set(b2PulleyJoint self, b2Vec2 m_u2)"},
	 { (char *)"b2PulleyJoint_u2_get", (PyCFunction)_wrap_b2PulleyJoint_u2_get, METH_O, (char *)"b2PulleyJoint_u2_get(b2PulleyJoint self) -> b2Vec2"},
	 { (char *)"b2PulleyJoint_constant_set", _wrap_b2PulleyJoint_constant_set, METH_VARARGS, (char *)"b2PulleyJoint_constant_set(b2PulleyJoint self, float32 m_constant)"},
	 { (char *)"b2PulleyJoint_constant_get", (PyCFunction)_wrap_b2PulleyJoint_constant_get, METH_O, (char *)"b2PulleyJoint_constant_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_ratio_set", _wrap_b2PulleyJoint_ratio_set, METH_VARARGS, (char *)"b2PulleyJoint_ratio_set(b2PulleyJoint self, float32 m_ratio)"},
	 { (char *)"b2PulleyJoint_ratio_get", (PyCFunction)_wrap_b2PulleyJoint_ratio_get, METH_O, (char *)"b2PulleyJoint_ratio_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_maxLength1_set", _wrap_b2PulleyJoint_maxLength1_set, METH_VARARGS, (char *)"b2PulleyJoint_maxLength1_set(b2PulleyJoint self, float32 m_maxLength1)"},
	 { (char *)"b2PulleyJoint_maxLength1_get", (PyCFunction)_wrap_b2PulleyJoint_maxLength1_get, METH_O, (char *)"b2PulleyJoint_maxLength1_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_maxLength2_set", _wrap_b2PulleyJoint_maxLength2_set, METH_VARARGS, (char *)"b2PulleyJoint_maxLength2_set(b2PulleyJoint self, float32 m_maxLength2)"},
	 { (char *)"b2PulleyJoint_maxLength2_get", (PyCFunction)_wrap_b2PulleyJoint_maxLength2_get, METH_O, (char *)"b2PulleyJoint_maxLength2_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_pulleyMass_set", _wrap_b2PulleyJoint_pulleyMass_set, METH_VARARGS, (char *)"b2PulleyJoint_pulleyMass_set(b2PulleyJoint self, float32 m_pulleyMass)"},
	 { (char *)"b2PulleyJoint_pulleyMass_get", (PyCFunction)_wrap_b2PulleyJoint_pulleyMass_get, METH_O, (char *)"b2PulleyJoint_pulleyMass_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_limitMass1_set", _wrap_b2PulleyJoint_limitMass1_set, METH_VARARGS, (char *)"b2PulleyJoint_limitMass1_set(b2PulleyJoint self, float32 m_limitMass1)"},
	 { (char *)"b2PulleyJoint_limitMass1_get", (PyCFunction)_wrap_b2PulleyJoint_limitMass1_get, METH_O, (char *)"b2PulleyJoint_limitMass1_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_limitMass2_set", _wrap_b2PulleyJoint_limitMass2_set, METH_VARARGS, (char *)"b2PulleyJoint_limitMass2_set(b2PulleyJoint self, float32 m_limitMass2)"},
	 { (char *)"b2PulleyJoint_limitMass2_get", (PyCFunction)_wrap_b2PulleyJoint_limitMass2_get, METH_O, (char *)"b2PulleyJoint_limitMass2_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_impulse_set", _wrap_b2PulleyJoint_impulse_set, METH_VARARGS, (char *)"b2PulleyJoint_impulse_set(b2PulleyJoint self, float32 m_impulse)"},
	 { (char *)"b2PulleyJoint_impulse_get", (PyCFunction)_wrap_b2PulleyJoint_impulse_get, METH_O, (char *)"b2PulleyJoint_impulse_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_limitImpulse1_set", _wrap_b2PulleyJoint_limitImpulse1_set, METH_VARARGS, (char *)"b2PulleyJoint_limitImpulse1_set(b2PulleyJoint self, float32 m_limitImpulse1)"},
	 { (char *)"b2PulleyJoint_limitImpulse1_get", (PyCFunction)_wrap_b2PulleyJoint_limitImpulse1_get, METH_O, (char *)"b2PulleyJoint_limitImpulse1_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_limitImpulse2_set", _wrap_b2PulleyJoint_limitImpulse2_set, METH_VARARGS, (char *)"b2PulleyJoint_limitImpulse2_set(b2PulleyJoint self, float32 m_limitImpulse2)"},
	 { (char *)"b2PulleyJoint_limitImpulse2_get", (PyCFunction)_wrap_b2PulleyJoint_limitImpulse2_get, METH_O, (char *)"b2PulleyJoint_limitImpulse2_get(b2PulleyJoint self) -> float32"},
	 { (char *)"b2PulleyJoint_state_set", _wrap_b2PulleyJoint_state_set, METH_VARARGS, (char *)"b2PulleyJoint_state_set(b2PulleyJoint self, b2LimitState m_state)"},
	 { (char *)"b2PulleyJoint_state_get", (PyCFunction)_wrap_b2PulleyJoint_state_get, METH_O, (char *)"b2PulleyJoint_state_get(b2PulleyJoint self) -> b2LimitState"},
	 { (char *)"b2PulleyJoint_limitState1_set", _wrap_b2PulleyJoint_limitState1_set, METH_VARARGS, (char *)"b2PulleyJoint_limitState1_set(b2PulleyJoint self, b2LimitState m_limitState1)"},
	 { (char *)"b2PulleyJoint_limitState1_get", (PyCFunction)_wrap_b2PulleyJoint_limitState1_get, METH_O, (char *)"b2PulleyJoint_limitState1_get(b2PulleyJoint self) -> b2LimitState"},
	 { (char *)"b2PulleyJoint_limitState2_set", _wrap_b2PulleyJoint_limitState2_set, METH_VARARGS, (char *)"b2PulleyJoint_limitState2_set(b2PulleyJoint self, b2LimitState m_limitState2)"},
	 { (char *)"b2PulleyJoint_limitState2_get", (PyCFunction)_wrap_b2PulleyJoint_limitState2_get, METH_O, (char *)"b2PulleyJoint_limitState2_get(b2PulleyJoint self) -> b2LimitState"},
	 { (char *)"delete_b2PulleyJoint", (PyCFunction)_wrap_delete_b2PulleyJoint, METH_O, (char *)"delete_b2PulleyJoint(b2PulleyJoint self)"},
	 { (char *)"b2PulleyJoint_swigregister", b2PulleyJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2PulleyJoint_swiginit", b2PulleyJoint_swiginit, METH_VARARGS, NULL},
	 { (char *)"new_b2RevoluteJointDef", (PyCFunction)_wrap_new_b2RevoluteJointDef, METH_NOARGS, (char *)"\n"
		"new_b2RevoluteJointDef() -> b2RevoluteJointDef\n"
		"\n"
		"Revolute joint definition. This requires defining an anchor point where the bodies are joined. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor points are measured from the body's origin rather than the center of mass because: 1. you might not know where the center of mass will be. 2. if you add/remove shapes from a body and recompute the mass, the joints will be broken.\n"
		""},
	 { (char *)"b2RevoluteJointDef_Initialize", _wrap_b2RevoluteJointDef_Initialize, METH_VARARGS, (char *)"\n"
		"b2RevoluteJointDef_Initialize(b2RevoluteJointDef self, b2Body body1, b2Body body2, \n"
		"    b2Vec2 anchor)\n"
		"\n"
		"Initialize the bodies, anchors, and reference angle using the world anchor.\n"
		""},
	 { (char *)"b2RevoluteJointDef_localAnchor1_set", _wrap_b2RevoluteJointDef_localAnchor1_set, METH_VARARGS, (char *)"b2RevoluteJointDef_localAnchor1_set(b2RevoluteJointDef self, b2Vec2 localAnchor1)"},
	 { (char *)"b2RevoluteJointDef_localAnchor1_get", (PyCFunction)_wrap_b2RevoluteJointDef_localAnchor1_get, METH_O, (char *)"b2RevoluteJointDef_localAnchor1_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { (char *)"b2RevoluteJointDef_localAnchor2_set", _wrap_b2RevoluteJointDef_localAnchor2_set, METH_VARARGS, (char *)"b2RevoluteJointDef_localAnchor2_set(b2RevoluteJointDef self, b2Vec2 localAnchor2)"},
	 { (char *)"b2RevoluteJointDef_localAnchor2_get", (PyCFunction)_wrap_b2RevoluteJointDef_localAnchor2_get, METH_O, (char *)"b2RevoluteJointDef_localAnchor2_get(b2RevoluteJointDef self) -> b2Vec2"},
	 { (char *)"b2RevoluteJointDef_referenceAngle_set", _wrap_b2RevoluteJointDef_referenceAngle_set, METH_VARARGS, (char *)"b2RevoluteJointDef_referenceAngle_set(b2RevoluteJointDef self, float32 referenceAngle)"},
	 { (char *)"b2RevoluteJointDef_referenceAngle_get", (PyCFunction)_wrap_b2RevoluteJointDef_referenceAngle_get, METH_O, (char *)"b2RevoluteJointDef_referenceAngle_get(b2RevoluteJointDef self) -> float32"},
	 { (char *)"b2RevoluteJointDef_enableLimit_set", _wrap_b2RevoluteJointDef_enableLimit_set, METH_VARARGS, (char *)"b2RevoluteJointDef_enableLimit_set(b2RevoluteJointDef self, bool enableLimit)"},
	 { (char *)"b2RevoluteJointDef_enableLimit_get", (PyCFunction)_wrap_b2RevoluteJointDef_enableLimit_get, METH_O, (char *)"b2RevoluteJointDef_enableLimit_get(b2RevoluteJointDef self) -> bool"},
	 { (char *)"b2RevoluteJointDef_lowerAngle_set", _wrap_b2RevoluteJointDef_lowerAngle_set, METH_VARARGS, (char *)"b2RevoluteJointDef_lowerAngle_set(b2RevoluteJointDef self, float32 lowerAngle)"},
	 { (char *)"b2RevoluteJointDef_lowerAngle_get", (PyCFunction)_wrap_b2RevoluteJointDef_lowerAngle_get, METH_O, (char *)"b2RevoluteJointDef_lowerAngle_get(b2RevoluteJointDef self) -> float32"},
	 { (char *)"b2RevoluteJointDef_upperAngle_set", _wrap_b2RevoluteJointDef_upperAngle_set, METH_VARARGS, (char *)"b2RevoluteJointDef_upperAngle_set(b2RevoluteJointDef self, float32 upperAngle)"},
	 { (char *)"b2RevoluteJointDef_upperAngle_get", (PyCFunction)_wrap_b2RevoluteJointDef_upperAngle_get, METH_O, (char *)"b2RevoluteJointDef_upperAngle_get(b2RevoluteJointDef self) -> float32"},
	 { (char *)"b2RevoluteJointDef_enableMotor_set", _wrap_b2RevoluteJointDef_enableMotor_set, METH_VARARGS, (char *)"b2RevoluteJointDef_enableMotor_set(b2RevoluteJointDef self, bool enableMotor)"},
	 { (char *)"b2RevoluteJointDef_enableMotor_get", (PyCFunction)_wrap_b2RevoluteJointDef_enableMotor_get, METH_O, (char *)"b2RevoluteJointDef_enableMotor_get(b2RevoluteJointDef self) -> bool"},
	 { (char *)"b2RevoluteJointDef_motorSpeed_set", _wrap_b2RevoluteJointDef_motorSpeed_set, METH_VARARGS, (char *)"b2RevoluteJointDef_motorSpeed_set(b2RevoluteJointDef self, float32 motorSpeed)"},
	 { (char *)"b2RevoluteJointDef_motorSpeed_get", (PyCFunction)_wrap_b2RevoluteJointDef_motorSpeed_get, METH_O, (char *)"b2RevoluteJointDef_motorSpeed_get(b2RevoluteJointDef self) -> float32"},
	 { (char *)"b2RevoluteJointDef_maxMotorTorque_set", _wrap_b2RevoluteJointDef_maxMotorTorque_set, METH_VARARGS, (char *)"b2RevoluteJointDef_maxMotorTorque_set(b2RevoluteJointDef self, float32 maxMotorTorque)"},
	 { (char *)"b2RevoluteJointDef_maxMotorTorque_get", (PyCFunction)_wrap_b2RevoluteJointDef_maxMotorTorque_get, METH_O, (char *)"b2RevoluteJointDef_maxMotorTorque_get(b2RevoluteJointDef self) -> float32"},
	 { (char *)"delete_b2RevoluteJointDef", (PyCFunction)_wrap_delete_b2RevoluteJointDef, METH_O, (char *)"delete_b2RevoluteJointDef(b2RevoluteJointDef self)"},
	 { (char *)"b2RevoluteJointDef_swigregister", b2RevoluteJointDef_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2RevoluteJointDef_swiginit", b2RevoluteJointDef_swiginit, METH_VARARGS, NULL},
	 { (char *)"b2RevoluteJoint_GetJointAngle", (PyCFunction)_wrap_b2RevoluteJoint_GetJointAngle, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetJointAngle(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the current joint angle in radians.\n"
		""},
	 { (char *)"b2RevoluteJoint_GetJointSpeed", (PyCFunction)_wrap_b2RevoluteJoint_GetJointSpeed, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetJointSpeed(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the current joint angle speed in radians per second.\n"
		""},
	 { (char *)"b2RevoluteJoint_IsLimitEnabled", (PyCFunction)_wrap_b2RevoluteJoint_IsLimitEnabled, METH_O, (char *)"\n"
		"b2RevoluteJoint_IsLimitEnabled(b2RevoluteJoint self) -> bool\n"
		"\n"
		"Is the joint limit enabled?\n"
		""},
	 { (char *)"b2RevoluteJoint_EnableLimit", _wrap_b2RevoluteJoint_EnableLimit, METH_VARARGS, (char *)"\n"
		"b2RevoluteJoint_EnableLimit(b2RevoluteJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint limit.\n"
		""},
	 { (char *)"b2RevoluteJoint_GetLowerLimit", (PyCFunction)_wrap_b2RevoluteJoint_GetLowerLimit, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetLowerLimit(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the lower joint limit in radians.\n"
		""},
	 { (char *)"b2RevoluteJoint_GetUpperLimit", (PyCFunction)_wrap_b2RevoluteJoint_GetUpperLimit, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetUpperLimit(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the upper joint limit in radians.\n"
		""},
	 { (char *)"b2RevoluteJoint_SetLimits", _wrap_b2RevoluteJoint_SetLimits, METH_VARARGS, (char *)"\n"
		"b2RevoluteJoint_SetLimits(b2RevoluteJoint self, float32 lower, float32 upper)\n"
		"\n"
		"Set the joint limits in radians.\n"
		""},
	 { (char *)"b2RevoluteJoint_IsMotorEnabled", (PyCFunction)_wrap_b2RevoluteJoint_IsMotorEnabled, METH_O, (char *)"\n"
		"b2RevoluteJoint_IsMotorEnabled(b2RevoluteJoint self) -> bool\n"
		"\n"
		"Is the joint motor enabled?\n"
		""},
	 { (char *)"b2RevoluteJoint_EnableMotor", _wrap_b2RevoluteJoint_EnableMotor, METH_VARARGS, (char *)"\n"
		"b2RevoluteJoint_EnableMotor(b2RevoluteJoint self, bool flag)\n"
		"\n"
		"Enable/disable the joint motor.\n"
		""},
	 { (char *)"b2RevoluteJoint_SetMotorSpeed", _wrap_b2RevoluteJoint_SetMotorSpeed, METH_VARARGS, (char *)"\n"
		"b2RevoluteJoint_SetMotorSpeed(b2RevoluteJoint self, float32 speed)\n"
		"\n"
		"Set the motor speed in radians per second.\n"
		""},
	 { (char *)"b2RevoluteJoint_GetMotorSpeed", (PyCFunction)_wrap_b2RevoluteJoint_GetMotorSpeed, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetMotorSpeed(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the motor speed in radians per second.\n"
		""},
	 { (char *)"b2RevoluteJoint_SetMaxMotorTorque", _wrap_b2RevoluteJoint_SetMaxMotorTorque, METH_VARARGS, (char *)"\n"
		"b2RevoluteJoint_SetMaxMotorTorque(b2RevoluteJoint self, float32 torque)\n"
		"\n"
		"Set the maximum motor torque, usually in N-m.\n"
		""},
	 { (char *)"b2RevoluteJoint_GetMotorTorque", (PyCFunction)_wrap_b2RevoluteJoint_GetMotorTorque, METH_O, (char *)"\n"
		"b2RevoluteJoint_GetMotorTorque(b2RevoluteJoint self) -> float32\n"
		"\n"
		"Get the current motor torque, usually in N-m.\n"
		""},
	 { (char *)"new_b2RevoluteJoint", (PyCFunction)_wrap_new_b2RevoluteJoint, METH_O, (char *)"\n"
		"new_b2RevoluteJoint(b2RevoluteJointDef _def) -> b2RevoluteJoint\n"
		"\n"
		"A revolute joint constrains to bodies to share a common point while they are free to rotate about the point. The relative rotation about the shared point is the joint angle. You can limit the relative rotation with a joint limit that specifies a lower and upper angle. You can use a motor to drive the relative rotation about the shared point. A maximum motor torque is provided so that infinite forces are not generated.\n"
		""},
	 { (char *)"b2RevoluteJoint_InitVelocityConstraints", _wrap_b2RevoluteJoint_InitVelocityConstraints, METH_VARARGS, (char *)"b2RevoluteJoint_InitVelocityConstraints(b2RevoluteJoint self, b2TimeStep step)"},
	 { (char *)"b2RevoluteJoint_SolveVelocityConstraints", _wrap_b2RevoluteJoint_SolveVelocityConstraints, METH_VARARGS, (char *)"b2RevoluteJoint_SolveVelocityConstraints(b2RevoluteJoint self, b2TimeStep step)"},
	 { (char *)"b2RevoluteJoint_SolvePositionConstraints", _wrap_b2RevoluteJoint_SolvePositionConstraints, METH_VARARGS, (char *)"b2RevoluteJoint_SolvePositionConstraints(b2RevoluteJoint self, float32 baumgarte) -> bool"},
	 { (char *)"b2RevoluteJoint_localAnchor1_set", _wrap_b2RevoluteJoint_localAnchor1_set, METH_VARARGS, (char *)"b2RevoluteJoint_localAnchor1_set(b2RevoluteJoint self, b2Vec2 m_localAnchor1)"},
	 { (char *)"b2RevoluteJoint_localAnchor1_get", (PyCFunction)_wrap_b2RevoluteJoint_localAnchor1_get, METH_O, (char *)"b2RevoluteJoint_localAnchor1_get(b2RevoluteJoint self) -> b2Vec2"},
	 { (char *)"b2RevoluteJoint_localAnchor2_set", _wrap_b2RevoluteJoint_localAnchor2_set, METH_VARARGS, (char *)"b2RevoluteJoint_localAnchor2_set(b2RevoluteJoint self, b2Vec2 m_localAnchor2)"},
	 { (char *)"b2RevoluteJoint_localAnchor2_get", (PyCFunction)_wrap_b2RevoluteJoint_localAnchor2_get, METH_O, (char *)"b2RevoluteJoint_localAnchor2_get(b2RevoluteJoint self) -> b2Vec2"},
	 { (char *)"b2RevoluteJoint_impulse_set", _wrap_b2RevoluteJoint_impulse_set, METH_VARARGS, (char *)"b2RevoluteJoint_impulse_set(b2RevoluteJoint self, b2Vec3 m_impulse)"},
	 { (char *)"b2RevoluteJoint_impulse_get", (PyCFunction)_wrap_b2RevoluteJoint_impulse_get, METH_O, (char *)"b2RevoluteJoint_impulse_get(b2RevoluteJoint self) -> b2Vec3"},
	 { (char *)"b2RevoluteJoint_motorImpulse_set", _wrap_b2RevoluteJoint_motorImpulse_set, METH_VARARGS, (char *)"b2RevoluteJoint_motorImpulse_set(b2RevoluteJoint self, float32 m_motorImpulse)"},
	 { (char *)"b2RevoluteJoint_motorImpulse_get", (PyCFunction)_wrap_b2RevoluteJoint_motorImpulse_get, METH_O, (char *)"b2RevoluteJoint_motorImpulse_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_mass_set", _wrap_b2RevoluteJoint_mass_set, METH_VARARGS, (char *)"b2RevoluteJoint_mass_set(b2RevoluteJoint self, b2Mat33 m_mass)"},
	 { (char *)"b2RevoluteJoint_mass_get", (PyCFunction)_wrap_b2RevoluteJoint_mass_get, METH_O, (char *)"b2RevoluteJoint_mass_get(b2RevoluteJoint self) -> b2Mat33"},
	 { (char *)"b2RevoluteJoint_motorMass_set", _wrap_b2RevoluteJoint_motorMass_set, METH_VARARGS, (char *)"b2RevoluteJoint_motorMass_set(b2RevoluteJoint self, float32 m_motorMass)"},
	 { (char *)"b2RevoluteJoint_motorMass_get", (PyCFunction)_wrap_b2RevoluteJoint_motorMass_get, METH_O, (char *)"b2RevoluteJoint_motorMass_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_enableMotor_set", _wrap_b2RevoluteJoint_enableMotor_set, METH_VARARGS, (char *)"b2RevoluteJoint_enableMotor_set(b2RevoluteJoint self, bool m_enableMotor)"},
	 { (char *)"b2RevoluteJoint_enableMotor_get", (PyCFunction)_wrap_b2RevoluteJoint_enableMotor_get, METH_O, (char *)"b2RevoluteJoint_enableMotor_get(b2RevoluteJoint self) -> bool"},
	 { (char *)"b2RevoluteJoint_maxMotorTorque_set", _wrap_b2RevoluteJoint_maxMotorTorque_set, METH_VARARGS, (char *)"b2RevoluteJoint_maxMotorTorque_set(b2RevoluteJoint self, float32 m_maxMotorTorque)"},
	 { (char *)"b2RevoluteJoint_maxMotorTorque_get", (PyCFunction)_wrap_b2RevoluteJoint_maxMotorTorque_get, METH_O, (char *)"b2RevoluteJoint_maxMotorTorque_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_motorSpeed_set", _wrap_b2RevoluteJoint_motorSpeed_set, METH_VARARGS, (char *)"b2RevoluteJoint_motorSpeed_set(b2RevoluteJoint self, float32 m_motorSpeed)"},
	 { (char *)"b2RevoluteJoint_motorSpeed_get", (PyCFunction)_wrap_b2RevoluteJoint_motorSpeed_get, METH_O, (char *)"b2RevoluteJoint_motorSpeed_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_enableLimit_set", _wrap_b2RevoluteJoint_enableLimit_set, METH_VARARGS, (char *)"b2RevoluteJoint_enableLimit_set(b2RevoluteJoint self, bool m_enableLimit)"},
	 { (char *)"b2RevoluteJoint_enableLimit_get", (PyCFunction)_wrap_b2RevoluteJoint_enableLimit_get, METH_O, (char *)"b2RevoluteJoint_enableLimit_get(b2RevoluteJoint self) -> bool"},
	 { (char *)"b2RevoluteJoint_referenceAngle_set", _wrap_b2RevoluteJoint_referenceAngle_set, METH_VARARGS, (char *)"b2RevoluteJoint_referenceAngle_set(b2RevoluteJoint self, float32 m_referenceAngle)"},
	 { (char *)"b2RevoluteJoint_referenceAngle_get", (PyCFunction)_wrap_b2RevoluteJoint_referenceAngle_get, METH_O, (char *)"b2RevoluteJoint_referenceAngle_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_lowerAngle_set", _wrap_b2RevoluteJoint_lowerAngle_set, METH_VARARGS, (char *)"b2RevoluteJoint_lowerAngle_set(b2RevoluteJoint self, float32 m_lowerAngle)"},
	 { (char *)"b2RevoluteJoint_lowerAngle_get", (PyCFunction)_wrap_b2RevoluteJoint_lowerAngle_get, METH_O, (char *)"b2RevoluteJoint_lowerAngle_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_upperAngle_set", _wrap_b2RevoluteJoint_upperAngle_set, METH_VARARGS, (char *)"b2RevoluteJoint_upperAngle_set(b2RevoluteJoint self, float32 m_upperAngle)"},
	 { (char *)"b2RevoluteJoint_upperAngle_get", (PyCFunction)_wrap_b2RevoluteJoint_upperAngle_get, METH_O, (char *)"b2RevoluteJoint_upperAngle_get(b2RevoluteJoint self) -> float32"},
	 { (char *)"b2RevoluteJoint_limitState_set", _wrap_b2RevoluteJoint_limitState_set, METH_VARARGS, (char *)"b2RevoluteJoint_limitState_set(b2RevoluteJoint self, b2LimitState m_limitState)"},
	 { (char *)"b2RevoluteJoint_limitState_get", (PyCFunction)_wrap_b2RevoluteJoint_limitState_get, METH_O, (char *)"b2RevoluteJoint_limitState_get(b2RevoluteJoint self) -> b2LimitState"},
	 { (char *)"delete_b2RevoluteJoint", (PyCFunction)_wrap_delete_b2RevoluteJoint, METH_O, (char *)"delete_b2RevoluteJoint(b2RevoluteJoint self)"},
	 { (char *)"b2RevoluteJoint_swigregister", b2RevoluteJoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"b2RevoluteJoint_swiginit", b2RevoluteJoint_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_b2BuoyancyControllerDefTo_p_b2ControllerDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ControllerDef *)  ((b2BuoyancyControllerDef *) x));
}
static void *_p_b2ConstantAccelControllerDefTo_p_b2ControllerDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ControllerDef *)  ((b2ConstantAccelControllerDef *) x));
}
static void *_p_b2ConstantForceControllerDefTo_p_b2ControllerDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ControllerDef *)  ((b2ConstantForceControllerDef *) x));
}
static void *_p_b2GravityControllerDefTo_p_b2ControllerDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ControllerDef *)  ((b2GravityControllerDef *) x));
}
static void *_p_b2TensorDampingControllerDefTo_p_b2ControllerDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ControllerDef *)  ((b2TensorDampingControllerDef *) x));
}
static void *_p_b2DistanceJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2DistanceJointDef *) x));
}
static void *_p_b2GearJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2GearJointDef *) x));
}
static void *_p_b2LineJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2LineJointDef *) x));
}
static void *_p_b2MouseJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2MouseJointDef *) x));
}
static void *_p_b2PrismaticJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2PrismaticJointDef *) x));
}
static void *_p_b2PulleyJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2PulleyJointDef *) x));
}
static void *_p_b2RevoluteJointDefTo_p_b2JointDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2JointDef *)  ((b2RevoluteJointDef *) x));
}
static void *_p_b2NullContactTo_p_b2Contact(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Contact *)  ((b2NullContact *) x));
}
static void *_p_b2CircleShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2CircleShape *) x));
}
static void *_p_b2PolygonShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2PolygonShape *) x));
}
static void *_p_b2EdgeShapeTo_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape *)  ((b2EdgeShape *) x));
}
static void *_p_p_b2CircleShapeTo_p_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape **)  ((b2CircleShape **) x));
}
static void *_p_p_b2PolygonShapeTo_p_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape **)  ((b2PolygonShape **) x));
}
static void *_p_p_b2EdgeShapeTo_p_p_b2Shape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Shape **)  ((b2EdgeShape **) x));
}
static void *_p_b2ContactManagerTo_p_b2PairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2PairCallback *)  ((b2ContactManager *) x));
}
static void *_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContactTo_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Contact *(*)(b2Shape *,b2Shape *,b2BlockAllocator *))  ((b2NullContact *(*)(b2Shape *,b2Shape *,b2BlockAllocator *)) x));
}
static void *_p_b2DistanceJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2DistanceJoint *) x));
}
static void *_p_b2MouseJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2MouseJoint *) x));
}
static void *_p_b2LineJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2LineJoint *) x));
}
static void *_p_b2RevoluteJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2RevoluteJoint *) x));
}
static void *_p_b2PrismaticJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2PrismaticJoint *) x));
}
static void *_p_b2GearJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2GearJoint *) x));
}
static void *_p_b2PulleyJointTo_p_b2Joint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Joint *)  ((b2PulleyJoint *) x));
}
static void *_p_b2BuoyancyControllerTo_p_b2Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Controller *)  ((b2BuoyancyController *) x));
}
static void *_p_b2ConstantAccelControllerTo_p_b2Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Controller *)  ((b2ConstantAccelController *) x));
}
static void *_p_b2ConstantForceControllerTo_p_b2Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Controller *)  ((b2ConstantForceController *) x));
}
static void *_p_b2GravityControllerTo_p_b2Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Controller *)  ((b2GravityController *) x));
}
static void *_p_b2TensorDampingControllerTo_p_b2Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2Controller *)  ((b2TensorDampingController *) x));
}
static void *_p_b2CircleDefTo_p_b2ShapeDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ShapeDef *)  ((b2CircleDef *) x));
}
static void *_p_b2PolygonDefTo_p_b2ShapeDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ShapeDef *)  ((b2PolygonDef *) x));
}
static void *_p_b2EdgeChainDefTo_p_b2ShapeDef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((b2ShapeDef *)  ((b2EdgeChainDef *) x));
}
static swig_type_info _swigt__p_a_2_b2_maxProxies__b2Bound = {"_p_a_2_b2_maxProxies__b2Bound", "b2Bound (*)[2*b2_maxProxies]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_e_shapeTypeCount__b2ContactRegister = {"_p_a_e_shapeTypeCount__b2ContactRegister", "b2ContactRegister (*)[e_shapeTypeCount]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2AABB = {"_p_b2AABB", "b2AABB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BlockAllocator = {"_p_b2BlockAllocator", "b2BlockAllocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Body = {"_p_b2Body", "b2Body *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BodyDef = {"_p_b2BodyDef", "b2BodyDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Bound = {"_p_b2Bound", "b2Bound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BoundaryListener = {"_p_b2BoundaryListener", "b2BoundaryListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BroadPhase = {"_p_b2BroadPhase", "b2BroadPhase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BufferedPair = {"_p_b2BufferedPair", "b2BufferedPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BuoyancyController = {"_p_b2BuoyancyController", "b2BuoyancyController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2BuoyancyControllerDef = {"_p_b2BuoyancyControllerDef", "b2BuoyancyControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2CircleDef = {"_p_b2CircleDef", "b2CircleDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2CircleShape = {"_p_b2CircleShape", "b2CircleShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Color = {"_p_b2Color", "b2Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ConstantAccelController = {"_p_b2ConstantAccelController", "b2ConstantAccelController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ConstantAccelControllerDef = {"_p_b2ConstantAccelControllerDef", "b2ConstantAccelControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ConstantForceController = {"_p_b2ConstantForceController", "b2ConstantForceController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ConstantForceControllerDef = {"_p_b2ConstantForceControllerDef", "b2ConstantForceControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Contact = {"_p_b2Contact", "b2Contact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactEdge = {"_p_b2ContactEdge", "b2ContactEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactFilter = {"_p_b2ContactFilter", "b2ContactFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactID = {"_p_b2ContactID", "b2ContactID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactID__Features = {"_p_b2ContactID__Features", "b2ContactID::Features *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactListener = {"_p_b2ContactListener", "b2ContactListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactManager = {"_p_b2ContactManager", "b2ContactManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactPoint = {"_p_b2ContactPoint", "b2ContactPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactRegister = {"_p_b2ContactRegister", "b2ContactRegister *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ContactResult = {"_p_b2ContactResult", "b2ContactResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Controller = {"_p_b2Controller", "b2Controller *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ControllerDef = {"_p_b2ControllerDef", "b2ControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ControllerEdge = {"_p_b2ControllerEdge", "b2ControllerEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DebugDraw = {"_p_b2DebugDraw", "b2DebugDraw *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DestructionListener = {"_p_b2DestructionListener", "b2DestructionListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceJoint = {"_p_b2DistanceJoint", "b2DistanceJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2DistanceJointDef = {"_p_b2DistanceJointDef", "b2DistanceJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2EdgeChainDef = {"_p_b2EdgeChainDef", "b2EdgeChainDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2EdgeShape = {"_p_b2EdgeShape", "b2EdgeShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2FilterData = {"_p_b2FilterData", "b2FilterData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GearJoint = {"_p_b2GearJoint", "b2GearJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GearJointDef = {"_p_b2GearJointDef", "b2GearJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GravityController = {"_p_b2GravityController", "b2GravityController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2GravityControllerDef = {"_p_b2GravityControllerDef", "b2GravityControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Jacobian = {"_p_b2Jacobian", "b2Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Joint = {"_p_b2Joint", "b2Joint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointDef = {"_p_b2JointDef", "b2JointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2JointEdge = {"_p_b2JointEdge", "b2JointEdge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2LineJoint = {"_p_b2LineJoint", "b2LineJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2LineJointDef = {"_p_b2LineJointDef", "b2LineJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Manifold = {"_p_b2Manifold", "b2Manifold *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ManifoldPoint = {"_p_b2ManifoldPoint", "b2ManifoldPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MassData = {"_p_b2MassData", "b2MassData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Mat22 = {"_p_b2Mat22", "b2Mat22 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Mat33 = {"_p_b2Mat33", "b2Mat33 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MouseJoint = {"_p_b2MouseJoint", "b2MouseJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2MouseJointDef = {"_p_b2MouseJointDef", "b2MouseJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2NullContact = {"_p_b2NullContact", "b2NullContact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2OBB = {"_p_b2OBB", "b2OBB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Pair = {"_p_b2Pair", "b2Pair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PairCallback = {"_p_b2PairCallback", "b2PairCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PairManager = {"_p_b2PairManager", "b2PairManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PolygonDef = {"_p_b2PolygonDef", "b2PolygonDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PolygonShape = {"_p_b2PolygonShape", "b2PolygonShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PrismaticJoint = {"_p_b2PrismaticJoint", "b2PrismaticJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PrismaticJointDef = {"_p_b2PrismaticJointDef", "b2PrismaticJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Proxy = {"_p_b2Proxy", "b2Proxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PulleyJoint = {"_p_b2PulleyJoint", "b2PulleyJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2PulleyJointDef = {"_p_b2PulleyJointDef", "b2PulleyJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJoint = {"_p_b2RevoluteJoint", "b2RevoluteJoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2RevoluteJointDef = {"_p_b2RevoluteJointDef", "b2RevoluteJointDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Segment = {"_p_b2Segment", "b2Segment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Shape = {"_p_b2Shape", "b2Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2ShapeDef = {"_p_b2ShapeDef", "b2ShapeDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2StackAllocator = {"_p_b2StackAllocator", "b2StackAllocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2StackEntry = {"_p_b2StackEntry", "b2StackEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Sweep = {"_p_b2Sweep", "b2Sweep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TensorDampingController = {"_p_b2TensorDampingController", "b2TensorDampingController *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TensorDampingControllerDef = {"_p_b2TensorDampingControllerDef", "b2TensorDampingControllerDef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2TimeStep = {"_p_b2TimeStep", "b2TimeStep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec2 = {"_p_b2Vec2", "b2Vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Vec3 = {"_p_b2Vec3", "b2Vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2Version = {"_p_b2Version", "b2Version *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2World = {"_p_b2World", "b2World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_b2XForm = {"_p_b2XForm", "b2XForm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_b2Contact_p_b2BlockAllocator__void = {"_p_f_p_b2Contact_p_b2BlockAllocator__void", "b2ContactDestroyFcn *|void (*)(b2Contact *,b2BlockAllocator *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact = {"_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact", "b2Contact *(*)(b2Shape *,b2Shape *,b2BlockAllocator *)|b2ContactCreateFcn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact = {"_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_p_void__float = {"_p_f_p_void__float", "SortKeyFunc|float (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|float32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_b2Shape = {"_p_p_b2Shape", "b2Shape **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_b2CircleShape = {"_p_p_b2CircleShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_b2PolygonShape = {"_p_p_b2PolygonShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_b2EdgeShape = {"_p_p_b2EdgeShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_a_2_b2_maxProxies__b2Bound,
  &_swigt__p_a_e_shapeTypeCount__b2ContactRegister,
  &_swigt__p_b2AABB,
  &_swigt__p_b2BlockAllocator,
  &_swigt__p_b2Body,
  &_swigt__p_b2BodyDef,
  &_swigt__p_b2Bound,
  &_swigt__p_b2BoundaryListener,
  &_swigt__p_b2BroadPhase,
  &_swigt__p_b2BufferedPair,
  &_swigt__p_b2BuoyancyController,
  &_swigt__p_b2BuoyancyControllerDef,
  &_swigt__p_b2CircleDef,
  &_swigt__p_b2CircleShape,
  &_swigt__p_b2Color,
  &_swigt__p_b2ConstantAccelController,
  &_swigt__p_b2ConstantAccelControllerDef,
  &_swigt__p_b2ConstantForceController,
  &_swigt__p_b2ConstantForceControllerDef,
  &_swigt__p_b2Contact,
  &_swigt__p_b2ContactEdge,
  &_swigt__p_b2ContactFilter,
  &_swigt__p_b2ContactID,
  &_swigt__p_b2ContactID__Features,
  &_swigt__p_b2ContactListener,
  &_swigt__p_b2ContactManager,
  &_swigt__p_b2ContactPoint,
  &_swigt__p_b2ContactRegister,
  &_swigt__p_b2ContactResult,
  &_swigt__p_b2Controller,
  &_swigt__p_b2ControllerDef,
  &_swigt__p_b2ControllerEdge,
  &_swigt__p_b2DebugDraw,
  &_swigt__p_b2DestructionListener,
  &_swigt__p_b2DistanceJoint,
  &_swigt__p_b2DistanceJointDef,
  &_swigt__p_b2EdgeChainDef,
  &_swigt__p_b2EdgeShape,
  &_swigt__p_b2FilterData,
  &_swigt__p_b2GearJoint,
  &_swigt__p_b2GearJointDef,
  &_swigt__p_b2GravityController,
  &_swigt__p_b2GravityControllerDef,
  &_swigt__p_b2Jacobian,
  &_swigt__p_b2Joint,
  &_swigt__p_b2JointDef,
  &_swigt__p_b2JointEdge,
  &_swigt__p_b2LineJoint,
  &_swigt__p_b2LineJointDef,
  &_swigt__p_b2Manifold,
  &_swigt__p_b2ManifoldPoint,
  &_swigt__p_b2MassData,
  &_swigt__p_b2Mat22,
  &_swigt__p_b2Mat33,
  &_swigt__p_b2MouseJoint,
  &_swigt__p_b2MouseJointDef,
  &_swigt__p_b2NullContact,
  &_swigt__p_b2OBB,
  &_swigt__p_b2Pair,
  &_swigt__p_b2PairCallback,
  &_swigt__p_b2PairManager,
  &_swigt__p_b2PolygonDef,
  &_swigt__p_b2PolygonShape,
  &_swigt__p_b2PrismaticJoint,
  &_swigt__p_b2PrismaticJointDef,
  &_swigt__p_b2Proxy,
  &_swigt__p_b2PulleyJoint,
  &_swigt__p_b2PulleyJointDef,
  &_swigt__p_b2RevoluteJoint,
  &_swigt__p_b2RevoluteJointDef,
  &_swigt__p_b2Segment,
  &_swigt__p_b2Shape,
  &_swigt__p_b2ShapeDef,
  &_swigt__p_b2StackAllocator,
  &_swigt__p_b2StackEntry,
  &_swigt__p_b2Sweep,
  &_swigt__p_b2TensorDampingController,
  &_swigt__p_b2TensorDampingControllerDef,
  &_swigt__p_b2TimeStep,
  &_swigt__p_b2Vec2,
  &_swigt__p_b2Vec3,
  &_swigt__p_b2Version,
  &_swigt__p_b2World,
  &_swigt__p_b2XForm,
  &_swigt__p_char,
  &_swigt__p_f_p_b2Contact_p_b2BlockAllocator__void,
  &_swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact,
  &_swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact,
  &_swigt__p_f_p_void__float,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_b2CircleShape,
  &_swigt__p_p_b2EdgeShape,
  &_swigt__p_p_b2PolygonShape,
  &_swigt__p_p_b2Shape,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_a_2_b2_maxProxies__b2Bound[] = {  {&_swigt__p_a_2_b2_maxProxies__b2Bound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_e_shapeTypeCount__b2ContactRegister[] = {  {&_swigt__p_a_e_shapeTypeCount__b2ContactRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2AABB[] = {  {&_swigt__p_b2AABB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BlockAllocator[] = {  {&_swigt__p_b2BlockAllocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Body[] = {  {&_swigt__p_b2Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BodyDef[] = {  {&_swigt__p_b2BodyDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Bound[] = {  {&_swigt__p_b2Bound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BoundaryListener[] = {  {&_swigt__p_b2BoundaryListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BroadPhase[] = {  {&_swigt__p_b2BroadPhase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BufferedPair[] = {  {&_swigt__p_b2BufferedPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BuoyancyController[] = {  {&_swigt__p_b2BuoyancyController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2BuoyancyControllerDef[] = {  {&_swigt__p_b2BuoyancyControllerDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2CircleDef[] = {  {&_swigt__p_b2CircleDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2CircleShape[] = {  {&_swigt__p_b2CircleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Color[] = {  {&_swigt__p_b2Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ConstantAccelController[] = {  {&_swigt__p_b2ConstantAccelController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ConstantAccelControllerDef[] = {  {&_swigt__p_b2ConstantAccelControllerDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ConstantForceController[] = {  {&_swigt__p_b2ConstantForceController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ConstantForceControllerDef[] = {  {&_swigt__p_b2ConstantForceControllerDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Contact[] = {  {&_swigt__p_b2Contact, 0, 0, 0},  {&_swigt__p_b2NullContact, _p_b2NullContactTo_p_b2Contact, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactEdge[] = {  {&_swigt__p_b2ContactEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactFilter[] = {  {&_swigt__p_b2ContactFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactID[] = {  {&_swigt__p_b2ContactID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactID__Features[] = {  {&_swigt__p_b2ContactID__Features, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactListener[] = {  {&_swigt__p_b2ContactListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactManager[] = {  {&_swigt__p_b2ContactManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactPoint[] = {  {&_swigt__p_b2ContactPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactRegister[] = {  {&_swigt__p_b2ContactRegister, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ContactResult[] = {  {&_swigt__p_b2ContactResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Controller[] = {  {&_swigt__p_b2Controller, 0, 0, 0},  {&_swigt__p_b2BuoyancyController, _p_b2BuoyancyControllerTo_p_b2Controller, 0, 0},  {&_swigt__p_b2ConstantAccelController, _p_b2ConstantAccelControllerTo_p_b2Controller, 0, 0},  {&_swigt__p_b2ConstantForceController, _p_b2ConstantForceControllerTo_p_b2Controller, 0, 0},  {&_swigt__p_b2GravityController, _p_b2GravityControllerTo_p_b2Controller, 0, 0},  {&_swigt__p_b2TensorDampingController, _p_b2TensorDampingControllerTo_p_b2Controller, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ControllerDef[] = {  {&_swigt__p_b2ControllerDef, 0, 0, 0},  {&_swigt__p_b2BuoyancyControllerDef, _p_b2BuoyancyControllerDefTo_p_b2ControllerDef, 0, 0},  {&_swigt__p_b2ConstantAccelControllerDef, _p_b2ConstantAccelControllerDefTo_p_b2ControllerDef, 0, 0},  {&_swigt__p_b2ConstantForceControllerDef, _p_b2ConstantForceControllerDefTo_p_b2ControllerDef, 0, 0},  {&_swigt__p_b2GravityControllerDef, _p_b2GravityControllerDefTo_p_b2ControllerDef, 0, 0},  {&_swigt__p_b2TensorDampingControllerDef, _p_b2TensorDampingControllerDefTo_p_b2ControllerDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ControllerEdge[] = {  {&_swigt__p_b2ControllerEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DebugDraw[] = {  {&_swigt__p_b2DebugDraw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DestructionListener[] = {  {&_swigt__p_b2DestructionListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceJoint[] = {  {&_swigt__p_b2DistanceJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2DistanceJointDef[] = {  {&_swigt__p_b2DistanceJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2EdgeChainDef[] = {  {&_swigt__p_b2EdgeChainDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2EdgeShape[] = {  {&_swigt__p_b2EdgeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2FilterData[] = {  {&_swigt__p_b2FilterData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GearJoint[] = {  {&_swigt__p_b2GearJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GearJointDef[] = {  {&_swigt__p_b2GearJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GravityController[] = {  {&_swigt__p_b2GravityController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2GravityControllerDef[] = {  {&_swigt__p_b2GravityControllerDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Jacobian[] = {  {&_swigt__p_b2Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Joint[] = {  {&_swigt__p_b2DistanceJoint, _p_b2DistanceJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2MouseJoint, _p_b2MouseJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2LineJoint, _p_b2LineJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2RevoluteJoint, _p_b2RevoluteJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2PrismaticJoint, _p_b2PrismaticJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2GearJoint, _p_b2GearJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2PulleyJoint, _p_b2PulleyJointTo_p_b2Joint, 0, 0},  {&_swigt__p_b2Joint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointDef[] = {  {&_swigt__p_b2JointDef, 0, 0, 0},  {&_swigt__p_b2DistanceJointDef, _p_b2DistanceJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2GearJointDef, _p_b2GearJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2LineJointDef, _p_b2LineJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2MouseJointDef, _p_b2MouseJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2PrismaticJointDef, _p_b2PrismaticJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2PulleyJointDef, _p_b2PulleyJointDefTo_p_b2JointDef, 0, 0},  {&_swigt__p_b2RevoluteJointDef, _p_b2RevoluteJointDefTo_p_b2JointDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2JointEdge[] = {  {&_swigt__p_b2JointEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2LineJoint[] = {  {&_swigt__p_b2LineJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2LineJointDef[] = {  {&_swigt__p_b2LineJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Manifold[] = {  {&_swigt__p_b2Manifold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ManifoldPoint[] = {  {&_swigt__p_b2ManifoldPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MassData[] = {  {&_swigt__p_b2MassData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Mat22[] = {  {&_swigt__p_b2Mat22, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Mat33[] = {  {&_swigt__p_b2Mat33, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MouseJoint[] = {  {&_swigt__p_b2MouseJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2MouseJointDef[] = {  {&_swigt__p_b2MouseJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2NullContact[] = {  {&_swigt__p_b2NullContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2OBB[] = {  {&_swigt__p_b2OBB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Pair[] = {  {&_swigt__p_b2Pair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PairCallback[] = {  {&_swigt__p_b2ContactManager, _p_b2ContactManagerTo_p_b2PairCallback, 0, 0},  {&_swigt__p_b2PairCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PairManager[] = {  {&_swigt__p_b2PairManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PolygonDef[] = {  {&_swigt__p_b2PolygonDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PolygonShape[] = {  {&_swigt__p_b2PolygonShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PrismaticJoint[] = {  {&_swigt__p_b2PrismaticJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PrismaticJointDef[] = {  {&_swigt__p_b2PrismaticJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Proxy[] = {  {&_swigt__p_b2Proxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PulleyJoint[] = {  {&_swigt__p_b2PulleyJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2PulleyJointDef[] = {  {&_swigt__p_b2PulleyJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJoint[] = {  {&_swigt__p_b2RevoluteJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2RevoluteJointDef[] = {  {&_swigt__p_b2RevoluteJointDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Segment[] = {  {&_swigt__p_b2Segment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Shape[] = {  {&_swigt__p_b2CircleShape, _p_b2CircleShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2PolygonShape, _p_b2PolygonShapeTo_p_b2Shape, 0, 0},  {&_swigt__p_b2Shape, 0, 0, 0},  {&_swigt__p_b2EdgeShape, _p_b2EdgeShapeTo_p_b2Shape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2ShapeDef[] = {  {&_swigt__p_b2ShapeDef, 0, 0, 0},  {&_swigt__p_b2CircleDef, _p_b2CircleDefTo_p_b2ShapeDef, 0, 0},  {&_swigt__p_b2PolygonDef, _p_b2PolygonDefTo_p_b2ShapeDef, 0, 0},  {&_swigt__p_b2EdgeChainDef, _p_b2EdgeChainDefTo_p_b2ShapeDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2StackAllocator[] = {  {&_swigt__p_b2StackAllocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2StackEntry[] = {  {&_swigt__p_b2StackEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Sweep[] = {  {&_swigt__p_b2Sweep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TensorDampingController[] = {  {&_swigt__p_b2TensorDampingController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TensorDampingControllerDef[] = {  {&_swigt__p_b2TensorDampingControllerDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2TimeStep[] = {  {&_swigt__p_b2TimeStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec2[] = {  {&_swigt__p_b2Vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Vec3[] = {  {&_swigt__p_b2Vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2Version[] = {  {&_swigt__p_b2Version, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2World[] = {  {&_swigt__p_b2World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_b2XForm[] = {  {&_swigt__p_b2XForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_b2Contact_p_b2BlockAllocator__void[] = {  {&_swigt__p_f_p_b2Contact_p_b2BlockAllocator__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact[] = {{&_swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact[] = {  {&_swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact, _p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContactTo_p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact, 0, 0},  {&_swigt__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__float[] = {  {&_swigt__p_f_p_void__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_b2CircleShape[] = {{&_swigt__p_p_b2CircleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_b2PolygonShape[] = {{&_swigt__p_p_b2PolygonShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_b2EdgeShape[] = {{&_swigt__p_p_b2EdgeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_b2Shape[] = {  {&_swigt__p_p_b2CircleShape, _p_p_b2CircleShapeTo_p_p_b2Shape, 0, 0},  {&_swigt__p_p_b2PolygonShape, _p_p_b2PolygonShapeTo_p_p_b2Shape, 0, 0},  {&_swigt__p_p_b2Shape, 0, 0, 0},  {&_swigt__p_p_b2EdgeShape, _p_p_b2EdgeShapeTo_p_p_b2Shape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_a_2_b2_maxProxies__b2Bound,
  _swigc__p_a_e_shapeTypeCount__b2ContactRegister,
  _swigc__p_b2AABB,
  _swigc__p_b2BlockAllocator,
  _swigc__p_b2Body,
  _swigc__p_b2BodyDef,
  _swigc__p_b2Bound,
  _swigc__p_b2BoundaryListener,
  _swigc__p_b2BroadPhase,
  _swigc__p_b2BufferedPair,
  _swigc__p_b2BuoyancyController,
  _swigc__p_b2BuoyancyControllerDef,
  _swigc__p_b2CircleDef,
  _swigc__p_b2CircleShape,
  _swigc__p_b2Color,
  _swigc__p_b2ConstantAccelController,
  _swigc__p_b2ConstantAccelControllerDef,
  _swigc__p_b2ConstantForceController,
  _swigc__p_b2ConstantForceControllerDef,
  _swigc__p_b2Contact,
  _swigc__p_b2ContactEdge,
  _swigc__p_b2ContactFilter,
  _swigc__p_b2ContactID,
  _swigc__p_b2ContactID__Features,
  _swigc__p_b2ContactListener,
  _swigc__p_b2ContactManager,
  _swigc__p_b2ContactPoint,
  _swigc__p_b2ContactRegister,
  _swigc__p_b2ContactResult,
  _swigc__p_b2Controller,
  _swigc__p_b2ControllerDef,
  _swigc__p_b2ControllerEdge,
  _swigc__p_b2DebugDraw,
  _swigc__p_b2DestructionListener,
  _swigc__p_b2DistanceJoint,
  _swigc__p_b2DistanceJointDef,
  _swigc__p_b2EdgeChainDef,
  _swigc__p_b2EdgeShape,
  _swigc__p_b2FilterData,
  _swigc__p_b2GearJoint,
  _swigc__p_b2GearJointDef,
  _swigc__p_b2GravityController,
  _swigc__p_b2GravityControllerDef,
  _swigc__p_b2Jacobian,
  _swigc__p_b2Joint,
  _swigc__p_b2JointDef,
  _swigc__p_b2JointEdge,
  _swigc__p_b2LineJoint,
  _swigc__p_b2LineJointDef,
  _swigc__p_b2Manifold,
  _swigc__p_b2ManifoldPoint,
  _swigc__p_b2MassData,
  _swigc__p_b2Mat22,
  _swigc__p_b2Mat33,
  _swigc__p_b2MouseJoint,
  _swigc__p_b2MouseJointDef,
  _swigc__p_b2NullContact,
  _swigc__p_b2OBB,
  _swigc__p_b2Pair,
  _swigc__p_b2PairCallback,
  _swigc__p_b2PairManager,
  _swigc__p_b2PolygonDef,
  _swigc__p_b2PolygonShape,
  _swigc__p_b2PrismaticJoint,
  _swigc__p_b2PrismaticJointDef,
  _swigc__p_b2Proxy,
  _swigc__p_b2PulleyJoint,
  _swigc__p_b2PulleyJointDef,
  _swigc__p_b2RevoluteJoint,
  _swigc__p_b2RevoluteJointDef,
  _swigc__p_b2Segment,
  _swigc__p_b2Shape,
  _swigc__p_b2ShapeDef,
  _swigc__p_b2StackAllocator,
  _swigc__p_b2StackEntry,
  _swigc__p_b2Sweep,
  _swigc__p_b2TensorDampingController,
  _swigc__p_b2TensorDampingControllerDef,
  _swigc__p_b2TimeStep,
  _swigc__p_b2Vec2,
  _swigc__p_b2Vec3,
  _swigc__p_b2Version,
  _swigc__p_b2World,
  _swigc__p_b2XForm,
  _swigc__p_char,
  _swigc__p_f_p_b2Contact_p_b2BlockAllocator__void,
  _swigc__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2Contact,
  _swigc__p_f_p_b2Shape_p_b2Shape_p_b2BlockAllocator__p_b2NullContact,
  _swigc__p_f_p_void__float,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_b2CircleShape,
  _swigc__p_p_b2EdgeShape,
  _swigc__p_p_b2PolygonShape,
  _swigc__p_p_b2Shape,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_pi",Swig_var_b2_pi_get, Swig_var_b2_pi_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxManifoldPoints",Swig_var_b2_maxManifoldPoints_get, Swig_var_b2_maxManifoldPoints_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxPolygonVertices",Swig_var_b2_maxPolygonVertices_get, Swig_var_b2_maxPolygonVertices_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxProxies",Swig_var_b2_maxProxies_get, Swig_var_b2_maxProxies_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxPairs",Swig_var_b2_maxPairs_get, Swig_var_b2_maxPairs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_linearSlop",Swig_var_b2_linearSlop_get, Swig_var_b2_linearSlop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_angularSlop",Swig_var_b2_angularSlop_get, Swig_var_b2_angularSlop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_toiSlop",Swig_var_b2_toiSlop_get, Swig_var_b2_toiSlop_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxTOIContactsPerIsland",Swig_var_b2_maxTOIContactsPerIsland_get, Swig_var_b2_maxTOIContactsPerIsland_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxTOIJointsPerIsland",Swig_var_b2_maxTOIJointsPerIsland_get, Swig_var_b2_maxTOIJointsPerIsland_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_velocityThreshold",Swig_var_b2_velocityThreshold_get, Swig_var_b2_velocityThreshold_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxLinearCorrection",Swig_var_b2_maxLinearCorrection_get, Swig_var_b2_maxLinearCorrection_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxAngularCorrection",Swig_var_b2_maxAngularCorrection_get, Swig_var_b2_maxAngularCorrection_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxLinearVelocity",Swig_var_b2_maxLinearVelocity_get, Swig_var_b2_maxLinearVelocity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxLinearVelocitySquared",Swig_var_b2_maxLinearVelocitySquared_get, Swig_var_b2_maxLinearVelocitySquared_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxAngularVelocity",Swig_var_b2_maxAngularVelocity_get, Swig_var_b2_maxAngularVelocity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxAngularVelocitySquared",Swig_var_b2_maxAngularVelocitySquared_get, Swig_var_b2_maxAngularVelocitySquared_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_contactBaumgarte",Swig_var_b2_contactBaumgarte_get, Swig_var_b2_contactBaumgarte_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_timeToSleep",Swig_var_b2_timeToSleep_get, Swig_var_b2_timeToSleep_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_linearSleepTolerance",Swig_var_b2_linearSleepTolerance_get, Swig_var_b2_linearSleepTolerance_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_angularSleepTolerance",Swig_var_b2_angularSleepTolerance_get, Swig_var_b2_angularSleepTolerance_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_byteCount",Swig_var_b2_byteCount_get, Swig_var_b2_byteCount_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_version",Swig_var_b2_version_get, Swig_var_b2_version_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2Vec2_zero",Swig_var_b2Vec2_zero_get, Swig_var_b2Vec2_zero_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2Mat22_identity",Swig_var_b2Mat22_identity_get, Swig_var_b2Mat22_identity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2XForm_identity",Swig_var_b2XForm_identity_get, Swig_var_b2XForm_identity_set);
  SWIG_Python_SetConstant(d, "e_unknownJoint",SWIG_From_int(static_cast< int >(e_unknownJoint)));
  SWIG_Python_SetConstant(d, "e_revoluteJoint",SWIG_From_int(static_cast< int >(e_revoluteJoint)));
  SWIG_Python_SetConstant(d, "e_prismaticJoint",SWIG_From_int(static_cast< int >(e_prismaticJoint)));
  SWIG_Python_SetConstant(d, "e_distanceJoint",SWIG_From_int(static_cast< int >(e_distanceJoint)));
  SWIG_Python_SetConstant(d, "e_pulleyJoint",SWIG_From_int(static_cast< int >(e_pulleyJoint)));
  SWIG_Python_SetConstant(d, "e_mouseJoint",SWIG_From_int(static_cast< int >(e_mouseJoint)));
  SWIG_Python_SetConstant(d, "e_gearJoint",SWIG_From_int(static_cast< int >(e_gearJoint)));
  SWIG_Python_SetConstant(d, "e_lineJoint",SWIG_From_int(static_cast< int >(e_lineJoint)));
  SWIG_Python_SetConstant(d, "e_inactiveLimit",SWIG_From_int(static_cast< int >(e_inactiveLimit)));
  SWIG_Python_SetConstant(d, "e_atLowerLimit",SWIG_From_int(static_cast< int >(e_atLowerLimit)));
  SWIG_Python_SetConstant(d, "e_atUpperLimit",SWIG_From_int(static_cast< int >(e_atUpperLimit)));
  SWIG_Python_SetConstant(d, "e_equalLimits",SWIG_From_int(static_cast< int >(e_equalLimits)));
  SWIG_Python_SetConstant(d, "RAND_LIMIT",SWIG_From_int(static_cast< int >(32767)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_nullFeature",Swig_var_b2_nullFeature_get, Swig_var_b2_nullFeature_set);
  SWIG_Python_SetConstant(d, "e_unknownShape",SWIG_From_int(static_cast< int >(e_unknownShape)));
  SWIG_Python_SetConstant(d, "e_circleShape",SWIG_From_int(static_cast< int >(e_circleShape)));
  SWIG_Python_SetConstant(d, "e_polygonShape",SWIG_From_int(static_cast< int >(e_polygonShape)));
  SWIG_Python_SetConstant(d, "e_edgeShape",SWIG_From_int(static_cast< int >(e_edgeShape)));
  SWIG_Python_SetConstant(d, "e_shapeTypeCount",SWIG_From_int(static_cast< int >(e_shapeTypeCount)));
  SWIG_Python_SetConstant(d, "e_startsInsideCollide",SWIG_From_int(static_cast< int >(e_startsInsideCollide)));
  SWIG_Python_SetConstant(d, "e_missCollide",SWIG_From_int(static_cast< int >(e_missCollide)));
  SWIG_Python_SetConstant(d, "e_hitCollide",SWIG_From_int(static_cast< int >(e_hitCollide)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_nullPair",Swig_var_b2_nullPair_get, Swig_var_b2_nullPair_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_nullProxy",Swig_var_b2_nullProxy_get, Swig_var_b2_nullProxy_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_tableCapacity",Swig_var_b2_tableCapacity_get, Swig_var_b2_tableCapacity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_tableMask",Swig_var_b2_tableMask_get, Swig_var_b2_tableMask_set);
  SWIG_Python_SetConstant(d, "b2Pair_e_pairBuffered",SWIG_From_int(static_cast< int >(b2Pair::e_pairBuffered)));
  SWIG_Python_SetConstant(d, "b2Pair_e_pairRemoved",SWIG_From_int(static_cast< int >(b2Pair::e_pairRemoved)));
  SWIG_Python_SetConstant(d, "b2Pair_e_pairFinal",SWIG_From_int(static_cast< int >(b2Pair::e_pairFinal)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_invalid",Swig_var_b2_invalid_get, Swig_var_b2_invalid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_nullEdge",Swig_var_b2_nullEdge_get, Swig_var_b2_nullEdge_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2BroadPhase_s_validate",Swig_var_b2BroadPhase_s_validate_get, Swig_var_b2BroadPhase_s_validate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_defaultFilter",Swig_var_b2_defaultFilter_get, Swig_var_b2_defaultFilter_set);
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_shapeBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_shapeBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_jointBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_jointBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_coreShapeBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_coreShapeBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_aabbBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_aabbBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_obbBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_obbBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_pairBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_pairBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_centerOfMassBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_centerOfMassBit)));
  SWIG_Python_SetConstant(d, "b2DebugDraw_e_controllerBit",SWIG_From_int(static_cast< int >(b2DebugDraw::e_controllerBit)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_chunkSize",Swig_var_b2_chunkSize_get, Swig_var_b2_chunkSize_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxBlockSize",Swig_var_b2_maxBlockSize_get, Swig_var_b2_maxBlockSize_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_blockSizes",Swig_var_b2_blockSizes_get, Swig_var_b2_blockSizes_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_chunkArrayIncrement",Swig_var_b2_chunkArrayIncrement_get, Swig_var_b2_chunkArrayIncrement_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_stackSize",Swig_var_b2_stackSize_get, Swig_var_b2_stackSize_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_maxStackEntries",Swig_var_b2_maxStackEntries_get, Swig_var_b2_maxStackEntries_set);
  SWIG_Python_SetConstant(d, "b2Contact_e_nonSolidFlag",SWIG_From_int(static_cast< int >(b2Contact::e_nonSolidFlag)));
  SWIG_Python_SetConstant(d, "b2Contact_e_slowFlag",SWIG_From_int(static_cast< int >(b2Contact::e_slowFlag)));
  SWIG_Python_SetConstant(d, "b2Contact_e_islandFlag",SWIG_From_int(static_cast< int >(b2Contact::e_islandFlag)));
  SWIG_Python_SetConstant(d, "b2Contact_e_toiFlag",SWIG_From_int(static_cast< int >(b2Contact::e_toiFlag)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2Contact_s_registers",Swig_var_b2Contact_s_registers_get, Swig_var_b2Contact_s_registers_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"b2Contact_s_initialized",Swig_var_b2Contact_s_initialized_get, Swig_var_b2Contact_s_initialized_set);
  SWIG_Python_SetConstant(d, "e_unknownController",SWIG_From_int(static_cast< int >(e_unknownController)));
  SWIG_Python_SetConstant(d, "e_buoyancyController",SWIG_From_int(static_cast< int >(e_buoyancyController)));
  SWIG_Python_SetConstant(d, "e_constantAccelController",SWIG_From_int(static_cast< int >(e_constantAccelController)));
  SWIG_Python_SetConstant(d, "e_constantForceController",SWIG_From_int(static_cast< int >(e_constantForceController)));
  SWIG_Python_SetConstant(d, "e_gravityController",SWIG_From_int(static_cast< int >(e_gravityController)));
  SWIG_Python_SetConstant(d, "e_tensorDampingController",SWIG_From_int(static_cast< int >(e_tensorDampingController)));
  SWIG_addvarlink(SWIG_globals(),(char*)"b2_minPulleyLength",Swig_var_b2_minPulleyLength_get, Swig_var_b2_minPulleyLength_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

